Option Explicit

'==================================================
' BEGIN Quote
'==================================================
sub Quote_Add()
	Browser("NGQ").Page("Quote").WebElement("Add").Click
end sub

sub Quote_AddProductOrOption()
	'Browser("NGQ").Page("Quote").WebElement("Add").ScrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").Link("Add Product or Option").Click
	UFT.ReplayType = intOriginalReplayType
end sub


Sub uploadConfigFile(strPath)
	Browser("NGQ").Page("Upload Config").Frame("ConfigFrame").WebElement("UploadConfigBrowse").Click
	Browser("NGQ").Dialog("Choose File to Upload").WinEdit("File name:").Set strPath
	Browser("NGQ").Dialog("Choose File to Upload_2").WinButton("Open").Click
	Browser("NGQ").Page("Upload Config").Frame("ConfigFrame").WebElement("UploadConfigUpload").Click
End Sub

Sub Quote_UploadConfig(strPath)
	Browser("NGQ").Page("Quote").WebElement("Upload").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Upload").MouseOver
	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("UploadConfig").Click
	UFT.ReplayType = intOriginalReplayType
	uploadConfigFile strPath
	Browser("NGQ").Page("Upload Config").Frame("ConfigFrame").WebElement("ProceedImport").Click
	Browser("NGQ").Page("Upload Config").Frame("ConfigFrame").WebElement("ConfigSave").Click
	Browser("NGQ").Page("OCS Config").WebElement("ConvertQuote").Click
End Sub

sub Quote_AdditionalDataTab()
	Browser("NGQ").Page("Quote").WebElement("Additional Data Tab").Click
	Wait 1
end sub

sub Quote_CustomerDataTab()
	Browser("NGQ").Page("Quote").WebElement("Customer Data Tab").Click
	Wait 1
end sub

sub Quote_OpportunityAndQuoteInfoTab()
	Browser("NGQ").Page("Quote").WebElement("Opportunity and Quote Info Tab").Click
	Wait 1
end sub

sub Quote_ShippingDataTab()
	Browser("NGQ").Page("Quote").WebElement("Shipping Data Tab").Click
	Wait 1
end sub

Sub Quote_PricingTermsTab()
	Browser("NGQ").Page("Quote").WebElement("PricingTermsTab").Click
	Wait 1
End Sub

'Author Jesus:
Sub Quote_QuoteOutputTab()
	Browser("NGQ").Page("Quote").WebElement("QuoteOutputTab").Click
	Wait 1
End Sub
Function Quote_currentlySelectedTab(strQuoteTabSelected)
	'validating currently selected quote tab
	Dim strSelectedTab : strSelectedTab = Browser("NGQ").Page("Quote").WebElement("Quote_CurrentlySelectedTab").GetROProperty("innertext")
	if  strSelectedTab = strQuoteTabSelected Then
		Reporter.ReportEvent micPass, "Validate currently selected quote tab","Correct Quote Tab is selected"
	else
		Reporter.ReportEvent micFail, "Validate currently selected quote tab","Incorrect Quote Tab is selected: " + strSelectedTab
	End if
End Function

Sub Quote_save()
	'save quote
	Browser("NGQ").Page("Quote").WebElement("SaveButton").Click
	if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "Successfully Saved Quote!" then
		Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
	else
		Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
	End if
End Sub

Sub Quote_save_unverified()
	Browser("NGQ").Page("Quote").WebElement("SaveButton").Click
End Sub

Function Quote_get_quoteNumber()
	Dim quoteID : quoteID = Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext")
	If quoteID <> "New Quote" Then
		Quote_get_quoteNumber = quoteID
		Reporter.ReportEvent micPass, "Get Quote ID", "Successfully Extracted Quote ID"
	else
		Reporter.ReportEvent micWarning, "Get Quote ID", "New Quote has no ID"
	End If
End Function

Sub Quote_refreshPricing()
	Utils_scroll_to_refreshPricing
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
	if Browser("NGQ").Page("Quote").WebElement("RefreshPricingMessage").GetROProperty("innertext") = "Refresh Pricing complete" then
		Reporter.ReportEvent micPass, "Refresh Pricing", "Successfully Refreshed Pricing for this Quote"
		Reporter.ReportEvent micFail, "Refresh Pricing","Failed to Refresh Pricing for this Quote"
	End if
End Sub

Sub Utils_scroll_to_refreshPricing()
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Object.scrollIntoView
End Sub

'==================================================
' END Quote
'==================================================
' BEGIN New Quote - Empty fields validations 
'==================================================
function NewQuote_ValidateEmptyQuote(strQuoteNumberID, strQuoteVersion, strQuoteStatus, strQuoteEndDate)
	' Validating Quote Number
	strQuoteNumberID = Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext")
	If strQuoteNumberID = "New Quote" Then
		Reporter.ReportEvent micPass, "Validate empty quote number","QuoteID contains default New Quote text"
	Else
		Reporter.ReportEvent micFail, "Validate empty quote number","QuoteID does not contain default New Quote text"
	End If
	' Validating Quote Version
	strQuoteVersion = Browser("NGQ").Page("Quote").WebElement("quoteVersion").GetROProperty("innertext")
	If strQuoteVersion = "1" Then
		Reporter.ReportEvent micPass, "Validate version 1","New quote version is 1"
	Else
		Reporter.ReportEvent micFail, "Validate version 1","New quote version is not 1"
	End If
	' Validating Quote Name
	If Browser("NGQ").Page("Quote").WebElement("quoteName").Exist Then
		Reporter.ReportEvent micPass, "Validate quate name","Quote Name is empty and pencil icon indicating it is editable"	
	Else
		Reporter.ReportEvent micFail, "Validate quate name","Quote Name is not empty and pencil icon indicating it is editable"
	End If	
	' Validating Quote Status
	strQuoteStatus = Browser("NGQ").Page("Quote").WebElement("quoteStatus").GetROProperty("innertext")
	If strQuoteStatus = "Quote/Configuration Created" Then
		Reporter.ReportEvent micPass, "Valide quote status","Quote Status is Quote/Configuration Created"
	Else
		Reporter.ReportEvent micFail, "Valide quote status","Quote Status is not Quote/Configuration Created"
	End If	
	' Validating Quote Start Date
	If Browser("NGQ").Page("Quote").WebElement("quoteStartDate").Exist Then
		Reporter.ReportEvent micPass, "Validate start date","Start Date is visible"	
	Else
		Reporter.ReportEvent micFail, "Validate start date","Start Date is not visible"
	End If		
	' Validating Quote End Date
	strQuoteEndDate = Browser("NGQ").Page("Quote").WebElement("quoteEndDate").GetROProperty ("innertext")
	If strQuoteEndDate = "(Need Pricing Call)" Then
		Reporter.ReportEvent micPass, "Validate end date","End Date has default - Need Pricing Call - value"
	Else
		Reporter.ReportEvent micFail, "Validate end date","End Date does not have default value"
	End If
End function	
'==================================================
' END New Quote - Empty fields validations 
'==================================================
' BEGIN Quote - Edit quote name
'==================================================
function Quote_EditQuoteName(strQuoteName)
	Browser("NGQ").Page("Quote").WebElement("EditQuoteName").Click
	Browser("NGQ").Page("Quote").WebEdit("EnterQuoteName").Set strQuoteName
End function
'==================================================
' END Quote - Edit quote name
'==================================================
' BEGIN Quote - Additional Data
'==================================================
function AdditionalData_GetReceiptDate()
	AdditionalData_GetReceiptDate = Browser("NGQ").Page("Quote - Additional Data").WebEdit("Receipt Date").Value
end function

sub AdditionalData_SetReceiptDate(strValue)
	'yyyy-MM-dd HH:mm
	Browser("NGQ").Page("Quote - Additional Data").WebEdit("Receipt Date").Set strValue
	'TODO: datepicker
end sub

sub AdditionalData_SetReceiptDateNow()
	Browser("NGQ").Page("Quote - Additional Data").WebEdit("Receipt Date").Click
	Browser("NGQ").Page("DateTime Picker").WebButton("Now").Click
	Browser("NGQ").Page("DateTime Picker").WebButton("Done").Click
end sub
'==================================================
' END Quote - Additional Data
'==================================================
' BEGIN Quote - Customer Data
'==================================================
sub CustomerData_BillToTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Bill To Tab").Click
	Wait 1
end sub

sub CustomerData_SalesContactsTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Sales Contacts Tab").Click
	Wait 1
end sub

sub CustomerData_ShipToTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Ship To Tab").Click
	Wait 1
end sub

sub CustomerData_SoldToTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Sold To Tab").Click
	Wait 1
end sub
'==================================================
' END Quote - Customer Data
'==================================================
' BEGIN Quote - Customer Data - Bill To
'==================================================
sub CustomerDataBillTo_DeselectSameAsSoldToAddress()
	Browser("NGQ").Page("Quote - Customer Data - Bill To").WebCheckBox("Same as Sold to Address").UncheckBox
end sub

function CustomerDataBillTo_SameAsSoldToAddressIsSelected()
	CustomerDataShipTo_SameAsSoldToAddressIsSelected = Browser("NGQ").Page("Quote - Customer Data - Bill To").WebCheckBox("Same as Sold to Address").IsChecked
end function

sub CustomerDataBillTo_SelectSameAsSoldToAddress()
	Browser("NGQ").Page("Quote - Customer Data - Bill To").WebCheckBox("Same as Sold to Address").CheckBox
end sub
'==================================================
' END Quote - Customer Data - Bill To
'==================================================
' BEGIN Quote - Customer Data - Ship To
'==================================================
sub CustomerDataShipTo_DeselectSameAsSoldToAddress()
	Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address").UncheckBox
end sub

function CustomerDataShipTo_SameAsSoldToAddressIsSelected()
	CustomerDataShipTo_SameAsSoldToAddressIsSelected = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address").IsChecked
end function

sub CustomerDataShipTo_SelectSameAsSoldToAddress()
	Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address").CheckBox
end sub
'==================================================
' END Quote - Customer Data - Ship To
'==================================================
' BEGIN Quote - LineItemDetails
'==================================================
Sub AddProductsFromTable
	Dim row, rowcount, Iterator
	rowcount = DataTable.GetRowCount
	For Iterator = 1 To rowcount Step 1
		row = DataTable.GetCurrentRow
		LineItemDetails_AddProductByNumber DataTable.Value("productID", "Global"), DataTable.Value("productQty", "Global")
	Next
End Sub

Sub LineItemDetails_AddProductByNumber (productNum, productQty)
	Quote_AddProductOrOption

	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2

	LineItemDetails_SetProductNumber productNum
	LineItemDetails_SetProductQuantity productQty
	
	'Quote_save_unverified
	'wait 5
	
	'Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//option[@label='Product']/parent::select/parent::div/parent::div/following-sibling::div//input[@ng-model='row.entity.productNr']").Set productNum
	'Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//option[@label='Product']/parent::select/parent::div/parent::div/following-sibling::div//input[@ng-model='row.entity.productNr']").Click
	'Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//option[@label='Product']/parent::select/parent::div/parent::div/following-sibling::div//input[@ng-model='row.entity.productNr']").SendKeys "~" 
	UFT.ReplayType = intOriginalReplayType
End Sub

Sub LineItemDetails_SetProductNumber(strValue)
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").HoverTap
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Set strValue
	wait 1
	If not Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Exist Then
		Quote_AddProductOrOption
		Utils_scrollToBottom_lineItemAdd
		Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Set strValue
	End If
End Sub
Sub LineItemDetails_SetProductQuantity(strValue)
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductQty").Set strValue
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductQty").SendKeys "~"
End Sub

Sub Utils_scrollToBottom_lineItemAdd()
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Object.scrollIntoView
End Sub

'==================================================
' END Quote - LineItemDetails
'==================================================
' BEGIN Quote - "+ Add" button options validation 
'==================================================
function Quote_ValidateAddButtonOptions()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	' Validating Add Line
	If Browser("NGQ").Page("Quote").Link("Add Line").Exist Then
		Reporter.ReportEvent micPass, "Validate - Add Line","Add Line option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Add Line","Add Line option is not displayed"
	End If
	' Validating Add Product or Option
	If Browser("NGQ").Page("Quote").Link("Add Product or Option").Exist Then
		Reporter.ReportEvent micPass, "Validate - Add Product or Option","Add Product or Option option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Add Product or Option","Add Product or Option option is not displayed"
	End If
	' Validating Add Bundle
	If Browser("NGQ").Page("Quote").Link("Add Bundle").Exist Then
		Reporter.ReportEvent micPass, "Validate -Add Bundle","Add Bundle option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Add Bundle","Add Bundle option is not displayed"
	End If	
	' Add Config from OCS
	If Browser("NGQ").Page("Quote").Link("Add OCS Config").Exist Then
		Reporter.ReportEvent micPass, "Validate - Add Config from OCS","Add Config from OCS option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Add Config from OCS","Add Config from OCS option is not displayed"
	End If	
	' Search Product(s)
	If Browser("NGQ").Page("Quote").Link("Search Product(s)").Exist Then
		Reporter.ReportEvent micPass, "Validate - Search Product(s)","Search Product(s) option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Search Product(s)","Search Product(s) option is not displayed"
	End If	
	' Quick Add
	If Browser("NGQ").Page("Quote").Link("Quick Add").Exist Then
		Reporter.ReportEvent micPass, "Validate - Quick Add","Quick Add option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Quick Add","Quick Add option is not displayed"
	End If		
end function
'==================================================
' END Quote - "+ Add" button options validation 
'==================================================
' BEGIN Quote - Add OCS
'==================================================
Sub click_lineitem_add_ocs()
	browser("NGQ").Page("Quote - Line Item Details").WebElement("addButton").Click
	browser("NGQ").Page("Quote - Line Item Details").WebElement("OCSConfig").Click
End Sub
'==================================================
' END Quote - Add OCS 
'==================================================
' BEGIN Quote - OpportunityAndQuoteInfo
'==================================================
function OpportunityAndQuoteInfo_GetOpportunityId()
	OpportunityAndQuoteInfo_GetOpportunityId = Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebEdit("Opportunity ID").Value
end function

sub OpportunityAndQuoteInfo_Import()
	Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebElement("Import").Click
end sub

sub OpportunityAndQuoteInfo_ImportOpportunityId(strValue) 
	OpportunityAndQuoteInfo_SetOpportunityId strValue
	OpportunityAndQuoteInfo_Import
	Wait 3	
	'Need time to get information
	'TODO: extra syncing?
end sub

sub OpportunityAndQuoteInfo_SetOpportunityId(strValue)
	Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebEdit("Opportunity ID").Set strValue
end sub
'Author: Jesus
Sub OpportunityIdIsValid()
	'This subroutine assumes that a valid opportunity id requires the name field to be populated
	Dim strTempContactName : strTempContactName = Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebElement("Opportunity ID Contact Name").GetROProperty("innertext")
	If strTempContactName = "" Then
		Reporter.ReportEvent micFail, "Invalid Opportunity ID", "Invalid Opportunity ID entered.  Fields were not populated"
	Else
		Reporter.ReportEvent micPass, "Valid Opportunity ID", "Valid Opportunity ID Entered"
	End If	
End Sub
'==================================================
' END Quote - OpportunityAndQuoteInfo
'==================================================
' BEGIN Quote - ShippingData
'==================================================
function ShippingData_GetDeliverySpeed()
	ShippingData_GetDeliverySpeed = Browser("NGQ").Page("Quote - Shipping Data").WebList("Delivery Speed").Value
end function

function ShippingData_GetTermsOfDelivery()
	ShippingData_GetTermsOfDelivery = Browser("NGQ").Page("Quote - Shipping Data").WebList("Terms of Delivery").Value
end function

sub ShippingData_SetDeliverySpeed(strValue)
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Delivery Speed").WaitProperty "items count", micGreaterThan(1), 5000
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Delivery Speed").SelectByText strValue
end sub

sub ShippingData_SetTermsOfDelivery(strValue)
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Terms of Delivery").WaitProperty "items count", micGreaterThan(1), 5000
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Terms of Delivery").Click
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Terms of Delivery").SelectByText strValue
end sub
'==================================================
' END Quote - ShippingData
'==================================================
' BEGIN Quote - Search
'==================================================
function AdvancedSearch(strQuoteNumber)
	Browser("name:=Home").Page("title:=Home").WebEdit("xpath:=//DIV[@id=""Form""]/DIV[2]/FORM[1]/DIV[1]/DIV[1]/INPUT[1]").Set strQuoteNumber
end function

function QuickSearch(strQuoteNumber)
	Browser("name:=Home").Page("title:=Home").WebEdit("xpath:=//DIV[@id=""views""]/DIV[1]/DIV[1]/DIV[2]/DIV[1]/NGQ-QUICK-SEARCH[1]/DIV[1]/NGQ-INPUT-TEXT[1]/DIV[1]/INPUT[1]").Set strQuoteNumber
end function

sub QuickSearch_Search()
	Browser("name:=Home").Page("title:=Home").WebElement("innerText:=Search", "xpath:=//DIV[@id=""views""]/DIV[1]/DIV[1]/DIV[2]/DIV[1]/NGQ-QUICK-SEARCH[1]/DIV[2]/DIV[1]/NGQ-PRIMARY-BUTTON[1]/A[1]").Click
end sub

sub SelectResult_Search(strQuoteNumber)
	Browser("name:=Home").Page("title:=Home").Link("innertext:="&strQuoteNumber).Click
	wait 4
end sub
'==================================================
' END Quote - Search
'==================================================
' BEGIN QuoteServices - Options
'==================================================
' BEGIN QuoteServices - Options - Claim
'==================================================
function QuoteServices_Claim()
	'Use this function if you'll work with QuoteNumber = NI00147520
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Ok","xpath:=//DIV[@id=""Claim_meg""]/DIV[2]/A[1]").Click
	wait 3
end function
'==================================================
' END QuoteServices - Options - Claim	
'==================================================	
' BEGIN QuoteServices - Options - CustomGroup
'==================================================
function QuoteServices_AddCustomGroup(strGroupLabel, strGroupSummary)
	'Add Custom Group
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Add Custom Group","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[1]/DIV[1]/A[1]").Click
	'Complete form to add
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupLabel","xpath:=//INPUT[@id=""groupLabel""]","index:=0").Set strGroupLabel
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupSummary","xpath:=//TEXTAREA[@id=""groupSummary""]","index:=0").Set strGroupSummary
	'Save Custom Group
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Save","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/DIV[1]/DIV[1]/DIV[3]/A[1]").Click
	'Validation
	If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is inserted successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
		Reporter.ReportEvent micPass, "Add Custom Group","Custom Group was added correctly"
	Else
		Reporter.ReportEvent micFail, "Add Custom Group","Custom Group was NOT added correctly"
	End If		
end function
	
sub QuoteServices_EditCustomGroup(strGroupLabelEdited, strGroupSummaryEdited)
	Browser("name:=Home.*").Page("title:=Home.*").Image("title:=Edit","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/TABLE[1]/TBODY[1]/TR[9]/TD[1]/A[1]/IMG[1]").Click 
	'Edit Custom Group Information
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupLabel","xpath:=//INPUT[@id=""grouplabeledit""]","index:=0").Set strGroupLabelEdited
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupSummary","xpath:=//TEXTAREA[@id=""gropsummaryedit""]","index:=0").Set strGroupSummaryEdited
	'Update Custom Group
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Update","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/DIV[2]/DIV[3]/A[1]").Click
	'Validation
	If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is updated successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
		Reporter.ReportEvent micPass, "Edit Custom Group","Custom Group was edited correctly"
	Else
		Reporter.ReportEvent micFail, "Edit Custom Group","Custom Group was NOT edited correctly"
	End If
end sub
	
sub QuoteServices_RemoveCustomGroup()
	Browser("name:=Home.*").Page("title:=Home.*").Image("title:=Del","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/TABLE[1]/TBODY[1]/TR[9]/TD[1]/A[2]/IMG[1]").Click
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Yes","xpath:=//DIV[@id=""UsrPrfnceCustom_group""]/DIV[2]/A[1]").Click
	'Validation
	If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is deleted successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
		Reporter.ReportEvent micPass, "Remove Custom Group","Custom Group was removed correctly"
	Else
		Reporter.ReportEvent micFail, "Remove Custom Group","Custom Group was NOT removed correctly"
	End If 		
	'Close Custom Group
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Close","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[3]/A[1]").Click
end sub	
'==================================================	
' END QuoteServices - Options - CustomGroup
'==================================================
'==================================================
' BEGIN ValidatePriceRefreshed
' Author Jesus
'==================================================
Sub ValidatePriceRefreshed()
	If Browser("NGQ").Page("Quote").WebElement("RefreshPricingMessage").CheckProperty ("innertext", MicRegExpMatch(".*Refresh Pricing completed.*")) Then
		Reporter.ReportEvent micPass, "Price refreshed successfully", "Refresh Pricing completed found"
	Else
		Reporter.ReportEvent micFail, "Price did not refreshed successfully", "Refresh Pricing completed not found"
	End If
End Sub
'==================================================
' END ValidatePriceRefreshed
'==================================================
' BEGIN SelectExtraMenu
' Author Jesus
'==================================================
Sub SelectExtraMenu()
	Browser("NGQ").Page("Quote - Extra Menu").WebElement("Triangle Hidden Menu Button").Click
End Sub
'==================================================
' END SelectExtraMenu
'==================================================
' BEGIN SelectPreValidate
' Author Jesus
'==================================================
Sub SelectPreValidate()
	SelectExtraMenu
	Browser("NGQ").Page("Quote - Extra Menu").WebElement("Pre-Validate").Click
End Sub


'==================================================
' END SelectPreValidate
'==================================================
' BEGIN PreValidate_FixDataCheckErrors
' Author Jesus
'==================================================
Sub PreValidate_FixDataCheckErrors()
	Quote_AdditionalDataTab
	AdditionalData_SetReceiptDateNow
	
	Quote_ShippingDataTab
	ShippingData_SetDeliverySpeed "Standard"
	ShippingData_SetTermsOfDelivery "Carriage Paid To"
	
	'Fix errors in price tab
	Quote_CustomerDataTab
	CustomerData_ShipToTab
	If Not CustomerDataShipTo_SameAsSoldToAddressIsSelected Then
		CustomerDataShipTo_SelectSameAsSoldToAddress
	End If
End Sub

Sub PreValidate_DataCheckNoErrors()
	Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Data Check Btn")
	PreValidate_ButtonVerification(objButton)
End Sub

Sub PreValidate_ClicNoErrors()
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Clic Btn").Click
	Reporter.ReportEvent micWarning, "Step not in script", "This step is not in the test case, but it is required to remove the errors from CLIC section.  It overrides the error in this screen."
	Browser("NGQ").Page("Quote - Pre-Validation").WebEdit("Override Reason Text").Set "Test"	
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Custom Config Check Btn").Click
	Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Clic Btn")
	PreValidate_ButtonVerification(objButton)
End Sub

Sub PreValidate_PriceNoErrors()
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Price Btn").Click
	Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Price Btn")
	PreValidate_ButtonVerification(objButton)
End Sub

Sub PreValidate_BundleNoErrors()
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Bundle Btn").Click
	Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Bundle Btn")
	PreValidate_ButtonVerification(objButton)
End Sub

Sub PreValidate_CloseValidationPage()
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Close Validation Page Btn").Click
End Sub

Sub PreValidate_ClickCompleteQuote()
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Complete Quote Btn").Click	
	PreValidate_ValidateCompleteQuote
End Sub

Sub PreValidate_ButtonVerification(objButton)
	Dim bcolor
	Dim blnCheckMark

	bcolor = objButton.Object.currentStyle.backgroundColor	
	If bcolor = "#767676" Then
		Logger.Report micPass, "Button is gray", "The " & objButton.GetTOProperty("TestObjName") & " is gray with a value of " & bcolor
	Else
		Logger.Report micFail, "Button is not gray", "The " & objButton.GetTOProperty("TestObjName") & " is no gray. It has a value of " & bcolor
		ExitTest
	End If

	
	blnCheckMark = objButton.CheckProperty("innerhtml", MicRegExpMatch(".*class=""load_right"".*"))	
	If blnCheckMark Then
		Logger.Report micPass, "Button has checkmark", "The " & objButton.GetTOProperty("TestObjName") & " has a checkmark"
	Else
		Logger.Report micFail, "Button doe not have a checkmark", "The " & objButton.GetTOProperty("TestObjName") & " does not have a checkmark"
		ExitTest
	End If
End Sub

Sub PreValidate_ValidateCompleteQuote()
	If Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Complete Quote Results").Exist(10) Then
		'TODO Jesus: Verify w/ business the correct message
		If Not Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Complete Quote Results").CheckProperty("innertext", MicRegExpMatch(".*QUOTE SUCESSFULLY UPDATED INTO IDS DB")) Then
			Logger.Report micFail, "Message not Displayed", "The results section does not display ""QUOTE SUCESSFULLY UPDATED INTO INS DB"""
			ExitTest
		Else
			Logger.Report micPass, "Message Displayed", "The results section displays ""QUOTE SUCESSFULLY UPDATED INTO INS DB"""
		End If
	Else
		Logger.Report micFail, "Message cannot be found", "The result message in ""Complete Quote"" cannot be found"
		ExitTest
	End If
End Sub

Function OutputQuote_GetOutputType()
	OutputQuote_GetOutputType = Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").Value
end Function

Sub OutputQuote_SetOutputType(strValue)	
	Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").WaitProperty "items count", micGreaterThan(1), 5000
	Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").SelectByText strValue
end Sub

Sub OutputQuote_ClickPreview
	Browser("NGQ").Page("Quote - Output Quote").WebElement("Preview Btn").Click
End Sub

'TODO Jesus: Check if scripts work without these functions.  Function with same names exist
'Sub OutputQuote_SaveQuotePdf(strQuoteNum)
'	Dim strSavePath
'	strSavePath = CreateSavePath(strQuoteNum)
'	SavePdfAs strSavePath
'	DataTable.GlobalSheet.AddParameter "OutputFilePath", strSavePath
'End Sub

'Function CreateSavePath(strQuoteNum)
'	Dim strCreatedPath
'	strCreatedPath = Environment.Value("TestDir") + "\" + strQuoteNum + ".pdf"
'	CreateSavePath = strCreatedPath
'End Function

Sub SavePdfAs(strPath)
	Browser("NGQ").WinObject("Save Bar").WinButton("Save Drop Down Menu").Click
	Browser("NGQ").WinObject("Save Bar").WinMenu("Save Drop Down Menu").Select "Save as"
	Browser("NGQ").Dialog("Save As").WinEdit("File name:").Set strPath
	Browser("NGQ").Dialog("Save As").WinButton("Save").Click
End Sub
	' BEGIN QuoteServices - Options - Claim
	'==================================================
	function QuoteServices_Claim()
		'Use this function if you'll work with QuoteNumber = NI00147520
		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Ok","xpath:=//DIV[@id=""Claim_meg""]/DIV[2]/A[1]").Click
		wait 3
	end function
	'==================================================
	' END QuoteServices - Options - Claim	
	'==================================================	
	' BEGIN QuoteServices - Options - CustomGroup
	'==================================================
	function QuoteServices_AddCustomGroup(strGroupLabel, strGroupSummary)
		'Add Custom Group
		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Add Custom Group","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[1]/DIV[1]/A[1]").Click
		'Complete form to add
		Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupLabel","xpath:=//INPUT[@id=""groupLabel""]","index:=0").Set strGroupLabel
		Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupSummary","xpath:=//TEXTAREA[@id=""groupSummary""]","index:=0").Set strGroupSummary
		'Save Custom Group
		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Save","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/DIV[1]/DIV[1]/DIV[3]/A[1]").Click
		'Validation
		If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is inserted successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
			Reporter.ReportEvent micPass, "Add Custom Group","Custom Group was added correctly"
		Else
			Reporter.ReportEvent micFail, "Add Custom Group","Custom Group was NOT added correctly"
		End If		
	end function
	
	sub QuoteServices_EditCustomGroup(strGroupLabelEdited, strGroupSummaryEdited)
		Browser("name:=Home.*").Page("title:=Home.*").Image("title:=Edit","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/TABLE[1]/TBODY[1]/TR[9]/TD[1]/A[1]/IMG[1]").Click 
		'Edit Custom Group Information
		Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupLabel","xpath:=//INPUT[@id=""grouplabeledit""]","index:=0").Set strGroupLabelEdited
		Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupSummary","xpath:=//TEXTAREA[@id=""gropsummaryedit""]","index:=0").Set strGroupSummaryEdited
		'Update Custom Group
		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Update","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/DIV[2]/DIV[3]/A[1]").Click
		'Validation
		If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is updated successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
			Reporter.ReportEvent micPass, "Edit Custom Group","Custom Group was edited correctly"
		Else
			Reporter.ReportEvent micFail, "Edit Custom Group","Custom Group was NOT edited correctly"
		End If
	end sub
	
	sub QuoteServices_RemoveCustomGroup()
		Browser("name:=Home.*").Page("title:=Home.*").Image("title:=Del","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/TABLE[1]/TBODY[1]/TR[9]/TD[1]/A[2]/IMG[1]").Click
		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Yes","xpath:=//DIV[@id=""UsrPrfnceCustom_group""]/DIV[2]/A[1]").Click
		'Validation
		If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is deleted successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
			Reporter.ReportEvent micPass, "Remove Custom Group","Custom Group was removed correctly"
		Else
			Reporter.ReportEvent micFail, "Remove Custom Group","Custom Group was NOT removed correctly"
		End If 		
		'Close Custom Group
		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Close","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[3]/A[1]").Click
	end sub	
	'==================================================	
	' END QuoteServices - Options - CustomGroup
	'==================================================
	' BEGIN Quotes  - Pricing and Terms Tab
	'==================================================
	Sub verify_price_quality_band()
		If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").Exist Then
			Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands exist"
		else
			Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands failed to load"
		End If
	End Sub
	
Sub applyEmpowerment(eType)
	Dim row, actual, rowcount, Iterator, xpath, index, dynCol
	Select Case eType
		Case "Preferred"
			reset_DataTable
			Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyPreferredEmpower").Click
			If Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Exist Then
				Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Click
			End If
			rowcount = DataTable.GetRowCount
			For Iterator = 1 To rowcount Step 1
				row = DataTable.GetCurrentRow
				'actual = Browser("NGQ").Page("Pricing and Terms").WebElement("TotalRequestedDiscount","index:="&Iterator).GetROProperty("innertext")
				'index = Iterator + 1
				'dynCol = findTableColumn("Total Requested Discount")
				xpath = "xpath:=(//div[@id='thresholdLocation']//span[@title='Total Requested Discount'])[" & Iterator & "]"
				actual = Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).GetROProperty("innertext")
				If actual = DataTable("Preferred") Then
					Reporter.ReportEvent micPass, "Verify Updated Empowerment Pricing", "Verified Correct Empowerment Discount"
				else
					Reporter.ReportEvent micFail, "Verify Updated Empowerment Pricing", "Incorrect Empowerment Discount " & actual & " returned"
				End If
				row = DataTable.SetNextRow
			Next
		Case "Personal"
			reset_DataTable
			Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyPersonalEmpowerment").Click
			If Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Exist Then
				Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Click
			End If
			rowcount = DataTable.GetRowCount
			For Iterator = 1 To rowcount Step 1
				row = DataTable.GetCurrentRow
				'actual = Browser("NGQ").Page("Pricing and Terms").WebElement("TotalRequestedDiscount","index:="&Iterator).GetROProperty("innertext")
				'index = Iterator + 1
				'dynCol = findTableColumn("Total Requested Discount")
				xpath = "xpath:=(//div[@id='thresholdLocation']//span[@title='Total Requested Discount'])[" & Iterator & "]"
				actual = Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).GetROProperty("innertext")
				If actual = DataTable("Personal") Then
					Reporter.ReportEvent micPass, "Verify Updated Empowerment Pricing", "Verified Correct Empowerment Discount"
				else
					Reporter.ReportEvent micFail, "Verify Updated Empowerment Pricing", "Incorrect Empowerment Discount " & actual & " returned"
				End If
				row = DataTable.SetNextRow
			Next
		Case "Manager"
			reset_DataTable
			Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyManagerEmpowerment").Click
			If Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Exist Then
				Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Click
			End If
			rowcount = DataTable.GetRowCount
			For Iterator = 1 To rowcount Step 1
				row = DataTable.GetCurrentRow
				'actual = Browser("NGQ").Page("Pricing and Terms").WebElement("TotalRequestedDiscount","index:="&Iterator).GetROProperty("innertext")
				'index = Iterator + 1
				'dynCol = findTableColumn("Total Requested Discount")
				xpath = "xpath:=(//div[@id='thresholdLocation']//span[@title='Total Requested Discount'])[" & Iterator & "]"
				actual = Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).GetROProperty("innertext")
				If actual = DataTable("Manager") Then
					Reporter.ReportEvent micPass, "Verify Updated Empowerment Pricing", "Verified Correct Empowerment Discount"
				else
					Reporter.ReportEvent micFail, "Verify Updated Empowerment Pricing", "Incorrect Empowerment Discount " & actual & " returned"
				End If
				row = DataTable.SetNextRow
			Next
		Case "MCC"
			reset_DataTable
			rowcount = DataTable.GetRowCount
			For Iterator = 1 To rowcount Step 1
				row = DataTable.GetCurrentRow
				'index = Iterator + 1
				'dynCol = findTableColumn("Total Requested Discount")
				xpath = "xpath:=(//div[@id='thresholdLocation']//span[@title='Total Requested Discount'])[" & Iterator & "]"
				actual = Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).GetROProperty("innertext")
				If actual = DataTable("MCCDiscount") Then
					Reporter.ReportEvent micPass, "Verify Updated MCC Pricing", "Verified Correct MCC Discount"
				else
					Reporter.ReportEvent micFail, "Verify Updated MCC Pricing", "Incorrect MCC Discount " & actual & " returned"
				End If
				row = DataTable.SetNextRow
			Next
	End Select
End Sub

Function findTableColumn(strColumnName)
	dim findCol : findCol = Browser("NGQ").Page("Quote - Line Item Details").WebElement(strColumnName).GetROProperty("class")
	dim matches : set matches = RegexGetMatches(findCol, "\s{1}(col[0-9]+)\s{1}", false)
	if matches.Count = 0 then
	    'we failed poi~
	    print "failed"
	end if
	findTableColumn = Trim(matches(0).Value)
End Function

Sub reset_DataTable()
	Dim it, curRow, numRow
	numRow = DataTable.GetRowCount
	For it = numRow To 1 Step -1
		DataTable.SetPrevRow
	Next
End Sub

Sub lineItemDetails_addColumn(optColumn)
	Utils_scrollToBottom_lineItemAddColumn
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("LineItemDetailsAddColumns").Click
	Dim index
	Select Case optColumn
		Case "Pricing_Source"
			index = "34"
		Case "Source_ID"
			index = "36"
	End Select
	Dim xpath : xpath = "xpath:=//input[@id='SHM" & index & "']"
	Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).Click
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("LineItemDetailsAddColumns").Click
End Sub

Sub lineItemDetails_verifyPricingSource()
	reset_DataTable
	Utils_scrollRight_lineItemTableColumn
	dim rowcount : rowcount = DataTable.GetRowCount
	Dim Iterator,xpath,actual, row, index
	For Iterator = 1 To rowcount Step 1
		row = DataTable.GetCurrentRow
		index = Iterator + 1
		actual = Trim(Browser("NGQ").Page("Pricing and Terms").WebElement("xpath:=//div[contains(concat(' ',@class,' '),' ngCell ') and contains(concat(' ',@class,' '),' colt34 ')]").UpdateIndex(Iterator).InnerText)
		If actual = DataTable("Pricing_Source") Then
			Reporter.ReportEvent micPass, "Verify Pricing_Source", "Verified Correct Pricing_Source"
		else
			Reporter.ReportEvent micFail, "Verify Pricing_Source", "Incorrect Pricing_Source " & actual & " returned"
		End If
		row = DataTable.SetNextRow
	Next
End Sub

Sub Utils_scrollToBottom_lineItemAddColumn()
	Browser("NGQ").Page("Quote").Link("Upload Product").Object.scrollIntoView
End Sub

Sub Utils_scrollRight_lineItemTableColumn()
	dim myElement : Set myElement = Description.Create
	myElement("micclass").value = "WebElement"
	myElement("class").Value = "col"
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("LineItemDetailTableHeader").ChildObjects(myElement).Count
End Sub

Sub requestOPDisc_MCC(strMCCDisc)
	Browser("NGQ").Page("Pricing and Terms").WebList("ReqOpDiscMCC").Select strMCCDisc
End Sub

Sub requestOPDisc_OffApp(boolapproval)
	If boolapproval Then
		Browser("NGQ").Page("Pricing and Terms").WebElement("ReqOpDiscOffAppTrue").Click
	else
		'Browser("NGQ").Page("Pricing and Terms").WebElement("ReqOpDiscOffAppFalse").Click
		'Javascript hack because UFT is unable to click the No radio button, it will always click Yes.
		Browser("NGQ").Page("Pricing and Terms").RunScript "document.getElementsByName('mccCode72')[1].click()"
	End If
End Sub

Sub requestOPDisc_discType(strDiscType)
	Browser("NGQ").Page("Pricing and Terms").WebList("ReqOpDiscType").Select strDiscType
End Sub

Sub requestOPDisc_valueType(strValueType)
	Browser("NGQ").Page("Pricing and Terms").WebList("ReqOpDiscValueType").Select strValueType
End Sub

Sub RequestOPDisc_percentage(strPercentage)
	Browser("NGQ").Page("Pricing and Terms").WebList("ReqOpDiscPercent").Select strPercentage
End Sub

Sub RequestOPDisc_amount(strAmount)
	Browser("NGQ").Page("Pricing and Terms").WebEdit("ReqOpDiscAmt").Set strAmount
End Sub

Sub RequestOPDisc_Submit()
	Browser("NGQ").Page("Pricing and Terms").WebElement("ReqOpDiscSubmit").Click
End Sub

Sub RequestOPDisc(strMCCType, boolAppType, strDiscType, strValueType, strPercentage, strAmount, strMCCNum)
	Utils_scrollToBottom_lineItemAddColumn
	requestOPDisc_MCC strMCCType
	requestOPDisc_OffApp boolAppType
	requestOPDisc_discType strDiscType
	requestOPDisc_valueType strValueType
	RequestOPDisc_percentage strPercentage
	RequestOPDisc_amount strAmount
	RequestOPDisc_Submit
	MCC_success_message strMCCNum
End Sub

Sub MCC_success_message(strMCCNum)
	if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "Mcc " & strMCCNum & " added. This removed all other mccs from line items. Please request special price." then
		Reporter.ReportEvent micPass, "Save Operator Discount Request","Operator Discount Request Successfully Saved"
	else
		Reporter.ReportEvent micFail, "Save Operator Discount Request","Operator Discount Request didn't save"
	End if
End Sub

Function get_grand_total()
	get_grand_total = Browser("NGQ").Page("Quote").WebElement("GrandTotal").GetROProperty("innertext")
End Function

'=========ROSALES Start
'========================
'Start US9430_01================================================= Alejandro Rosales
'Set Opportunity Id in QUICK SEARCH 
sub SetOpportunityId(strOpportunityId)
	Browser("NGQ").Page("Home").WebEdit("Quick OpportunityId").Set strOpportunityId
End sub

Sub ClickNavbarAdvancedSearch()
	Browser("NGQ").Page("Home").WebElement("Navbar_AdvancedSearch").Click
End Sub

'validate the Opportunity Id in advanced Search 
sub Validate_OpportunityId_AdvancedSearch(strOpportunityId)
MoveScrollBarToRight()
wait(2)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("validate Opportunity Id").Exist Then
		Dim strValidateOpportunityId : strValidateOpportunityId = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("validate Opportunity Id").GetROProperty("innertext")
			If strValidateOpportunityId = strOpportunityId Then
				Reporter.ReportEvent micPass, "Validate Opportunity Id","Opportunity ID(s) exist in the table"		
			Else
				Reporter.ReportEvent micFail, "Validate Opportunity Id","Opportunity ID(s) not exist in the table"	
			End If
	End If	
MoveScrollBarToLeft()	
End sub

'Click the reset button in Advanced Search
sub ClickResetButton_advancedSearch()
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("ResetButton").Click
End sub

'Click SearchButton in Advanced mode 
sub ClickSearchButton_advancedSearch()

	Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("SearchButton").Click
End sub

'Function to fill Quote Number 
sub QuoteNumber_AdvancedSearch(quoeteNumber)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Quote Number").Set quoeteNumber
End sub

'Function that verify the Quote Number
sub Validate_QuoteNumer_AdvancedSearch(quoteNumber)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Quote Number").Exist Then
	Dim strValidateQuoteNumber : strValidateQuoteNumber = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Quote Number").GetROProperty("innertext")
		If strValidateQuoteNumber = quoteNumber Then
			Reporter.ReportEvent micPass, "Validate Quote Number","Quote(s) Number Exist in the table"				
		Else
			Reporter.ReportEvent micFail, "Validate Quote Number","Quote(s) Number not Exist in the table"	
		End if
	End If
End sub

'funtion that fill the MDCP ID 
sub MDCPIdAdvancedSearch(mdcpId)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("MDCP Id").Set mdcpId
End sub

'Make a Clean Cache Refresh
sub RefreshPage()
	Dim objKey
	set objKey = CreateObject("WScript.Shell")
	Browser("Home#/selfservicequote/createq").WinObject("Client Caption").Click
	objKey.SendKeys "^(r)"
End sub

'Function that verify the MDCP ORG ID -Done
sub ValidateMDCPIAdvancedSearch(MdcpId)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate MDCP Id").Exist Then
		Dim strValidateMdcpId :	strValidateMdcpId = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate MDCP Id").GetROProperty("innertext")
			If strValidateMdcpId = MdcpId Then
				Reporter.ReportEvent micPass, "Validate MDCP ID","MDCP ID(s) exist in the table"				
		    Else
			    Reporter.ReportEvent micFail, "Validate MDCP ID","MDCP ID(s) not exist in the table"	
			End If
	End If
End sub

'funtion that fill company name / account name 
sub CompanyNameAccountName(CompanyName)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Account Name").Set CompanyName
End sub

'Function that verify the company name  / accont name
sub ValidateCompanyName(CompanyName)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Company Name").Exist Then
	Dim strValidateCompanyName : strValidateCompanyName = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Company Name").GetROProperty("innertext")
	Dim result : result = 	StrComp(CompanyName,strValidateCompanyName,1)
		If result = 0 Then
			Reporter.ReportEvent micPass, "Valide Account Name","Account Name(s) Exist"				
		Else
			Reporter.ReportEvent micFail, "Valide Account Name","Account not Name(s) Exist"
		End If	
	End If
End sub

'functon that fill email in advanced search
sub LastModifedEmail(email)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Last Edited by(Email)").Set email
End sub

'Function that verify the Email
sub ValidateLasModifedEmail(email)
	MoveScrollBarToRight()
	wait(2)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Email").Exist Then
	Dim strValidateEmail : strValidateEmail = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Email").GetROProperty("innertext")
		If strValidateEmail = email Then
			Reporter.ReportEvent micPass, "Validate Last Modified Email","Email Exist"				
		Else
			Reporter.ReportEvent micFail, "Validate Last Modified Email","Email Not Exist"				
		End If	
	End If	
	MoveScrollBarToLeft()
End sub

'function to set  the start date
sub SetStartDate(strStartDate)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("StartDate").Set strStartDate
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("StartDate").Click
	EnterKey
End sub

'funtion to set the end date
sub SetEndDate(strEndDate)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("EndDate").Set strEndDate
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("EndDate").Click
	EnterKey
End sub

'click in a result from the date search
sub ClickQuoteNumberResult()
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Click Date Result").Click
End sub

'funtion to validate the range of the date NEED FIX!!!
sub ValidateDateRange(StartDate,EndDate)
	Dim NGQEndDate : NGQEndDate = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("ValidateEndDate").GetROProperty("innertext")
	Dim NGQStartDate : NGQStartDate = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate StarDate").GetROProperty("innertext")
	NGQEndDate = FormatDateTime(NGQEndDate,0)
	NGQStartDate = FormatDateTime(NGQStartDate,0)
	StartDate = FormatDateTime(StartDate,0)
	EndDate =  FormatDateTime(EndDate,0)
	dim StartToStart : StartToStart = DateDiff("d",StartDate,NGQStartDate)
	Dim StartToEnd : StartToEnd = DateDiff("d",StartDate,NGQEndDate)
	Dim EndToStart : EndToStart =  DateDiff("d",EndDate,NGQStartDate)
	Dim EndToEnd : EndToEnd = DateDiff("d",EndDate,NGQEndDate)
		If ( (StartToStart>=0) and (StartToEnd>0) ) Then	
			If ( (EndToEnd<=0) and (EndToStart<0) )  Then
				Reporter.ReportEvent micPass, "Validate Date Range","The object is between date range"
			Else 

				Reporter.ReportEvent micFail, "Validate Date Range","The object is not between date range"	
			End If
		End If
End sub
			'End US9430_01================================================= Alejandro Rosales
			'Start US9430_02================================================= Alejandro Rosales
'go to my dashboard
sub ClickMyDashboard()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Click Navbar My Dashboard").Click
End sub
'validate if the quote tab is active/selected
sub ValidateQuoteTab()
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Quote Tab").Exist Then
			Reporter.ReportEvent micPass, "Validate Quote Tab","The quote tab is selected"		
	Else 
			Reporter.ReportEvent micFail, "Validate Quote Tab","The quote tab is Not selected"		
	End If
End sub

'click the button auto filter
sub ClickAutoFilter()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("BtnAutoFilter").Click
End sub

'enter and submit thequote number
sub FillFilterQuoteNumber(quoteNumber)
	Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").Set quoteNumber
	Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").Click 
	EnterKey()
	wait(10)
End sub

		'validate if the colums 'Last Modify by' 'Las modified Ts' and 'Owner History' are active
sub ValidateLastModifyBy_TS_and_OwnerHistory()
		'Click to deploy the table of showing colums
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Colums Button").Click
	'Validate if Last Modify by is active
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Last Modify by").Exist Then
		Reporter.ReportEvent micPass, "Validate Last Modiy By","Last Modify By is active"
	Else 	
		Reporter.ReportEvent micFail, "Validate Last Modiy By","Last Modify By is noT active"
	End If
	
	'Validate if Last Modify Ts is active
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Last Modifued Ts").Exist Then
		Reporter.ReportEvent micPass, "Validate Last Modify Ts","Last Modify Ts is active"
	Else 	
		Reporter.ReportEvent micFail, "Validate Last Modify Ts","Last Modify Ts is not active"
	End If
	'Validate if Owner History is active
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Owner History").Exist Then
		Reporter.ReportEvent micPass, "Validate Owner History","Owner History is active"
	Else 	
		Reporter.ReportEvent micFail, "Validate Owner History","Owner History is not active"
	End If
End sub

'validate if the colums 'Last Modify by' 'Las modified Ts' and 'Owner History' are has a value different from null
sub ValidateFieldsByTsOwner()
	'Validate if Last Modify by is has a Value
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValueLastModifiedBy").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Value of Last Modiy By","Last Modify By has a Value"
	Else 	
		Reporter.ReportEvent micFail, "Value Last Modiy By","Last Modify By is Empty"
	End If
	'Validate if Last Modify TS is has a Value
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValueLastModifiedTs").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Value of Last Modiy Ts","Last Modify TS has a Value"
	Else 	
		Reporter.ReportEvent micFail, "Value Last Modiy Ts","Last Modify Ts is Empty"
	End If
	'Validate if Owner History is has a Value
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValueOwnerHistory").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Value of Owner History","Owner History has a Value"
	Else 	
		Reporter.ReportEvent micFail, "Value Owner History","Owner History Ts is Empty"
	End If
End sub

'click in the owner history link
sub ClickOwnerHistory
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValueOwnerHistory").Click
End sub

		'validate table in owner history link
sub ValidateOwnerHistoryTable
		'Validate if Document Type column exist
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateDocumentType").GetROProperty("innertext") <> "" Then

		Reporter.ReportEvent micPass, "Column Document Type","Document Type Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Document Type","Document Type Not Column Exist"
	End If
	'Validate if Operation Type column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateOperationType").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Operation Type","Operation Type Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Operation Type","Operation Type Not Column Exist"
	End If
	'Validate if Transaction By column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateTransaction By").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Transaction By ","Transaction By Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Transaction By ","Transaction By Not Column Exist"

	End If
	'Validate if Transaction Description column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateTransactionDescription").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Transaction Description ","Transaction Description Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Transaction Description ","Transaction Description Not Column Exist"
	End If
	'Validate if Transaction Time column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateTransactionTime").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Transaction Time ","Transaction Time Column Exist"


	Else 	
		Reporter.ReportEvent micFail, "Column Transaction Time ","Transaction Time Not Column Exist"

	End If
	'Validate if Transaction Result column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateTrasactionResult").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Transaction Result ","Transaction Result Column Exist"

	Else 	
		Reporter.ReportEvent micFail, "Column Transaction Result ","Transaction ResultNot Column Exist"
	End If
End sub

'Click quote number
sub ClickQuoteNumber()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ClickQuoteNumber").Click
End sub

'click the Log History Button
sub ClickLogHistoryButton()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ClickLogHistoryBtn").Click
End sub

sub ValidateLogHistory()
'Validate information in Quote Information Tab
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Last Modifed Time").Exist Then
		Reporter.ReportEvent micPass, "Column Last Modified Time","Last Modified Time Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Last Modified Time ","Last Modified Time Not Column Exist"
	End If
	
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Modified By").Exist Then
		Reporter.ReportEvent micPass, "Column Modified By","Modified By Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Modified By","Modified By Not Column Exist"
	End If
	'Change to tab Line Item
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Line Item Btn").Click

'Validate information in Line ItemcTab
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Last Modifed Time").Exist Then


		Reporter.ReportEvent micPass, "Column Last Modified Time","Last Modified Time Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Last Modified Time ","Last Modified Time Not Column Exist"
	End If
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Modified By").Exist Then


		Reporter.ReportEvent micPass, "Column Modified By","Modified By Column Exist"

	Else 	
		Reporter.ReportEvent micFail, "Column Modified By","Modified By Not Column Exist"
	End If
'close log history
Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Close Log History Btn").Click
End sub

'Scroll SideBar to validate fields
sub MoveScrollBarToRight()
	Dim Iterator : Iterator = 0
	'Double click in a object to waranty the side scrolling
	
	'Asure move the side bar to the right
	For Iterator = 1 To 7 Step 1
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Scroll Bar").DoubleClick
		ToRight()
	Next
End sub

sub MoveScrollBarToLeft()
	Dim Iterator : Iterator = 0
	'Double click in a object to waranty the side scrolling
	
	'Asure move the side bar to the right
	For Iterator = 1 To 7 Step 1
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Scroll Bar").DoubleClick
		ToLeft()
	Next
End sub

'submit enter key
Function EnterKey()
	Dim objKey
	set objKey = CreateObject("WScript.Shell")
	objKey.SendKeys "{ENTER}"
End Function

'Function that submit the right arrow  -Usefully for horizontal sidebar -
sub ToRight()
	Dim objKey
	set objKey = CreateObject("WScript.Shell")
	objKey.SendKeys "{RIGHT}"
End sub

sub ToLeft()
	Dim objKey
	set objKey = CreateObject("WScript.Shell")
	objKey.SendKeys "{LEFT}"
End sub
		'End US9430_02================================================= Alejandro Rosales


		'Start US9430_03================================================= Alejandro Rosales	
	'Go to		
sub ClickMyGroupQuoteTab
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("My Group Quote Tab").Click
End sub

sub ClickMyGroupStatusCount()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("MyGroupStatus Count").Click
End sub

sub Click_Clone()
	  Browser("NGQ").Page("Navbar - New Quote").WebElement("Quote_Clone").Click
End sub 

'save quote
sub Quote_save()
	Browser("NGQ").Page("Quote").WebElement("SaveButton").Click
    if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "Successfully Saved Quote!" then
        Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
    else
        Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
    End if
End sub

					'End US9430_03================================================= Alejandro Rosales
					
					'Start US9430_04================================================= Alejandro Rosales
				
	'Validate if the quote number submited is the same that the table shows
sub ValidateQuoteNumberValue(QuoteNumber)
	wait(3)
	dim strtempNumber : strtempNumber = Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ClickQuoteNumber").GetROProperty("innertext")
		
	If QuoteNumber = strtempNumber Then
		Reporter.ReportEvent micPass, "Quote Number Value","Value in tab Match with submited"
		
	Else 	
		Reporter.ReportEvent micFail, "Quote Number Value","Value in tab Not Match with submited"	

	End If
End sub

				'End US9430_04================================================= Alejandro Rosales
				'Start US9597_03================================================= Alejandro Rosales
						
'Function to go to My preferences in Admin Tools tab
Sub ClickAdminTools_MyPreferences()
	Browser("NGQ").Page("Navbar-AdminTools").WebElement("My Preferences tab").Click
End Sub

	'function to set choose view name
Sub EditChooseView(strViewName)
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebEdit("Choose View").Set strViewName
End Sub

	'Function to choose a whatever value you send from AvailableColumn/ also send it to assigned column
Sub AvailableColumn(strLabel)
	If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Available Column List").Exist Then
		Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Available Column List").Select strLabel
		MoveToRight()
	End If
End Sub

	'Function to choose a whatever value you send from Assigned Colum List/ also send it to Available column
Sub AssignedColumn(strLabel)
	If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Exist then 
		Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Select strLabel
		MoveToLeft()
	End If
End Sub

	'Select the assigned value inthe assigned column to move up one place by click the up button
Sub MoveUpAssignedLabel(strLabel)
	If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Exist Then
		Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Select strLabel
		MoveUp()
	End If
End Sub

	'Select the assigned value inthe assigned column to move down one place by click the down button
Sub MoveDownAssigendLAbel(strLabel)
	If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Exist Then
		Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Select strLabel
		MoveDown()
	End If
End Sub

	'Click the "Set as default" checkbox
Sub CheckSetAsDefault()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebCheckBox("Set as default").Click
End Sub

	'Click the save button in "My preferences" in Admin Tools navbar
Sub ClickSaveBtnMyPrecerences()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Save btn").Click
End Sub
 
 	'Save all the items of assigned column in an array to compare
Function NoteDownAssignedColumn()
	Dim ListSize : ListSize = Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").GetROProperty("items count")

'	Dim ListSize : ListSize = AssignedColumnItems()
	Dim count
	Dim LabelsArray()
	ReDim LabelsArray(ListSize)
	
		For count = 1 To ListSize Step 1
			LabelsArray(count) = Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").GetItem(count)
			'MsgBox LabelsArray(count)
		Next
		
	NoteDownAssignedColumn = LabelsArray
End Function

	'Validate if the dafault Choose view in "New Quote" is the one you set in My preferences / Admin tools
Sub ValidateChooseView(strChooseView)
	Dim strValidate
	strValidate = Browser("NGQ").Page("Navbar - New Quote").WebList("ChooseView").GetROProperty("selection")

	If strValidate = strChooseView Then
		Reporter.ReportEvent micPass, "Choose View","Value selected match"
	Else 
		Reporter.ReportEvent micFail, "Choose View","Value selected Doesn't Match"
	End If
End Sub

	'Validate if all columns in the choose view's table are the same that created in assigned column array
Sub ValidateAssignedList_NewQuote(listArray())

	Dim intListSize : intListSize = UBound(listArray)
	Dim iterator 
	For Iterator = 1 To intListSize Step 1
		If Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//div[@ng-click='col.sort($event)' and text()='"+listArray(Iterator)+"']").Exist Then
	    	Reporter.ReportEvent micPass, "Templete Table", listArray(Iterator)+" Value Exist"
	    Else 
	    	Reporter.ReportEvent micFail, "Templete Table", listArray(Iterator)+" Value Doesn't Exist"
     	End If
	Next
End Sub
	'Click delete button for choose view
 Sub ClickDeleteBtnChooseView()
 	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Delete Choose view btn").Click
 	EnterKey()
 End Sub

'Import the data from the exell sheet to a local array
Function ExellToArray()
    Dim Iterator
	Dim strColumnLabel()
	Dim count : count = DataTable.GetSheet(1).GetRowCount	
	ReDim strColumnLabel(count)
		For Iterator = 1 To count Step 1
			DataTable.SetCurrentRow(Iterator)
			strColumnLabel(Iterator) = DataTable("strColumnLabel",1)
		Next
	DataTable.SetCurrentRow(1)
	ExellToArray=strColumnLabel
End Function
	'Send from Available Column to Assigned Column
Sub MoveToRight()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Move to Right").Click
End Sub
	'Send from Assigned Column to Available Column
Sub MoveToLeft()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Move to Left").Click
End Sub
	'click the move up btn for choose view
Sub MoveUp()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Move up").Click
End Sub
	'click the down up btn for choose view
Sub MoveDown
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Move Down").Click
End Sub 
			'End US9597_03================================================= Alejandro Rosales
		
			'Start US9597_06================================================= Alejandro Rosales
Sub ClickAddConfigOcs()
	Browser("NGQ").Page("Navbar - New Quote").WebElement("Addbtn").HoverTap()
	Browser("NGQ").Page("Navbar - New Quote").WebElement("ConfigOsc").Click
End Sub	

Sub ClickRefreshPricing()
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
End Sub

Sub ClickPricingTermsTab()
	Browser("NGQ").Page("Quote").WebElement("PricingTermsTab").Click
End Sub
'End US9597_06================================================= Alejandro Rosales


'=====================================================================
'LV Add
'======================================================================
sub Quote_AddBundle()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
    Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
    Browser("NGQ").Page("Quote").Link("Add Bundle").Click
    
end sub


sub Quote_PopulateBundle(strBundleProductNumber, intQuantity)
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""thresholdLocation""]/DIV[2]/DIV[2]/DIV[1]/DIV[1]/DIV[1]/DIV[7]/DIV[2]/SPAN[1]/SPAN[1]/INPUT[1]").Click	                                                                                               
    Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//DIV[@id=""thresholdLocation""]/DIV[2]/DIV[2]/DIV[1]/DIV[1]/DIV[1]/DIV[7]/DIV[2]/SPAN[1]/SPAN[1]/INPUT[1]","index:=0").Set strBundleProductNumber
    
    'Hide the click if successful. 
 	Dim intOriginalFilter : intOriginalFilter = Logger.SetReporterFilter(rfEnableErrorsOnly) 
 	Browser("NGQ").Page("Footer").WebElement("Grand Total Label").Click 
 	Logger.SetReporterFilter intOriginalFilter
end Sub


sub Quote_PopulateProduct(strPopulateStandaloneProduct, intQuantity)
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""thresholdLocation""]/DIV[2]/DIV[2]/DIV[1]/DIV[1]/DIV[1]/DIV[7]/DIV[2]/SPAN[1]/SPAN[1]/INPUT[1]").Click	                                                                                               
    Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//DIV[@id=""thresholdLocation""]/DIV[2]/DIV[2]/DIV[1]/DIV[1]/DIV[1]/DIV[7]/DIV[2]/SPAN[1]/SPAN[1]/INPUT[1]","index:=0").Set strPopulateStandaloneProduct
    
    'Hide the click if successful. 
 	Dim intOriginalFilter : intOriginalFilter = Logger.SetReporterFilter(rfEnableErrorsOnly) 
 	Browser("NGQ").Page("Footer").WebElement("Grand Total Label").Click 
 	Logger.SetReporterFilter intOriginalFilter
end Sub

sub Quote_CustomerDatatab()
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SECTION[@id=""customerDataSection""]/EXPANDCOLLAPSE[1]/DIV[1]/DIV[1]/SPAN[2]").Click
end Sub

sub Quote_ShiptoTab()
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""shipToCustomerTab""]").Click
end Sub

sub Quote_ShiptoAddress()
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""shiptongq""]/DIV[1]/INPUT[1]").Click
end Sub
	
sub Quote_Shipdata()
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""SHP_DATA""]").Click
end Sub

Sub Quote_DeliverySpeed(strDeliverySpeed)
	Browser("name:=Home.*").Page("title:=Home.*").WebList("xpath:=//DIV[@id=""border_line""]/DIV[4]/DIV[1]/DIV[1]/DIV[1]/LABEL[1]/SELECT[1]").Click
    Browser("name:=Home.*").Page("title:=Home.*").WebList("xpath:=//DIV[@id=""border_line""]/DIV[4]/DIV[1]/DIV[1]/DIV[1]/LABEL[1]/SELECT[1]").Select strDeliverySpeed
End Sub

Sub Quote_TermsofDelivery(strTermsOfDelivery)
	Browser("name:=Home.*").Page("title:=Home.*").WebList("xpath:=//DIV[@id=""border_line""]/DIV[4]/DIV[1]/DIV[2]/DIV[1]/LABEL[1]/SELECT[1]").Click
    Browser("name:=Home.*").Page("title:=Home.*").WebList("xpath:=//DIV[@id=""border_line""]/DIV[4]/DIV[1]/DIV[2]/DIV[1]/LABEL[1]/SELECT[1]").Select strTermsOfDelivery
End Sub

Sub Quote_AdditionalDataTab()
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""ADDL_DATA""]").Click
End Sub

Sub Quote_RefreshPricng()
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
	if Browser("NGQ").Page("Quote").WebElement("RefreshPricingMessage").GetROProperty("innertext") = "Refresh Pricing completed" then
		Reporter.ReportEvent micPass, "Refresh Pricing", "Successfully Refreshed Pricing for this Quote"
	else
		Reporter.ReportEvent micFail, "Refresh Pricing","Failed to Refresh Pricing for this Quote"
	End if
End Sub

Sub Quote_ClickFooter()
	Dim intOriginalFilter : intOriginalFilter = Logger.SetReporterFilter(rfEnableErrorsOnly) 
 	Browser("NGQ").Page("Footer").WebElement("Grand Total Label").Click 
 	Logger.SetReporterFilter intOriginalFilter
End Sub


'Sub Quote_PricingTerms()
'	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""PRCNG_TERMS""]").Click
'End Sub


Sub Quote_PricingBand()
	
	If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").Exist Then
			If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").GetROProperty("visible") Then 
				Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands exist"
			else
				Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands failed to load"
			End If	
	else
			Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands failed to load"
	End If
	'verify_price_quality_band	
		
End Sub

Sub Quote_SaveButton()
	'save quote
	'The Quote_save and Savebutton were both in object repo. Savebutton was retained in repo as they both had same xpath. Only one has to be retained.
	'Browser("NGQ").Page("Quote").WebElement("Quote_Save").Click
	Browser("NGQ").Page("Quote").WebElement("SaveButton").Click
	if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "Successfully Saved Quote!" then
		Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
	else
		Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
	End if
End Sub

Sub Quote_DealId()
	Dim strDealId 
	
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealId").Exist Then
		
		strDealId = Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealId").GetROProperty("innertext")
		if  strDealId <>  "" Then
			Reporter.ReportEvent micPass, "Products under bundle with valid Deal Id","Products under T bundles have Deal Id displayed"
		else
			Reporter.ReportEvent micFail, "Products under bundle with valid Deal Id","Products under T bundles have Deal Id is Empty"
		End if	
	else
		Reporter.ReportEvent micWarning, "Products under bundle with valid Deal Id Display Check","Products under T bundles have Deal Id is Not displayed"
	End if	
End Sub

sub LineItemDetails_AddProductOrOption(strProductNumber, strQuantity) 
 	Quote_AddProductOption 
 	Quote_PopulateProduct strProductNumber, strQuantity
end sub 

sub LineItemDetails_AddBundleProduct(strProductNumber, strQuantity)
	Quote_AddBundle
	Quote_PopulateBundle strProductNumber, strQuantity
end sub 
 
sub LineItemDetails_SetProductNumber(strValue) 
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Set strValue 
end sub  
 
 sub LineItemDetails_SetQuantity(intQuantity) 
 	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductQty").Set intQuantity 
 end sub 
 '================================================== 
 ' END Quote - LineItemDetails 
 '================================================== 
 
Sub Quote_SearchProduct()
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""tableDIV""]/DIV[1]/DIV[1]/DIV[2]/DIV[1]/UL[5]/LI[1]/A[1]").MouseOver
	Browser("name:=Home.*").Page("title:=Home.*").Link("xpath:=//DIV[@id=""tableDIV""]/DIV[1]/DIV[1]/DIV[2]/DIV[1]/UL[5]/LI[1]/UL[1]/LI[5]/A[1]").Click	
End Sub

Sub Quote_SelectBundle()		
	Browser("NGQ").Page("Quote").Link("Search Product(s)").Click
	Browser("NGQ").Page("Quote - Search Product").WebRadioGroup("ProductSearchType").Select "Bundle"
End Sub

Sub Quote_Button()
	Browser("NGQ").Page("Search").WebRadioGroup("Product Bundle").Select "#2" 
End Sub

sub Quote_AddProductOption()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	Browser("NGQ").Page("Quote").Link("Add Product or Option").Click
End sub

Sub Quote_CaptureDealId()
	Dim strDealId 
	
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealId").Exist Then
	
	    strDealId = Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealId").GetROProperty("innertext")
		Datatable.GetSheet ("Global").AddParameter "DealId_Output", strDealId
	else
		Reporter.ReportEvent micWarning, "Products under bundle with valid Deal Id Display Check","Products under T bundles have Deal Id is Not displayed"
	End if
End Sub

Sub Quote_BundleIdCheck()
 Dim strBundleId
 Dim strxPath
 strxPath = "xpath:=//DIV[@id=""thresholdLocation""]/DIV[2]/DIV[2]/DIV[1]/DIV[1]/DIV[1]/DIV[7]/DIV[2]/DIV[1]/SPAN[1]"
 If Browser("name:=Home.*").Page("title:=Home.*").WebElement(strxPath).Exist Then
 
      strBundleId = Browser("name:=Home.*").Page("title:=Home.*").WebElement(strxPath).GetROProperty("innertext")
      if  strBundleId <>  "" Then
		Reporter.ReportEvent micPass, "Valid Bundle Id","Bundle ID displayed"
	else
		Reporter.ReportEvent micFail, "Bundle Id empty","Bundle ID cannot be Empty"
	End if
else
	Reporter.ReportEvent micWarning, "Bundle Id Display Check","Bundle ID not displayed, Please contact SA"
End if

End Sub

Sub Quote_AddBundleToQuote( strBundleId )
  Browser("NGQ").Page("Quote - Search Product").WebEdit("FindByBundleID").Click
  Browser("NGQ").Page("Quote - Search Product").WebEdit("FindByBundleID").Set strBundleId
  Browser("NGQ").Page("Quote - Search Product").WebElement("Bundle Search").Click
  Browser("NGQ").Page("Quote - Search Product").WebRadioGroup("SelectedBundle").Select strBundleId
  Browser("NGQ").Page("Quote - Search Product").WebElement("AddBundleToQuote").Click
End Sub

Sub Quote_QtyUpdate(intIndex, intBundleQty)
	'refactored by JH
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("editLineItem").Click
	intIndex = intIndex + 1
	Dim dynCol : dynCol = getProductTableColumn("QuantityHeader")
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//input)[1]"
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit(xpath).Set intBundleQty
	'bad xpath poi T_T;
    'Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//DIV[@id=""thresholdLocation""]/DIV[2]/DIV[2]/DIV[1]/DIV[1]/DIV[1]/DIV[9]/DIV[2]/SPAN[1]/INPUT[1]").Set intBundleQty
End Sub

Sub Quote_OutputTab()
	Browser("NGQ").Page("Quote").WebElement("QuoteOutputTab").Click
    Browser("name:=Home.*").Page("title:=Home.*").WebList("xpath:=//SELECT[@id=""optypeselect""]","index:=0").Select "Extended Net Price by item with estimated delivery"
    
End Sub

Sub Quote_PreviewButton()
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""previewBtn""]").Click
End Sub

Sub Quote_SaveFromDownloadBar()
	Browser("Home#/selfservicequote/createquote/").WinObject("Notification").WinButton("WinButton").Click
    Browser("Home#/selfservicequote/createquote/").WinObject("Notification").WinButton("Save").Click
End Sub

Sub Quote_PreProcessDownload(strDownloadDir,strSearchFileName)
	Dim fso
	
	'Save writes to a file with quote number
  	strSearchFileName = Datatable.GetSheet ("Global").GetParameter("QuoteNumber_Output").Value
  	
  	Set fso = CreateObject("Scripting.FileSystemObject") 
	
	If fso.FileExists(strDownloadDir + strSearchFileName + ".pdf") Then
		fso.DeleteFile strDownloadDir + strSearchFileName + ".pdf"
  	End If
  		
End Sub



Sub Quote_ProcessDownload(strDownloadDir,strSearchFileName)
	Dim fso
	
	'Save writes to a file with quote number
  	strSearchFileName = Datatable.GetSheet ("Global").GetParameter("QuoteNumber_Output").Value
  	
  	Set fso = CreateObject("Scripting.FileSystemObject") 
	
	fso.CopyFile strDownloadDir + strSearchFileName + ".pdf" , Environment.Value("ResultDir") + "\" + strSearchFileName + ".pdf", True
  	  	
  	If fso.FileExists(strDownloadDir + strSearchFileName + ".pdf") Then
		fso.DeleteFile strDownloadDir + strSearchFileName + ".pdf"
  	End If
  	Browser("Home#/selfservicequote/createquote/").WinObject("Notification").WinButton("Close").Click
End Sub

Sub Quote_FileContentPriceCheck
	FileContent("To be assigned.pdf").Check CheckPoint("To be assigned.pdf")
End Sub



sub Quote_SelectIncludeCoverPage()
	Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("IncludeCoverPage").CheckBox
end sub

sub Quote_DeSelectIncludeCoverPage()
	Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("IncludeCoverPage").UnCheckBox
end sub

sub Quote_SelectCustomGroupView()
	Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("CustomGroupView").CheckBox
end sub

sub Quote_DeSelectCustomGroupView()
	Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("CustomGroupView").UnCheckBox
end sub

' Verifies that the Price Quality Band Table is not shown
Sub Quote_CheckPricingBandNotDisplayed()	
	If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").Exist Then
			If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").GetROProperty("visible") Then 
				Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Band exist, Check Failed"
			else
				Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Band is Not Displayed - Validation Passed"
			End If	
	else
			Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Band is Not Displayed - Validation Passed"
	End If
	'verify_price_quality_band			
End Sub

' Finds the quote id and adds it to datasheet
Sub Quote_CaptureQuoteNumber()
	Dim quoteID : quoteID = Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext") 
	Datatable.GetSheet ("Global").AddParameter "QuoteNumber_Output", quoteID
End Sub


'=====================================================================
'LV End
'=====================================================================

'=====================================================================
'PRE VALIDATE START
'=====================================================================
Sub select_preValidate_link()
	Browser("NGQ").Page("Quote").WebElement("ExtraMenuButton").Click
	Browser("NGQ").Page("Quote").WebElement("PreValidateDropdownSelect").Click
End Sub

Sub PreValidateQuote()
	Browser("NGQ").Page("PreValidate").WebElement("CLICButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("PriceButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("BundleButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("CompleteQuoteButton").Click
End Sub

Sub PreValidateQuoteOverwrite()
	Browser("NGQ").Page("PreValidate").WebElement("CLICButton").Click
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=(//span[contains(text(), 'Override Reason:')])[1]/preceding-sibling::textarea").Set "automation"
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=(//i[@id='checkFanNrBtn'])[1]").Click 
	Browser("NGQ").Page("PreValidate").WebElement("PriceButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("BundleButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("CompleteQuoteButton").Click
End Sub
Sub PreValidateQuote_success()
    Dim regEx, Match, Matches   ' Create variable.
    Set regEx = New RegExp   ' Create a regular expression.
    regEx.Pattern = "Deal \d{9}, Version 1 successfully created.QUOTE SUCESSFULLY UPDATED INTO IDS DB"  ' Set pattern.
    regEx.IgnoreCase = True   ' Set case insensitivity.
    regEx.Global = True   ' Set global applicability.
	If regEx.Test(Browser("NGQ").Page("PreValidate").WebElement("QuoteValidatedResult").GetROProperty("innertext")) Then
		Reporter.ReportEvent micPass, "Verify Quote Successfully Validated","Quote Successfully Saved/Validated"
	else
		Reporter.ReportEvent micFail, "Verify Quote Successfully Validated","Quote did not Save/Validate"
	End if
End Sub
'=====================================================================
'PRE VALIDATE END
'=====================================================================
'====================================
' Author: Reese Childers
' Purpose: Functions for refreshing prices,
' interacting with product select.
'====================================

' Clicks the line item search option for search product
Sub click_lineitem_add_product_search()
	'browser("NGQ").Page("Quote - Line Item Details").WebElement("addButton").Click
	browser("NGQ").Page("Quote - Line Item Details").WebElement("SearchProduct").Click
End Sub

' Clicks the product list button in new configuration
Sub select_product()
	browser("NGQ").Page("New Configuration").WebElement("ProductList").Click
End Sub

' Clicks the save button on the new quote screen
Sub click_save_button()
	browser("NGQ").Page("Quote").WebElement("SaveButton").Click
	
	if browser("NGQ").Page("Quote").WebElement("SuccessMessage").GetROProperty("innertext") = "Successfully Saved Quote!" then
        Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
    else
        Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
    End if
End Sub

'Sets the product number and searches ( can only search one product )
Sub set_product_number(strNum)
	browser("NGQ").Page("Quote - Search Product").WebEdit("ProductNumber").Set strNum
	browser("NGQ").Page("Quote - Search Product").WebElement("ProductSearch").Click
End Sub

' Sets the quantity for the first item to 1
Sub set_quantity()
	browser("NGQ").Page("Quote - Search Product").WebEdit("ChangeQuantity").Set "1"
	browser("NGQ").Page("Quote - Search Product").WebElement("addToCart").Click
End Sub

' Clicks the add to quote button
Sub add_to_quote()
	browser("NGQ").Page("Quote - Search Product").WebElement("addToQuote").Click
End Sub

' Validates quote was successfully saved
Sub validate_products_added_to_quote()
	if browser("NGQ").Page("Quote").WebElement("SuccessMessage").GetROProperty("innertext") = "Products added." then
        Reporter.ReportEvent micPass, "Quote Add","Product Successfully Added to Quote"
    else
        Reporter.ReportEvent micFail, "Quote Add","Products Were Not Added"
    End if	
End Sub

' Clicks the refresh pricing button
Sub click_refresh_pricing()
	browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
	
	if browser("NGQ").Page("Quote").WebElement("InfoMessage").GetROProperty("innertext") = "Refresh Pricing completed More" then
        Reporter.ReportEvent micPass, "Refresh Pricing Pass","Pricing Successfully Refreshed"
    else
        Reporter.ReportEvent micFail, "Refresh Pricing Fail","Pricing Refresh Failed"
    End if
End Sub


Sub validate_product_number_line_item(strName)
	Dim goodPath : goodPath = "xpath:=(//span[contains(text(),'"
	goodPath = goodPath + strName + "')])[1]"
	
	If Browser("name:=Home.*").Page("title:=Home.*").WebElement(goodPath).Exist then
		Reporter.ReportEvent micPass, "Validate Variable Success", strName
	Else
		Reporter.ReportEvent micFail, "Validate Variable Fail", strName
	End If		
End Sub

'Adds an item from ocs config
Sub build_ocs_bom()
	'browser("NGQ").Page("Quote - Line Item Details").WebElement("addButton").Click
	'browser("NGQ").Page("Quote - Line Item Details").WebElement("OCSConfig").Click
	click_lineitem_add_ocs
	browser("NGQ").Page("OCS Config").WebElement("ProductList").Click
	Browser("NGQ").Page("OCS Config").WebEdit("InputField").Set "752426-B21"
	Browser("NGQ").Page("OCS Config").WebElement("SearchButton").Click
	Browser("NGQ").Page("OCS Config").WebEdit("SetQuantity").Set "1"
	Browser("NGQ").Page("OCS Config").WebElement("Go2Bom").Click
	Browser("NGQ").Page("OCS Config").WebElement("SaveOCSConfig").Click
	Browser("NGQ").Page("OCS Config").WebElement("ConvertQuote").Click
End Sub

'Adds an item from ocs config
Sub click_lineitem_add_ocs()
	browser("NGQ").Page("Quote").WebElement("Add").Click
	browser("NGQ").Page("Quote - Line Item Details").WebElement("OCSConfig").Click
End Sub

' Add product option
Sub add_product_option(strName)
	 wait(2)
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('contextMenu').setAttribute('style', 'left: 572px; top: 58px; display: block;');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_28').getElementsByTagName('a')[0].click()"
	 wait(2)
	write_product(strName)
End Sub

Sub add_product_option2(strName)
	wait(2)
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('contextMenu').setAttribute('style', 'left: 572px; top: 58px; display: block;');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_2').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_3').getElementsByTagName('a')[0].click()"
	 wait(2)
	write_product(strName)
End Sub

Sub write_product(strName)
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//option[@label='Product']/ancestor::div[@role='row']//input[@ng-model='row.entity.productNr']").Set strName
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//option[@label='Product']/ancestor::div[@role='row']//input[@ng-model='row.entity.productNr']").Click
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=//option[@label='Product']/ancestor::div[@role='row']//input[@ng-model='row.entity.productNr']").SendKeys "~"
End Sub

Sub select_product()
	browser("NGQ").Page("New Configuration").WebElement("ProductList").Click
End Sub

' Verifies that an obsolete message appears when an obsolete product is added
Sub validate_obsolete_message()
Dim compareElement : compareElement = Browser("NGQ").Page("Quote").WebElement("WarningMessage").GetROProperty("InnerText")
	If (InStr(1, compareElement, "Obsolete") <> 0) Then
		Reporter.ReportEvent micPass, "Obsolete Product Detected", "Obsolete Product Detected"
	Else
		Reporter.ReportEvent micFail, "Obsolete Product not Detected", "Obsolete Product not Detected"
	End If
End Sub

' Hovers over a line item and check whether the object is obsolete or not. Send in
' 1 if the item is suppsoed to be obsolete and 0 if it is not.
Sub validate_obsolete_object(strName, valOption)
	Dim goodPath : goodPath = "xpath:=//span[contains(text(),'"
	Dim validateTip,  myMatch, obsDate, currDate
	
	' Regular expressions to check for dates in tool tip
	Dim reEOL, reAVAIL, reDISCO, reOBSOLETE
	
	Set reEOL = New RegExp
	Set reAVAIL = New RegExp
	Set reDISCO = new RegExp
	Set reOBSOLETE = New RegExp
	currDate = Date 
	
	' Regular expression that locates EOL line and check for other expressions
	' NOTE: if the names of the fields change, just change the regular expressions below
	With reEOL
	  .Pattern    = "EOL=[0-9-]*"
      .IgnoreCase = False
      .Global     = False
	End With
	
	With reAVAIL
	  .Pattern    = "AVAIL="
      .IgnoreCase = False
      .Global     = False
	End With
	
	With reDISCO
	  .Pattern    = "DISCO="
      .IgnoreCase = False
      .Global     = False
	End With
	
	With reOBSOLETE
	  .Pattern    = "OBSOLETE="
      .IgnoreCase = False
      .Global     = False
	End With	
		

	
	' Building dynamic xpath
	goodPath = goodPath + strName + "') and @class='ng-binding']/parent::span"
	
	validateTip = Browser("name:=Home.*").Page("title:=Home.*").WebElement(goodPath).GetROProperty("title")
	
	validateTip = Replace(validateTip, "<br>", "")
	
	
	' Checking to see if custom context menu populates properly
	If reEOL.Test(validateTip) Then
		Reporter.ReportEvent micPass, "Validate EOL is present", "EOL is present"	
	Else
		Reporter.ReportEvent micFail, "Validate EOL is present", "EOL is not present"	
	End If
	
	If reAVAIL.Test(validateTip) Then
		Reporter.ReportEvent micPass, "Validate AVAIL is present", "AVAIL is present"	
	Else
		Reporter.ReportEvent micFail, "Validate AVAIL is present", "AVAIL is not present"	
	End If
	
	If reDISCO.Test(validateTip) Then
		Reporter.ReportEvent micPass, "Validate DISCO is present", "DISCO is present"	
	Else
		Reporter.ReportEvent micFail, "Validate DISCO is present", "DISCO is not present"	
	End If
	
	
	If reOBSOLETE.Test(validateTip) Then
		Reporter.ReportEvent micPass, "Validate OBSOLETE is present", "OBSOLETE is present"	
	Else
		Reporter.ReportEvent micFail, "Validate OBSOLETE is present", "OBSOLETE is not present"	
	End If
	
	
	Set myMatch = reEOL.Execute(validateTip)
	
	validateTip = Replace(myMatch(0).Value, "EOL=", "")
	
	obsDate = FormatDateTime(validateTip, 2)
	
	' If option 1 is selected, the program will verify that the product is obsolete
	' while any other number will verify that it is current.
	If valOption = 1 Then
		If (DateDiff("d", obsDate,currDate) > 0) Then
			Reporter.ReportEvent micPass, "Item is Obsolete", ("Product Name: " + CStr(strName) + " Product Obsolete Date: " + CStr(obsDate) + " Current Date: " + CStr(currDate))
		Else
			Reporter.ReportEvent micFail, "Item is not Obsolete", ("Product Name: " + CStr(strName) + " Product Obsolete Date: " + CStr(obsDate) + " Current Date: " + CStr(currDate))
		End If
	Else
		If (DateDiff("d", obsDate,currDate) < 0) Then
			Reporter.ReportEvent micPass, "Item is not Obsolete", ("Product Name: " + CStr(strName) + " Product Obsolete Date: " + CStr(obsDate) + " Current Date: " + CStr(currDate))
		Else
			Reporter.ReportEvent micFail, "Item is Obsolete", ("Product Name: " + CStr(strName) + " Product Obsolete Date: " + CStr(obsDate) + " Current Date: " + CStr(currDate))
		End If
	End If
End Sub

' Validates that the obsolete product color 
Sub validate_obsolete_color()
	
	if Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//span[@class='ng-binding obsoleteColor']").Exist then
		Reporter.ReportEvent micPass, "Obsolete Color is displayed", "The proper Obsolete color is displayed"
	Else
		Reporter.ReportEvent micFail, "Obsolete Color is not displayed", "The Obsolete color was not displayed"	
	End If
End Sub


' Clicks on the upload product button
Sub uploadProduct()
	Browser("NGQ").Page("Quote").WebElement("UploadProduct").Click
    Browser("NGQ").Page("Quote").WebElement("UploadProductBrowse").Click
End Sub

' Uploads the product from the specified file path
Sub importProductExcelSheet(strName)
	Browser("NGQ").Dialog("Choose File to Upload").WinEdit("File name:").Set strName
	Browser("NGQ").Dialog("Choose File to Upload").WinButton("Open").Click
	UploadProducts_VerifyProducts(strName)
	Browser("NGQ").Page("Quote").WebElement("ImportExcel").Click
	Browser("NGQ").Page("Quote").WebElement("ImportQuote").Click
	UploadProducts_ProductsAddedMsg()
End Sub

' Sets the external comment for quote output
Sub EditExternalComment(strName)
	Browser("NGQ").Page("Quote").WebElement("EditExternal").Click
	Browser("NGQ").Page("Quote - Output Quote").WebEdit("ExternalComment").Set strName
End Sub

' clicks on the quote output tab
Sub Quote_OutputTab()
	Browser("NGQ").Page("Quote - Output Quote").WebElement("ClickTab").Click
End Sub

' Sets the type of pdf to create and then saves the pdf to the specified path
Sub Quote_SelectOutputType(strName, filePath)
	Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").Select strName
	Browser("NGQ").Page("Quote - Output Quote").WebElement("Preview Btn").Click
	Browser("Home").WinObject("Notification").WinButton("WinButton").Click
	Browser("Home").WinMenu("ContextMenu").Select "Save as"
	Browser("NGQ").Dialog("Save As").WinEdit("File name:").Set filePath
	Browser("NGQ").Dialog("Save As").WinButton("Save").Click
End Sub

' sets the auto allocation target price
Sub Quote_SetTargReqPrice(strNum)
	Browser("NGQ").Page("Quote").WebElement("PricingTermsTab").Click
	Browser("NGQ").Page("Pricing and Terms").WebEdit("AutoTargPrice").Set strNum
	Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyAuto").Click
	Browser("NGQ").Page("Pricing and Terms").WebElement("ApproveOverride").Click
End Sub

' Verifies that the table displayed in ngq was successfully transferred to the pdf properly
Sub verifyProductInPDF(objPDF, numRows)
	Dim i : i = 1
	While i <> (numRows + 1)
		Dim prodName 
		prodName = get_product_number((i + 1))
		If (objPDF.getProductsProduct(i) = prodName) Then
			reporter.ReportEvent micPass, "Product In PDF", prodName
		Else
			reporter.ReportEvent micFail, "Product not In PDF", prodName
		End If
		
		i = i + 1
	Wend
End Sub

' Verifies that the grand total is the sum of subtotal and shipping and handling
Sub verifyGrandTotal()
	Browser("NGQ").Page("Footer").WebElement("CollapseIcon").Click
    Dim subTot : subTot = CDbl(Browser("NGQ").Page("Footer").WebElement("subtotal").GetROProperty("innertext"))
    Dim shipAndHandle : shipAndHandle = CDbl(Browser("NGQ").Page("Footer").WebElement("ShipAndHandle").GetROProperty("innertext"))
    Dim grandTot : grandTot = CDbl(Browser("NGQ").Page("Footer").WebElement("GrandTotal").GetROProperty("innertext"))
    
    If grandTot = (subTot + shipAndHandle) Then
    	Reporter.ReportEvent micPass, "Grand Total Match Sub total plus Shipping and Handling", CStr(grandTot)
    Else
    	Reporter.ReportEvent micFail, "Grand Total Does Not Match Sub total plus Shipping and Handling", CStr(grandTot)
    End If
    
    Datatable.GetSheet ("Global").AddParameter "GrandTotal", CStr(grandTot)
End Sub

' Verifies that the discription in the top right of the pdf matches the specified string
Sub verifyHeaderInPDF(strName, pdfObj)
	Dim re, myMatch
	
	Set re = New RegExp
	
	With re
	  .Pattern    = strName
      .IgnoreCase = False
      .Global     = False
	End With
	
	Set myMatch = re.Execute(pdfObj.getQuoteHeader())
	
	If myMatch.count > 0 Then
		Reporter.ReportEvent micPass, "Quote Header Found In PDF", strName
	Else
		Reporter.ReportEvent micFail, "Quote Header Not Found in PDF", strName
	End If
	
End Sub

' Verifies that the grand total was entered into the pdf properly
Sub verifyGrandTotalInPDF(strName, pdfObj)
	Dim re, myMatch, valid, totalMatch
	
	Set re = New RegExp
	Set valid = New RegExp
	
	' xpath to extract grand total amount from string
	With re
	  .Pattern    = "[0-9]*[.][0-9]*"
      .IgnoreCase = False
      .Global     = False
	End With
	
	
	' Gets grand total from the pdf
	Dim tot : tot = pdfObj.getTotalsGrandTotal()
	
	' removes any commas from the totals
	tot = Replace(tot, "," , "")
	strName = Replace(strName, ",", "")
	
	' Extracts value from provided string
	Set myMatch = re.Execute(strName)
	strName = myMatch(0).Value
	
	
	With valid
	  .Pattern    = strName
      .IgnoreCase = False
      .Global     = False
	End With
	
	
	If valid.Test(tot) Then
		Reporter.ReportEvent micPass, "Grand Total Does Match In PDF", strName
	Else
		Reporter.ReportEvent micFail, "Grand Total Does Not Match In PDF", strName
	End If
End Sub

' Verifies that the comment entered into the external comments was added properly
Sub verifyCommentInPDF(strName, pdfObj)
	Dim re, myMatch
	
	Set re = New RegExp
	
	With re
	  .Pattern    = strName
      .IgnoreCase = False
      .Global     = False
	End With
	
	Set myMatch = re.Execute(pdfObj.getCommentsBlock())
	
	If myMatch.count > 0 Then
		Reporter.ReportEvent micPass, "Comments Found In PDF", strName
	Else
		Reporter.ReportEvent micFail, "Comments Not Found in PDF", strName
	End If
End Sub

' Clicks and edits the Customer Specific Quote ID
Sub quote_editCutomerSpecQouteID(strName)
	Browser("NGQ").Page("Quote").WebElement("CustomerSpecQuoteIDImage").Click
    Browser("NGQ").Page("Quote").WebEdit("CustomerSpecQuoteIDBox").Set strName
End Sub
'================================
' End of Reese's functions
'================================
'==================================================
' BEGIN pramesh
'==================================================
'==================================================
'BEGIN Quote- Quote Output
'==================================================
Sub QuoteOutput()
	 Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//span[@id='QT_OP']").Click
	
End Sub
'==================================================
'BEGIN Quote- Quote Output- Internal Comments Validations
'==================================================
Function QuoteOutput_Internal_Comments_Validation()
	' Validating Empty internal comments area
	Dim emptyInternalComments : emptyInternalComments =Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").GetROProperty("innertext")
	If emptyInternalComments =  "" Then
		Reporter.ReportEvent micPass, "Internal comments: ","Internal Comments Textbox is empty"
	Else
		Reporter.ReportEvent micFail, "Internal Comments: ","Internal Comments Textbox is not empty"
	End If
	'Validating maximum number of character allowed in Textarea
	Dim maxLength : maxLength = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").maxlength
	If maxLength =  "4000" Then
		Reporter.ReportEvent micPass, "Internal comments Character count: ","Validated Maximum character allowed is " & maxLength
	Else
		Reporter.ReportEvent micFail, "Internal comments Character count: ","Maximum Character allowed is " & maxLength
	End If
End Function
'=====================================================
'Sets internal comment in the internal comment section
'=====================================================
Sub Set_InternalComments(strComments)
	Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").Set strComments
	wait 1
End Sub
'============================================================
'Clicks Refresh pricing button located on the top right corner
'============================================================
Sub Quote_Refresh_Pricing()
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
	wait 5
End Sub

'======================================================
'Validates the internal comment has the correct format
'======================================================
Function QuoteOutput_ValidateInternalComments()
	dim comment : comment = Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_DisplayInternalComments").GetROProperty("innertext")
	Dim regEx   ' Create variable.
    Set regEx = New RegExp   ' Create a regular expression.
    regEx.Pattern = "\w+\.\w*.?@\w+\.com\:\s\d{4}\-\d{2}-\d{2}\s\d{2}\:\d{2}\s\(UTC\):\w+.*?$"   ' Set pattern.
    regEx.IgnoreCase = True   ' Set case insensitivity.
    regEx.Global = True   ' Set global applicability.
    dim retVal : retval = regEx.Test(comment)      ' Execute the search test.
		If retVal Then
		Reporter.ReportEvent micPass, "Internal Comments Validation: ","Internal Comment is in Correct Format"
	Else
		Reporter.ReportEvent micFail, " Internal Comments Validation: ","Internal Comment is Not in Correct Format"
	End If
End Function
'=========================================================
'Sets External comment at external comment section
'=========================================================
sub QuoteOutput_SetExternalComments(strExternalComments)
	Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_ExternalCommentEdit").Click
	Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_ExternalCommentEditBox").Set strExternalComments
End sub
'=========================================================
'Sets External comment at external comment section
'=========================================================
sub QuoteOutput_ExternalComments(strExternalComments)
	Browser("NGQ").Page("Navbar - New Quote").Image("QuoteOutput_ExternalCommentEdit").Click
	Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_ExternalCommentEditBox").Set strExternalComments
End suB
'==================================================
'Make sure External Comment check box is checked
'==================================================
 sub QuoteOutput_ExternalCommentCheckBox()
	dim enableCheckbox : enableCheckbox = Browser("NGQ").Page("Navbar - New Quote").WebCheckBox("QuoteOutput_ExternalCommentCheckBox"). GetROProperty ("Value")
	
	If enableCheckbox = false Then
		Browser("NGQ").Page("Navbar - New Quote").WebCheckBox("QuoteOutput_ExternalCommentCheckBox").Click


	End If
End sub
'==================================================
' Verifies Opportunity and QuoteInfoTab Existence
'==================================================
Function OpportunityandQuoteInfoTabExistence()
	IF Browser("NGQ").Page("Quote").WebElement("Opportunity and Quote Info Tab").Exist(1) THEN
		Reporter.ReportEvent micPass, "Opportunity and QuoteInfoTab: ","Displayed"
	ELSE
		Reporter.ReportEvent micFail, "Opportunity and QuoteInfoTab: ","Not Displayed"
	End IF 
End Function
'==================================================
'Mouse Over to Add+ Button
'==================================================
Sub Click_Add()
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
End Sub
'==================================================
'Click on Add product or Option under Add+
'==================================================
Sub ClickAddproductOption()
	Browser("NGQ").Page("Quote").WebElement("AddProductOrOption").Click
End Sub
'=======================================================
'Navigates through Add product or Option
'=======================================================
Sub Click_AddProdAndOption()
	Browser("NGQ").Page("Quote").WebElement("Add+").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add+").MouseOver
	Browser("NGQ").Page("Quote").WebElement("Add Product Or Option").Click
End Sub
'==============================================================
'Navigates through searched quote number undewr advanced search
'===============================================================
Sub AdvancedSearch_Result_OpenQuoteNumber(strQuote)
    Dim temp : temp = Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Autofilter Quote Number").GetROProperty("innertext")
    temp = Trim(temp)
    strQuote = Trim(strQuote)
    If temp = strQuote  Then
	     Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Autofilter Quote Number").Click
    End If
End Sub
'==================================================
'Set Product number in product number Column
'==================================================
Sub SetProductNumber(strValue)
Browser("NGQ").Page("Quote").WebEdit("EnterProductNumber").Set strValue
    wait 1
    If not Browser("NGQ").Page("Quote").WebEdit("EnterProductNumber").Exist Then
        Quote_AddProductOrOption
        Utils_scrollToBottom_lineItemAdd
        Browser("NGQ").Page("Quote").WebEdit("EnterProductNumber").Set strValue
    End If
    Browser("NGQ").Page("Quote").WebEdit("EnterProductNumber").Click
    EnterKeys
End Sub
'==================================================
'Verifies Internal Comments Section is empty
'==================================================
Function QuoteOutput_Internal_Comments_Empty()
	' Validating Empty internal comments area
	Dim emptyInternalComments : emptyInternalComments =Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").GetROProperty("innertext")

	If emptyInternalComments =  "" Then
		Reporter.ReportEvent micPass, "Internal comments: ","Internal Comments Textbox is empty"
	Else
		Reporter.ReportEvent micFail, "Internal Comments: ","Internal Comments Textbox is not empty"
	End If
End function
'==================================================
'Click Advanced Serach on the top right corner of the page
'==================================================
Sub AdvancedSearchClick()
	Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Advanced_SearchTab").DoubleClick
End Sub

'=========================================================================
'Set Quote Number in a Quote Number Text field under Advanced Search Tab
'=========================================================================
Function SetQuoteNumber_AdvancedSearch(quoeteNumber)
	Browser("NGQ").Page("Navbar_AdvancedSearch").WebEdit("QuoteNumber").Set quoeteNumber
    
End Function
'==================================================
'Clicks Search button under Advanced search tab
'==================================================
sub ClickSearch_advancedSearch()
	Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("SearchButton").MouseOver
	Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("SearchButton").Click
 End sub
 '==================================================
 ' Opens the hyperlink Quote number
 '==================================================
 Sub ClickResult_QuoteNumber(strValue)
 	Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Result_QuoteNumber").Click
 	 End Sub
 
''==================================================================
''Validates the comments remains in the Display internal comment box
''==================================================================
'Function validate_SavedInternalComments()
'	Dim temp : temp = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_SavedInternalComments").GetROProperty("Innertext")
'	If temp = "" Then
'		Reporter.ReportEvent micPass, "Saved Internal comments: ","Validated Internal comments Failed"
'	Else
'		Reporter.ReportEvent micFail, "Saved Internal Comments: ","Validation of internal comments passed"
'	End If
'
'End Function
'==================================================================
'Validates the internal comments display the specific comment
'==================================================================
Function validate_SavedInternalComments(strToCheck)
	Dim temp : temp = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_SavedInternalComments").GetROProperty("Innertext")
	Dim checkReadonly: checkReadonly = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_SavedInternalComments").GetROProperty("disabled")
	If InStr(1,temp, strToCheck) > 0 Then
		Reporter.ReportEvent micPass, "Saved Internal Comments: ","Internal comments contains: " & strToCheck
	Else
	Reporter.ReportEvent micFail, "Saved Internal comments: ","Internal comments Doesn't dispaly: " & strToCheck
	End If


	If checkReadonly = "1" Then
		Reporter.ReportEvent micPass, "Saved Internal Comments: ","Internal comments is in Read-only mode"
	Else
	Reporter.ReportEvent micFail, "Saved Internal comments: ","Internal comments is not Read-only mode"
	End If
End Function
'==================================================================
'Validates the comments remains in the external comment box
'==================================================================
Function validate_SavedExternalComments(strToCheck)
	Dim temp : temp = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_ExternalCommentEditBox").GetROProperty("Innertext")

	If InStr(1,temp, strToCheck) > 0 Then
		Reporter.ReportEvent micPass, "Saved External comments: ","External comments contains: " & strToCheck

	Else
		Reporter.ReportEvent micFail, "Saved External Comments: ","External comments contains: " & strToCheck
	End If
End Function
'==================================================================
'Clicks the new version Button on the top right corner
'==================================================================
Sub Click_QuoteNewVersionButton()
	Browser("NGQ").Page("Quote NewVersion").WebElement("Quote New Version").Click
End Sub
'==================================================================
'Selects new version source from the drop down list
'==================================================================
Sub Choose_NewVersionSource(strNewVersionSource)
	Browser("NGQ").Page("Quote NewVersion").WebList("NewVersionSource_DropDownButton").Select strNewVersionSource
End Sub
'==================================================================
'Selects new version reason  from the drop down list
'==================================================================
Sub Choose_NewVersionReason(strNewVersionReason)
Browser("NGQ").Page("Quote NewVersion").WebList("NewVersionReason_DropDownButton").Select strNewVersionReason
End Sub
'==================================================================
'Set comment in new version code window
'==================================================================
Sub SetComment_NewVersionWindow(strComment)
	Browser("NGQ").Page("Quote NewVersion").WebEdit("New Version Comment").Set strComment
End Sub
'==================================================================
'Clicks ok button on new version window
'==================================================================
Sub NewVersion_OkButton()
	Browser("NGQ").Page("Quote NewVersion").WebElement("NewVersion_OkButton").Click
End Sub
'==================================================================
'Selects output type from the drop down list
'==================================================================
Sub Select_Quote_GeneraL_OutputType(strGenOutputType)
	Browser("NGQ").Page("Navbar - New Quote").WebList("Quote_GeneraL_OutputType").Select strGenOutputType
End Sub

'==================================================================
'Clicks Preview button under general section
'==================================================================
Sub Click_Preview_Quote_OutputType()
	Browser("NGQ").Page("Navbar - New Quote").WebElement("Qute_QuoteOutput_Preview").Click
	Browser("NGQ").Page("Navbar - New Quote").WebElement("Qute_QuoteOutput_Preview").DoubleClick
End Sub


'===============================================================================================
'Validates Quote number, Quote version, Quote name, Quote status, Quote start date and end date
'===============================================================================================
Function Validated_Quote(quoteNumber,quoteVersion,quoteName,quoteStatus,quoteEndDate)
	' Validating Quote Number
	Dim strQuoteNumberID: strQuoteNumberID  = Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""quoteId""]").GetROProperty("innertext")
	If strQuoteNumberID = quoteNumber Then
		Reporter.ReportEvent micPass, "Valid quote number: ","Quote number remains the same"
	Else
		Reporter.ReportEvent micFail, "Valid quote number: ","Quote Number is different"
	End If
	' Validating Quote Version
	Dim strQuoteVersion : strQuoteVersion  = Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[2]/DIV[1]/SPAN[3]").GetROProperty("innertext")
	If strQuoteVersion = quoteVersion Then
		Reporter.ReportEvent micPass, "Valide version: ","New quote version is To be assigned"
	Else
		Reporter.ReportEvent micFail, "Valide version: ","New quote version is not To be assigned"
	End If
	' Validating Quote Name
	Dim strQuotename : strQuotename = Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""quotenamespanSecond""]").GetROProperty("innertext")
	If strQuotename = quoteName Then
		Reporter.ReportEvent micPass, "Valid Quote name:","Quote Name is Validated"	
	Else
		Reporter.ReportEvent micFail, "Valid Quote name: ","Quote Name is not Validated"
	End If	
	' Validating Quote Status
	Dim strQuoteStatus : strQuoteStatus = Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[3]/SPAN[1]/SPAN[1]").GetROProperty("innertext")
	If strQuoteStatus = quoteStatus Then
		Reporter.ReportEvent micPass, "Valide quote status","Quote Status is Quote/Configuration Created"
	Else
		Reporter.ReportEvent micFail, "Valide quote status","Quote Status is not Quote/Configuration Created"
	End If	
	' Validating Quote Start Date
	If Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[3]/SPAN[2]/SPAN[1]").Exist Then
		Reporter.ReportEvent micPass, "Valide start date","Start Date is visible"	
	Else
		Reporter.ReportEvent micFail, "Valide start date","Start Date is not visible"
	End If		
	' Validating Quote End Date
	Dim strQuoteEndDate : strQuoteEndDate = Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""expiryTsSpan""]/SPAN[1]").GetROProperty ("innertext")
	If strQuoteEndDate = quoteEndDate Then
		Reporter.ReportEvent micPass, "Valide end date","End Date is not pulled out. It says - Need Pricing Call -"
	Else
		Reporter.ReportEvent micFail, "Valide end date","End Date is pulled out"
	End If	
End Function
'==================================================================
'Validates the version number located on the top left corner
'==================================================================
Function validate_VersionNumber(strNumber)
	Dim strQuoteVersion : strQuoteVersion  = Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[2]/DIV[1]/SPAN[3]").GetROProperty("innertext")
	If strQuoteVersion = "0"& strNumber or strQuoteVersion = strNumber Then
		Reporter.ReportEvent micPass, "Valid version: ","New quote version expected " & strNumber & " found " & strQuoteVersion
	Else
		Reporter.ReportEvent micPass, "Valid version: ","New quote version expected " & strNumber & " found " & strQuoteVersion
	End If
End Function

'==================================================================
'Click search button
'==================================================================
Sub Click_Search()
	Browser("NGQ").Page("Home").WebElement("Home_Search").Click
End Sub

'==================================================================
'Validates the two internal comments box are empty
'==================================================================
function Validate_TwoInternalCommentsBox()
	If Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").Exist(1) Then
	
		If Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_DisplayInternalComments").Exist Then
			Reporter.ReportEvent micPass, "Internal Comment Box: ","Internal Comment box are Visible"
		Else 
			Reporter.ReportEvent micFail, "Internal Comment Box: ","Internal Comment box are not Visible"
		End If
	End If
End function


'==================================================================
'Validates the internal comment display box is readonly mode
'==================================================================
function Validate_ReadOnlyInternal_DisplayCommentsBox()
	If Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_DisplayInternalComments").GetROProperty("disabled") = false Then
		Reporter.ReportEvent micFail, "Internal Comment Display Box: ","Internal Comment display box is not read only mode"
	Else 
		Reporter.ReportEvent micPass, "Internal Comment Display Box: ","Internal Comment display box is read only mode"
	End If
End function

'==================================================================
'validates Internal comment box is empty and read only mode
'==================================================================
Function Internal_Commentbox_Empty()
	If Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").GetROProperty("innertext") = "" Then
		Reporter.ReportEvent micPass, "Internal Comment Edit Box: ","Internal Comment Edit box is Empty"
	else
		Reporter.ReportEvent micFail, "Internal Comment Edit Box: ","Internal Comment Edit box is Empty"
	End If
End Function

'==================================================================
'Clicks the clone button on the top right corner
'==================================================================
Sub Click_Clone()
	Browser("NGQ").Page("Navbar - New Quote").WebElement("Quote_Clone").Click
End Sub

'==================================================================
'Navigates "My Dashboard" 
'==================================================================
Sub Click_MyDashboard()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("My Dashboard").Click
End Sub

'==================================================================
'Selects the Quote
'==================================================================
Sub Check_RadioButton(strQuote)
	wait(8)
    Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Check RadioButton").Click
End Sub

'==================================================================
'Click the "My Group Quote" tab next to the "My Quote" tab
'==================================================================
Sub Click_MyGroupQuote()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("My Group Quote").Click
End Sub

'===================================================================================
'Clicks the "Count" number associated to "Quote Status"- Quote/Configuration Created
'===================================================================================
Sub Click_QuoteConfiguration_Count()
	 Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote_Configuration_Count").Click
End Sub
'after status friday
'==================================================================
'Clicks on Transfer Ownership Button
'==================================================================
Sub Click_TransferOwnership()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Transfer Ownership").Click
End Sub

'==================================================================
'Selects Transfer Ownership Transfer reason
'==================================================================
Sub SelectTransferOwnership_TransferReason(strReason)
	Browser("NGQ").Page("Transfer Ownership").WebList("Transfer Reason").Select strReason
End Sub

'==================================================================
'Selects the transfer ownership Group
'==================================================================
Sub SelectTransferOwnershipGroup(strGroup)
	Browser("NGQ").Page("Transfer Ownership").WebList("Transfer Select Group").Select strGroup
End Sub 

'==================================================================
'Selects the transfer email
'==================================================================
Sub SelectTransferEmail(strEmail)
	Browser("NGQ").Page("Transfer Ownership").WebList("Transfer Select Email").Select strEmail
End Sub

'==================================================================
'Clicks continue button of transfer ownership window
'==================================================================
Sub Click_TransferContinue()
	Browser("NGQ").Page("Transfer Ownership").WebElement("Transfer Continue Button").Click
End Sub

'==================================================================
'click on Claim button on the top right of result section
'==================================================================
Sub Click_Claim()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Claim Button").Click
End Sub

'==================================================================
'Click ok button to confirm Claim under my dashboard
'==================================================================
Sub Click_Ok_Claim()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Claim_Ok").Click
End Sub

'==================================================================
'Click the "OK" button to close the window
'==================================================================
Sub Quote_Claim_Success_Ok()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Claim Success Ok").Click
End Sub

'==================================================================
'Clicks the re-login links
'==================================================================
Sub Click_Relogin()
	Browser("NGQ").Page("Logout  ReLogin").Link("Please click here to re-login").Click

End Sub

'==================================================================
'Closes the pdf
'==================================================================
Sub pdfClose()
  If Browser("title:=.*pdf").Exist then
    Browser("title:=.*pdf").Close
  end if
End Sub

'==================================================================
'Move the page up
'==================================================================
Sub pageUpNewQuotePage()
	Dim myjs : myjs ="window.scrollTo(0,0);"
 	Browser("NGQ").Page("Navbar - New Quote").RunScript(myjs)
End Sub

'==================================================================
'Move the page down
'==================================================================
Sub pageDownNewQuotePage()
	Dim myjs : myjs ="window.scrollTo(0,0, document.body.scrollHeight);"
 	Browser("NGQ").Page("Navbar - New Quote").RunScript(myjs)
End Sub

'==================================================================
'Closes the windows notification
'==================================================================
Sub windowNotifClose()
	Browser("NGQ").WinObject("Save Bar").WinButton("Close").Click
End Sub

'==================================================================
'Verifies transfer of quote
'==================================================================
Function VerifyQuoteTransfer(strEmail)
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote successfully transfered").GetROProperty("innertext")  = "Quote successfully transfered to " & strEmail  Then
		Reporter.ReportEvent micPass, "Verification: ","Quote is Successfully Transfered"
	Else 
		Reporter.ReportEvent micFail, "Verification: ","Quote is Not Successfully Transferred"
	End If
End Function
'==================================================================
'Verifies email and quote number 
'==================================================================

Function VerifyEmailQuote(strEmail,strQuote)
	Dim temp1 : temp1 = Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Result_QuoteNumber").GetROProperty("innertext")
	Dim temp: temp = Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Email Address").GetROProperty("innertext")
	strEmail = Trim(strEmail)
	strQuote = Trim(strQuote)
	temp1 = Trim(temp1)
	temp = Trim(temp)
	If temp = strEmail and temp1 = strQuote Then
		Reporter.ReportEvent micPass, "Verification: ","Quote is Successfully Claimed/Transfered"
	else
		Reporter.ReportEvent micFail, "Verification: ","Quote is Not Successfully Claimed/Transfered"
	End If
End Function
'==================================================
'Validate the quote status 
'==================================================

Function Quote_QuoteStatus(strQuoteStatus)
	Dim temp : temp = Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[3]/SPAN[1]/SPAN[1]").GetROProperty("innertext")

	If temp = strQuoteStatus  Then
		Reporter.ReportEvent micPass, "Valide quote status","Quote Status is Quote/Configuration Created"
	Else
		Reporter.ReportEvent micFail, "Valide quote status","Quote Status is not Quote/Configuration Created"
	End If
End Function

'==================================================
'Clicks Customer Data Ship to tab
'==================================================
sub CustomerData_ShipTo()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("ShipTo").DoubleClick
	Wait 1
end sub

'==================================================
'Checks the same as sold to address checkbox
'==================================================
Sub CustomerDataShipTo_SameAsSoldToAddress()
	if Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address Webcheckbox").Exist(1) then
		Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address Webcheckbox").CheckBox
	End if
End Sub

'*******************************************************************************************
'Clicks on Pricing and terms tab
'*******************************************************************************************
Sub Quote_PricinadAndTermsTab()
	Browser("NGQ").Page("Quote").WebElement("Pricing and Terms").Click

End Sub

'*******************************************************************************************
' sets Target discount percentage under auto allocation section
'*******************************************************************************************

Sub SetAutoAllocTargReqDiscPercentage(strTargReqDiscPercentage)
	Browser("NGQ").Page("Auto Allocation").WebEdit("AutoAllocation _Target ReqDiscPercentage").Set strTargReqDiscPercentage
	Browser("NGQ").Page("Auto Allocation").WebElement("Apply").Click
	If Browser("NGQ").Page("Auto Allocation").WebElement("Yes").Exist Then
		Browser("NGQ").Page("Auto Allocation").WebElement("Yes").Click
	End If
End Sub

'*******************************************************************************************
'Clicks the triangle button beside the "Refresh Pricing" button 
'*******************************************************************************************
Sub click_Triangle()
	Browser("NGQ").Page("Quote").WebElement("Triangle").Click	
End Sub

'*******************************************************************************************
'Clicks the "Request Special Pricing" button.
'*******************************************************************************************
Sub Select_RequestSpecialPricing()
	Browser("NGQ").Page("Triangle").WebElement("Triangle").Click
	Browser("NGQ").Page("Triangle").WebElement("Request Special Pricing").Click
End Sub

'*******************************************************************************************
'Selects Request Eclipse Bid Desk approval and clicks cubmit
'*******************************************************************************************
'Selects Request Eclipse Bid Desk approval and clicks cubmit
Sub Select_RequestEclipseBidDeskApproval()
	Browser("NGQ").Page("Triangle").WebRadioGroup("Special Requerst - Request Eclipse Bid Desk Approval").Select "2"
	Browser("NGQ").Page("Triangle").WebElement("Submit Special Pricing Request").Click
End Sub

'*******************************************************************************************
' Validates special pricing in progress is visible
'*******************************************************************************************
Sub validate_SpecialPriceInProgress()
	if Browser("NGQ").Page("Triangle").WebElement("Special Pricing In Progress").Exist(1) then
		Reporter.ReportEvent micPass, "Quote Status: ", "Special Pricing in progress"
	else
		Reporter.ReportEvent micFail, "Quote Status: ", "Special Pricing in progress"
	End if
		
End Sub

'*******************************************************************************************
'Returns eclipse deal id
'*******************************************************************************************
Function get_EclipseDealId()
	Dim temp : temp = Browser("NGQ").Page("Quote").WebElement("Eclipse Deal Id").GetROProperty("innertext")
End Function

'*******************************************************************************************
'Clicks searched quote number
'*******************************************************************************************

Sub Click_SearchedQuoteNumber()
	Browser("NGQ").Page("Navbar - My Dashboard").Link("Auto Filter Searched Quote Number").Click
End Sub

'*******************************************************************************************
'Selects pre-validate under triangle
'*******************************************************************************************
Sub Select_Prevalidate()
	Browser("NGQ").Page("Triangle").WebElement("Triangle").Click
	Browser("NGQ").Page("Triangle").WebElement("Pre-Validate").Click
End Sub

'*******************************************************************************************
'Validates the pdf contains the external comments
'*******************************************************************************************
Function validateCommentInPdf(strExternalComments)
	Dim pdfObj 
	Dim path
	path = DataTable("OutputFilePath","Global")
	'UFT IS DUMB, IGNORE THIS ERROR, IT IS VALID VBSCRIPT, IT WILL RUN REGARDLESS
	set pdfObj = NewPdfParser(path) 'poi~'
	Dim temp: temp = pdfObj.compareCommentsBlock(strExternalComments)
	If temp Then
	Reporter.ReportEvent micPass, "PDF Compare: ", "Pdf contains comment: " & strExternalComments
	Else 
		Reporter.ReportEvent micFail, "PDF Compare: ", "Pdf doesn't contains External Comments"
	End If
End Function

'*******************************************************************************************
'Sets Quote number in the quote number column and hits  enter from the keyboard
'*******************************************************************************************
Function SetAutoFilterQuoteNumber(quoteNumber)
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter for column").Click 
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter for column").Set quoteNumber
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter for column").SendKeys "~"
End Function

'*******************************************************************************************
'Closes browser
'*******************************************************************************************
Sub Close_Browser()
	Browser("NGQ").Close
End Sub

'*******************************************************************************************
'Saves the pdf in designed path
'*******************************************************************************************
Sub SavePdfAs(strPath)
	Browser("NGQ").WinObject("Save Bar").WinButton("Save Drop Down Menu").Click
	UFT.ReplayType = 1
	Browser("NGQ").WinObject("Save Bar").WinMenu("Save Drop Down Menu").Select "Save as"
	UFT.ReplayType = 1
	Browser("NGQ").Dialog("Save As").WinEdit("File name:").Set strPath
	Browser("NGQ").Dialog("Save As").WinButton("Save").Click
End Sub 

'*******************************************************************************************
'Saves the path on the datatable
'*******************************************************************************************
Sub OutputQuote_SaveQuotePdf(strQuoteNum)
	Dim strSavePath
	strSavePath = CreateSavePath(strQuoteNum)
	SavePdfAs strSavePath
	DataTable.GlobalSheet.AddParameter "OutputFilePath", strSavePath
End Sub

'*******************************************************************************************
'Creates a path for pdf
'*******************************************************************************************
Function CreateSavePath(strQuoteNum)
	Dim strCreatedPath
	strCreatedPath = Environment.Value("TestDir") + "\..\..\data\pdfs\" + strQuoteNum + ".pdf"
	CreateSavePath = strCreatedPath
End Function 

Sub Quote_create_newVersion(strSource, strReason, strComment)
	Browser("NGQ").Page("Quote").WebElement("NewVersion").Click
	Browser("NGQ").Page("Quote").WebList("NewVersionRevisionSource").Select strSource
	Browser("NGQ").Page("Quote").WebList("NewVersionRevisionReason").Select strReason
	Browser("NGQ").Page("Quote").WebEdit("NewVersionRevisionComment").Set strComment
	Browser("NGQ").Page("Quote").WebElement("NewVersionSubmit").Click
End Sub

Sub quote_newVersion(oldQuoteID)
	Quote_create_NewVersion DataTable.Value("versionSource", "Global"), DataTable.Value("versionReason", "Global"), DataTable.Value("versionComment", "Global")
	verify_newVersion_message
	Verify_quoteID oldQuoteID
	Dim temp : temp = DataTable.Value("quoteVersion", "Global")
	temp = temp - 1
	If temp < 10 Then
		Verify_quoteName "New Version of " & oldQuoteID & "-0" & temp
	else
		Verify_quoteName "New Version of " & oldQuoteID & "-" & temp
	End If
	Verify_quoteVersion "To be assigned"
	Quote_save
	Verify_quoteVersion	DataTable.Value("quoteVersion", "Global")	
End Sub

'==================================================
' END pramesh
'==================================================

'alexandro Quote
'validate if the quote tab is active/selected
Function ValidateQuoteTab()
    If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Quote Tab").Exist(1) Then
            Reporter.ReportEvent micPass, "Valide Quote Tab","The quote tab is selected"        


    Else 
            Reporter.ReportEvent micFail, "Valide Quote Tab","The quote tab is Not selected"        
    End If
End Function
'enter and submit th equote number in My Dashboard
Function FillFilterQuoteNumber(quoteNumber)
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").Click 
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").Set quoteNumber
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").SendKeys "~"
    'EnterKeys
End Function

Function ClickAutoFilter()
    Browser("NGQ").Page("Navbar - My Dashboard").WebElement("BtnAutoFilter").Click
End Function

Function EnterKeys()
	UFT.ReplayType = 2
	Dim objKey 
	set objKey = CreateObject("WScript.shell")
	objKey.SendKeys("{ENTER}")
	UFT.ReplayType = 1
End Function
'Jesus stuff
'TODO Jesus: Add comments to my functions
'Functions for "upload products file section of NGQ
' Clicks on the upload product button
Sub uploadProduct()
	Browser("NGQ").Page("Quote").Link("Upload Product").Click
    Browser("NGQ").Page("Upload Product File").WebElement("UploadProductBrowse").Click
End Sub

' Uploads the product
Sub setUploadProductPath(strName)
	Browser("NGQ").Dialog("Choose File to Upload").WinEdit("File name:").Set strName
	Browser("NGQ").Dialog("Choose File to Upload").WinButton("Open").Click
End Sub

Function getProductFilePath(strFileName)
	Dim strProductFilePath
	strProductFilePath = Environment.Value("TestDir") & "\..\..\data\products\" & strFileName
	getProductFilePath = strProductFilePath
End Function

Sub UploadProducts_VerifyProducts(strFilePath)
	Dim intRows, intRowIter, intColIter, strCellData, strExcelData

	UploadProducts_VerifyHeaders

	Dim objExcel
	Set objExcel = createobject("excel.application")
	objExcel.Workbooks.open strFilePath
	Dim objExSheet : Set objExSheet = objExcel.ActiveWorkbook.Worksheets("Sheet1")
	intRows = objExSheet.UsedRange.Rows.Count
	
	For intRowIter = 1 To intRows Step 1
		For intColIter = 1 To 3 Step 1
			If intColIter = 3 Then
				strCellData = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(intRowIter+2, intColIter+1)
			Else
				strCellData = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(intRowIter+2, intColIter)
			End If
			
			strExcelData = objExSheet.cells(intRowIter, intColIter).value
			If StrComp(strCellData, strExcelData, 1) <> 0 Then
				Reporter.ReportEvent micFail, "Upload Product Table", "There was a missmatch between the search results and product upload sheet " _
																		& "(Row: " & intRowIter & ", Column: " & intColIter & ") NGQ Table: " _
																		& strCellData & " Excel: " & strExcelData
			End If
		Next		
	Next
	Reporter.ReportEvent micPass, "Product Table Verified", "Products from the search results have been verified"
	
	objExcel.ActiveWorkbook.Close
	objExcel.Application.Quit
	Set objExSheet = nothing
	Set objExcel = nothing
End Sub

Sub UploadProducts_VerifyHeaders()
	Dim strColOneHeader : strColOneHeader = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(1, 1)
	Dim strColTwoHeader : strColTwoHeader = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(1, 2)
	Dim strColThreeHeader : strColThreeHeader = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(1, 3)
	
	If Trim(strColOneHeader) = "Quantity" Then
		Reporter.ReportEvent micPass, "Quantity Header", "Quantity header sucessfully labeled"
	Else 
		Reporter.ReportEvent micFail, "Quantity Header", "Incorrect Quantity header.  Expected: ""Quantity"" Actual: " & strColOneHeader
		ExitTest
	End If
	
	If Trim(strColTwoHeader) = "Product Number" Then
		Reporter.ReportEvent micPass, "Product Number Header", "Product Number header sucessfully labeled"
	Else 
		Reporter.ReportEvent micFail, "Product Number Header", "Incorrect Product Number header.  Expected: ""Product Number"" Actual: " & strColTwoHeader
		ExitTest
	End If
	
	If Trim(strColThreeHeader) = "Product Description" Then
		Reporter.ReportEvent micPass, "Product Description Header", "Product Description header sucessfully labeled"
	Else 
		Reporter.ReportEvent micFail, "Product Description Header", "Incorrect Product Description header.  Expected: ""Product Description"" Actual: " & strColThreeHeader
		ExitTest
	End If

End Sub

Sub UploadProducts_ProceedWithImport()
    Browser("NGQ").Page("Upload Product File").WebElement("Proceed with Import").Click
End Sub

Sub UploadProducts_VerifyAddToQuoteTabDisplayed()
	If Browser("NGQ").Page("Upload Product File").WebElement("productAddToQuoteTab").CheckProperty("class", MicRegExpMatch(".*line_radiu")) Then
		Reporter.ReportEvent micPass, "Add to Quote Tab", "Add to quote tab is selected and being displayed"
	Else
		Reporter.ReportEvent micFail, "Add to Quote Tab", "Add to quote tab is not selected and being displayed"
	End If
End Sub

Sub UploadProducts_AddValidProducts()
    Browser("NGQ").Page("Upload Product File").WebElement("Add Valid Products To").Click
End Sub

Sub UploadProducts_ProductsAddedMsg()

	If Browser("NGQ").Page("Quote").WebElement("SuccessMessage").Exist Then
        Reporter.ReportEvent micPass, "Products Added Message", "Products added message successfully displayed"
    ElseIf Browser("NGQ").Page("Quote").WebElement("WarningMessage").Exist Then
        Reporter.ReportEvent micWarning, "Obsolete Product Message", "The obsolete product message is being displayed"
    Else
    	Reporter.ReportEvent micFail, "Products Added Message", "Products added message not displayed"
    End If
End Sub

Function QuoteOutput_ExternalComments(strExternalComments)
    Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_ExternalCommentEdit").Click
    Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_ExternalCommentEditBox").Set strExternalComments
End Function
''end jesus

Sub Quote_create_newVersion(strSource, strReason, strComment)
	Browser("NGQ").Page("Quote").WebElement("NewVersion").Click
	Browser("NGQ").Page("Quote").WebList("NewVersionRevisionSource").Select strSource
	Browser("NGQ").Page("Quote").WebList("NewVersionRevisionReason").Select strReason
	Browser("NGQ").Page("Quote").WebEdit("NewVersionRevisionComment").Set strComment
	Browser("NGQ").Page("Quote").WebElement("NewVersionSubmit").Click
End Sub

Sub quote_newVersion(oldQuoteID)
	Quote_create_NewVersion DataTable.Value("versionSource", "Global"), DataTable.Value("versionReason", "Global"), DataTable.Value("versionComment", "Global")
	verify_newVersion_message
	Verify_quoteID oldQuoteID
	Dim temp : temp = DataTable.Value("quoteVersion", "Global")
	temp = temp - 1
	If temp < 10 Then
		Verify_quoteName "New Version of " & oldQuoteID & "-0" & temp
	else
		Verify_quoteName "New Version of " & oldQuoteID & "-" & temp
	End If
	Verify_quoteVersion "To be assigned"
	Quote_save
	Verify_quoteVersion	DataTable.Value("quoteVersion", "Global")	
End Sub

Sub verify_newVersion_message()
	if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "New version number will be generated upon save." then
		Reporter.ReportEvent micPass, "New Version of Quote Created","New Version successfully created"
	else
		Reporter.ReportEvent micFail, "New Version of Quote Created","New Version failed to create"
	End if
End Sub

Sub Verify_quoteID(strQuoteID)
	If Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext") = strQuoteID Then
		Reporter.ReportEvent micPass, "QuoteID Comparison","Quote ID Valid"
	else
		Reporter.ReportEvent micFail, "QuoteID Comparison","Quote ID NOT Valid"
	End If
End Sub

Sub Verify_quoteVersion(strVersionID)
	If Browser("NGQ").Page("Quote").WebElement("quoteVersion").GetROProperty("innertext") = strVersionID Then
		Reporter.ReportEvent micPass, "Quote Version Comparison","Quote Version Valid"
	else
		Reporter.ReportEvent micFail, "Quote Version Comparison","Quote Version NOT Valid"
	End If
End Sub

Sub Verify_quoteName(strQuoteName)
	If Browser("NGQ").Page("Quote").WebElement("quoteName").GetROProperty("innertext") = strQuoteName Then
		Reporter.ReportEvent micPass, "Quote Name Comparison","Quote Name Valid"
	else
		Reporter.ReportEvent micFail, "Quote Name Comparison","Quote Name NOT Valid, Received " & Browser("NGQ").Page("Quote").WebElement("quoteName").GetROProperty("innertext")
	End If
End Sub

Sub Quote_GrandTotal_Changed(strGrandTotal)
	If get_grand_total = Browser("NGQ").Page("Quote").WebElement("GrandTotal").GetROProperty("innertext") <> strGrandTotal Then
		Reporter.ReportEvent micPass, "Grand Total Changed", "Grand Total successfully changed"
	else
		Reporter.ReportEvent micPass, "Grand Total Changed", "Grand Total failed to change"
	End If
End Sub

Sub verify_advSearch_versions(strVersion, intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("VersionHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/div"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	If actual = strVersion Then
		Reporter.ReportEvent micPass, "Verify Version", "Verified matching version"
	else
		Reporter.ReportEvent micFail, "Verify Version", "Incorrect version found"
	End If
End Sub

Sub verify_advSearch_quoteID(strQuoteID, intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("QuoteNumberHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/span[not(contains(@class,'ng-hide'))]/a/span"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	If actual = strQuoteID Then
		Reporter.ReportEvent micPass, "Verify Quote Number", "Verified matching Quote Number"
	else
		Reporter.ReportEvent micFail, "Verify Quote Number", "Incorrect Quote Number found"
	End If
End Sub
	
Function getAdvSearchColumn(strColumnName)
	dim findCol : findCol = Browser("NGQ").Page("AdvancedSearch").WebElement(strColumnName).GetROProperty("class")
	dim matches : set matches = RegexGetMatches(findCol, "(coluiGrid-\d{4})", false)
	if matches.Count = 0 then
	    'we failed poi~
	    print "failed"
	end if
	'reporter.ReportEvent micWarning, "regex match", Trim(matches(0).value)
	getAdvSearchColumn = Trim(matches(0).Value)
End Function

Sub verify_advSearch_table(strQuoteID)
	Dim it, numRow, version, counter
	counter = 2
	'numRow = DataTable.GetRowCount
	'awful hack because this for loop will run 11 times for 3 line datatable due to DataTable.GetRowCount returning a long
	numRow = DataTable.Value("AdvSearchIt", "Global")
	For it = 1 To numRow Step 1
		version = DataTable.Value("quoteVersion", "Global")
		verify_advSearch_quoteID strQuoteID, counter
		verify_advSearch_versions version, counter
		DataTable.SetPrevRow
		counter = counter + 1
	Next
	'Always do version 01 at the end
	verify_advSearch_quoteID strQuoteID, counter
	verify_advSearch_versions "01", counter
End Sub

Sub verify_product_table
	Dim it, numRow, productNum, productDesc, productOpt, counter
	counter = 3
	numRow = DataTable.GetRowCount
	For it = 1 To numRow Step 1
		productNum = DataTable.Value("productNum","Global")
		productDesc = DataTable.Value("productDesc","Global")
		productOpt = DataTable.Value("productOpt", "Global")
		verify_prodTable_prodNum productNum, counter
		verify_prodTable_prodDesc productDesc, counter
		verify_prodTable_prodOpt productOpt, counter
		DataTable.SetNextRow
		counter = counter + 1
	Next
End Sub

Function getProductTableColumn(strColumnName)
	dim findCol : findCol = Browser("NGQ").Page("Quote - Line Item Details").WebElement(strColumnName).GetROProperty("class")
	dim matches : set matches = RegexGetMatches(findCol, "(uiGrid-\w{4})", false)
	if matches.Count = 0 then
	    'we failed poi~
	    print "failed"
	end if
	'reporter.ReportEvent micWarning, "regex match", Trim(matches(0).value)
	getProductTableColumn = Trim(matches(0).Value)
End Function

Sub verify_prodTable_prodNum(productNum, intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ProductNumberHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	If actual = productNum Then
		Reporter.ReportEvent micPass, "Verify Product Number", "Verified matching Product Number"
	else
		Reporter.ReportEvent micFail, "Verify Product Number", "Incorrect Product Number found"
	End If
End Sub

Sub verify_prodTable_prodDesc(productDesc, intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ProductDescriptionHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	If actual = productDesc Then
		Reporter.ReportEvent micPass, "Verify Product Description", "Verified matching Product Description"
	else
		Reporter.ReportEvent micFail, "Verify Product Description", "Incorrect Product Description found"
	End If
End Sub

Sub verify_prodTable_prodOpt(productOpt, intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ProductOptionHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	If actual = productOpt Then
		Reporter.ReportEvent micPass, "Verify Option", "Verified matching Option"
	else
		Reporter.ReportEvent micFail, "Verify Option", "Incorrect Product Option"
	End If
End Sub

Function get_prodTable_dealId(intIndex)
	Dim dynCol : dynCol = getProductTableColumn("DealIdHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	get_prodTable_dealId = actual
End Function

Function get_product_number(intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ProductNumberHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	get_product_number = actual
End Function
