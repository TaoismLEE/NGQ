Option Explicit

Function IsRegMatch(patrn,stringA)
	Dim regEx
	Set regEx = new RegExp
	regEx.Pattern = patrn
	regEx.IgnoreCase = False
 	IsRegMatch = regEx.Test(stringA)
	Set regEx = Nothing
End Function

Function GetInvalidproducts()
	Dim intRowCount : intRowCount = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").RowCount
	Dim strProductNum, blnMark, iter, xpath
	Dim arrProduct()
	Dim i : i =1
	For iter = 3 To intRowCount Step 1
		strProductNum = GetUploadProduct(iter)
		xpath = "xpath:=((//DIV[contains(@class, 'product-upload-grid')]/table//tr)[" & iter & "]/td[@ng-class='sortedTD_isValid']//span)[2]"
		Dim strClass : strClass = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").WebElement(xpath).GetROProperty("class")
		Dim blnExist : blnExist = IsRegMatch(".*sprite_icon_warning_red",strClass)
		If blnExist Then
			ReDim preserve arrProduct(i)
			arrProduct(i-1) = strProductNum
			i = i + 1
		End If
	Next
	GetInvalidproducts = arrProduct
End Function

Function GetUploadProduct(intRowIndex)
	Dim xpath : xpath = "xpath:=((//DIV[contains(@class, 'product-upload-grid')]/table//tr)[" & intRowIndex & "]/td[@ng-class='sortedTD_productNumber']//span)[1]"
	Dim strProduct : strProduct = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").WebElement(xpath).GetROProperty("innertext")
	GetUploadProduct = strProduct
End Function

Sub ValidateInvalidProducts(arrProducts)
	Dim i
	For i = 0 To Ubound(arrProducts) - 1 Step 1
		CheckProductWhetherInLineItemDetailPage(arrProducts(i))
	Next
End Sub

Sub CheckProductWhetherInLineItemDetailPage(strProduct)
	Dim dynColProduct : dynColProduct = getProductTableColumn("ProductNumberHeader")
	Dim xpath : xpath = "xpath:=//div[contains(@class,'" & dynColProduct & "')]//span[.='" & strProduct & "']"
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).Exist(1) Then
		logger.report micFail,"Invalid product " & strProduct & " is added to quote","Add invalid product to quote"
	else
		logger.report micPass,"Invalid product " & strProduct & " is NOT added to quote","Test pass"
	End If
End Sub

Sub CheckPAWhetherInLineItemDetailPage(strPA)
	Dim dynColProduct : dynColProduct = getProductTableColumn("PA Number Header")
	Dim xpath : xpath = "xpath:=//div[contains(@class,'" & dynColProduct & "')]//span[.='" & strPA & "']"
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).Exist(1) Then
		logger.report micFail,"PA " & strPA & " is still shown in page","Fail to remove PA"
	else
		logger.report micPass,"PA " & strPA & " is removed successfully","Test Pass"
	End If
End Sub

Sub ValidateValidProducts(arrProducts)
	Dim i
	For i = 0 To Ubound(arrProducts) - 1 Step 1
		CheckProductWhetherInLineItemDetailPage2(arrProducts(i))
	Next
End Sub

Sub CheckProductWhetherInLineItemDetailPage2(strProduct)
	Dim dynColProduct : dynColProduct = getProductTableColumn("ProductNumberHeader")
	Dim xpath : xpath = "xpath:=//div[contains(@class,'" & dynColProduct & "')]//span[.='" & strProduct & "']"
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).Exist(1) Then
		logger.report micPass,"Product " & strProduct & " is added to quote","Add product from bundle to quote"
	else
		logger.report miFail,"Product " & strProduct & " is NOT added to quote","Test Fail"
	End If
End Sub

Sub CheckPAWhetherInLineItemDetailPage2(strPA)
	Dim dynColProduct : dynColProduct = getProductTableColumn("PA Number Header")
	Dim xpath : xpath = "xpath:=//div[contains(@class,'" & dynColProduct & "')]//span[.='" & strPA & "']"
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).Exist(1) Then
		logger.report micPass,"PA " & strPA & " is added to product","Add PA to product"
	else
		logger.report miFail,"PA " & strPA & " is NOT added to product","Test Fail"
	End If
End Sub

'==================================================
' BEGIN Quote
'==================================================
sub Quote_Add()
	Browser("NGQ").Page("Quote").WebElement("Add").Click
end sub

sub Quote_AddProductOrOption()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	wait 2
	UFT.ReplayType = intOriginalReplayType
	Browser("NGQ").Page("Quote").WebElement("Add Product Or Option").Click
end sub
sub Quote_QuickAdd()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	wait 1
	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("Quick Add").Click
	UFT.ReplayType = intOriginalReplayType
end sub



Sub uploadConfigFile(strPath)
	Browser("NGQ").Page("Upload Config").Frame("ConfigFrame").WebElement("UploadConfigBrowse").Click
	Browser("NGQ").Dialog("Choose File to Upload").WinEdit("File name:").Set strPath
	Browser("NGQ").Dialog("Choose File to Upload").WinButton("Open").Click
	Browser("NGQ").Page("Upload Config").Frame("ConfigFrame").WebElement("UploadConfigUpload").Click
End Sub

Sub Quote_UploadConfig(strPath)
	Browser("NGQ").Page("Quote").WebElement("Upload").Object.scrollIntoView
	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("Upload").MouseOver
	UFT.ReplayType = intOriginalReplayType
	wait 1
	Browser("NGQ").Page("Quote").WebElement("UploadConfig").Click
	uploadConfigFile strPath
	Browser("NGQ").Page("Upload Config").Frame("ConfigFrame").WebElement("ProceedImport").Click
	Browser("NGQ").Page("Upload Config").Frame("ConfigFrame").WebElement("ConfigSave").Click
	Browser("NGQ").Page("OCS Config").WebElement("ConvertQuote").Click
End Sub

sub Quote_AdditionalDataTab()
	Browser("NGQ").Page("Quote").WebElement("Additional Data Tab").Click
	Wait 1
end sub

sub Quote_CustomerDataTab()
	Browser("NGQ").Page("Quote").WebElement("Customer Data Tab").Click
	Wait 1
end sub

sub Quote_OpportunityAndQuoteInfoTab()
	Browser("NGQ").Page("Quote").WebElement("Opportunity and Quote Info Tab").Click
	Wait 1
end sub

sub Quote_ShippingDataTab()
	Browser("NGQ").Page("Quote").WebElement("Shipping Data Tab").Click
	Wait 1
end sub

Sub Quote_PricingTermsTab()
	Browser("NGQ").Page("Quote").WebElement("PricingTermsTab").Click
	Wait 1
End Sub

Sub SetValueForPaymentTerm()
	Quote_PricingTermsTab
	Dim strSelectedValue : strSelectedValue = Browser("NGQ").page("Pricing and Terms").weblist("Payment Term").Selection
	If strSelectedValue = "Please Select One" Then
		Browser("NGQ").page("Pricing and Terms").weblist("Payment Term").Select "NT30"
	End If
End Sub

'Author Jesus:
Sub Quote_QuoteOutputTab()
	Browser("NGQ").Page("Quote").WebElement("QuoteOutputTab").Click
	Wait 1
End Sub
Function Quote_currentlySelectedTab(strQuoteTabSelected)
	'validating currently selected quote tab
	Dim strSelectedTab : strSelectedTab = Browser("NGQ").Page("Quote").WebElement("Quote_CurrentlySelectedTab").GetROProperty("innertext")
	if  strSelectedTab = strQuoteTabSelected Then
		Reporter.ReportEvent micPass, "Validate currently selected quote tab","Correct Quote Tab is selected"
	else
		Reporter.ReportEvent micFail, "Validate currently selected quote tab","Incorrect Quote Tab is selected: " + strSelectedTab
	End if
End Function

Sub Quote_save()
	'save quote
	Browser("NGQ").Page("Quote").WebElement("SaveButton").Click
	if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "Successfully Saved Quote!" then
		Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
	else
		Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
	End if
End Sub

Sub VerifySaveButtonColor()
	Dim strColor : strColor = Browser("NGQ").Page("Quote").WebElement("SaveButton").GetROProperty("style/color")
	If strColor = "rgb(255, 255, 255)" Then
		Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
	else
		Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
	End If
End Sub

Sub Quote_save_unverified()
	Browser("NGQ").Page("Quote").WebElement("SaveButton").Click
End Sub

Function Quote_get_quoteNumber()
	Dim quoteID : quoteID = Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext")
	If quoteID <> "New Quote" Then
		Quote_get_quoteNumber = quoteID
		Reporter.ReportEvent micPass, "Get Quote ID", "Successfully Extracted Quote ID"
	else
		Reporter.ReportEvent micDone, "Get Quote ID", "New Quote has no ID"
	End If
End Function

Sub Quote_refreshPricing()
	Utils_scroll_to_refreshPricing
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
	if Browser("NGQ").Page("Quote").WebElement("RefreshPricingMessage").GetROProperty("innertext") = "Refresh Pricing completed" then
		Reporter.ReportEvent micPass, "Refresh Pricing", "Successfully Refreshed Pricing for this Quote"
	else
		Reporter.ReportEvent micFail, "Refresh Pricing","Failed to Refresh Pricing for this Quote"
	End if
End Sub

Sub Utils_scroll_to_refreshPricing()
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Object.scrollIntoView
End Sub

'==================================================
' END Quote
'==================================================
' BEGIN New Quote - Empty fields validations 
'==================================================
function NewQuote_ValidateEmptyQuote(strQuoteNumberID, strQuoteVersion, strQuoteStatus, strQuoteEndDate)
	' Validating Quote Number
	strQuoteNumberID = Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext")
	If strQuoteNumberID = "New Quote" Then
		Reporter.ReportEvent micPass, "Validate empty quote number","QuoteID contains default New Quote text"
	Else
		Reporter.ReportEvent micFail, "Validate empty quote number","QuoteID does not contain default New Quote text"
	End If
	' Validating Quote Version
	strQuoteVersion = Browser("NGQ").Page("Quote").WebElement("quoteVersion").GetROProperty("innertext")
	If strQuoteVersion = "1" Then
		Reporter.ReportEvent micPass, "Validate version 1","New quote version is 1"
	Else
		Reporter.ReportEvent micFail, "Validate version 1","New quote version is not 1"
	End If
	' Validating Quote Name
	If Browser("NGQ").Page("Quote").WebElement("quoteName").Exist Then
		Reporter.ReportEvent micPass, "Validate quate name","Quote Name is empty and pencil icon indicating it is editable"	
	Else
		Reporter.ReportEvent micFail, "Validate quate name","Quote Name is not empty and pencil icon indicating it is editable"
	End If	
	' Validating Quote Status
	strQuoteStatus = Browser("NGQ").Page("Quote").WebElement("quoteStatus").GetROProperty("innertext")
	If strQuoteStatus = "Quote/Configuration Created" Then
		Reporter.ReportEvent micPass, "Valide quote status","Quote Status is Quote/Configuration Created"
	Else
		Reporter.ReportEvent micFail, "Valide quote status","Quote Status is not Quote/Configuration Created"
	End If	
	' Validating Quote Start Date
	If Browser("NGQ").Page("Quote").WebElement("quoteStartDate").Exist Then
		Reporter.ReportEvent micPass, "Validate start date","Start Date is visible"	
	Else
		Reporter.ReportEvent micFail, "Validate start date","Start Date is not visible"
	End If		
	' Validating Quote End Date
	strQuoteEndDate = Browser("NGQ").Page("Quote").WebElement("quoteEndDate").GetROProperty ("innertext")
	If strQuoteEndDate = "(Need Pricing Call)" Then
		Reporter.ReportEvent micPass, "Validate end date","End Date has default - Need Pricing Call - value"
	Else
		Reporter.ReportEvent micFail, "Validate end date","End Date does not have default value"
	End If
End function	
'==================================================
' END New Quote - Empty fields validations 
'==================================================
' BEGIN Quote - Edit quote name
'==================================================
function Quote_EditQuoteName(strQuoteName)
	Browser("NGQ").Page("Quote").WebElement("EditQuoteName").Click
	Browser("NGQ").Page("Quote").WebEdit("EnterQuoteName").Set strQuoteName
End function
'==================================================
' END Quote - Edit quote name
'==================================================
' BEGIN Quote - Additional Data
'==================================================
function AdditionalData_GetReceiptDate()
	AdditionalData_GetReceiptDate = Browser("NGQ").Page("Quote - Additional Data").WebEdit("Receipt Date").Value
end function

sub AdditionalData_SetReceiptDate(strValue)
	'yyyy-MM-dd HH:mm
	Browser("NGQ").Page("Quote - Additional Data").WebEdit("Receipt Date").Set strValue
	'TODO: datepicker
end sub

sub AdditionalData_SetReceiptDateNow()
	Browser("NGQ").Page("Quote - Additional Data").WebEdit("Receipt Date").Click
	Browser("NGQ").Page("DateTime Picker").WebButton("Now").Click
	Browser("NGQ").Page("DateTime Picker").WebButton("Done").Click
end sub
'==================================================
' END Quote - Additional Data
'==================================================
' BEGIN Quote - Customer Data
'==================================================
sub CustomerData_BillToTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Bill To Tab").Click
	Wait 1
end sub

sub CustomerData_SalesContactsTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Sales Contacts Tab").Click
	Wait 1
end sub

sub CustomerData_ShipToTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Ship To Tab").Click
	Wait 1
end sub

sub CustomerData_SoldToTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Sold To Tab").Click
	Wait 1
end sub
Sub CustomerData_ResellerTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("Reseller").Click
	wait 1
End Sub
Sub CustomerData_EndCustomerTab()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("End Customer").Click
	wait 1
End Sub
'==================================================
' END Quote - Customer Data
'==================================================
' BEGIN Quote - Customer Data - Bill To
'==================================================
sub CustomerDataBillTo_DeselectSameAsSoldToAddress()
	Browser("NGQ").Page("Quote - Customer Data - Bill To").WebCheckBox("Same as Sold to Address").UncheckBox
end sub

function CustomerDataBillTo_SameAsSoldToAddressIsSelected()
	CustomerDataBillTo_SameAsSoldToAddressIsSelected = Browser("NGQ").Page("Quote - Customer Data - Bill To").WebCheckBox("Same as Sold to Address").IsChecked
end function

sub CustomerDataBillTo_SelectSameAsSoldToAddress()
	Browser("NGQ").Page("Quote - Customer Data - Bill To").WebCheckBox("Same as Sold to Address").CheckBox
end sub
'==================================================
' END Quote - Customer Data - Bill To
'==================================================
' BEGIN Quote - Customer Data - Ship To
'==================================================
sub CustomerDataShipTo_DeselectSameAsSoldToAddress()
	Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address").UncheckBox
end sub

function CustomerDataShipTo_SameAsSoldToAddressIsSelected()
	CustomerDataShipTo_SameAsSoldToAddressIsSelected = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address").IsChecked
end function

sub CustomerDataShipTo_SelectSameAsSoldToAddress()
	Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address").CheckBox
end sub
'==================================================
' END Quote - Customer Data - Ship To
'==================================================
' BEGIN Quote - LineItemDetails
'==================================================
Sub AddProductsFromTable
	Dim row, rowcount, Iterator
	rowcount = DataTable.GetRowCount
	For Iterator = 1 To rowcount Step 1
		row = DataTable.GetCurrentRow
		LineItemDetails_AddProductByNumber DataTable.Value("productID", "Global"), DataTable.Value("productQty", "Global")
	Next
End Sub

Sub LineItemDetails_AddProductByNumber (productNum, productQty)
	Quote_AddProductOrOption

	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	
	LineItemDetails_SetProductQuantity productQty
	LineItemDetails_SetProductNumber productNum
	UFT.ReplayType = intOriginalReplayType
End Sub

Sub LineItemDetails_AddProductByNumber2(productNum)
	Quote_AddProductOrOption

	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2

	LineItemDetails_SetProductNumber productNum
	UFT.ReplayType = intOriginalReplayType
End Sub

Sub LineItemDetails_AddProductByNumber_manualQtyRow(productNum, productQty, intIndex)
	Quote_AddProductOrOption

	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2

	'LineItemDetails_SetProductNumber productNum
	Dim dynCol : dynCol = getProductTableColumn("QuantityHeader")
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//input[@id='itemQty'])[1]"
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit(xpath).Set productQty
	LineItemDetails_SetProductNumber productNum
	UFT.ReplayType = 1
End Sub

Sub LineItemDetails_SetProductNumber(strValue)
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").HoverTap
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Set strValue
	wait 1
	If not Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Exist Then
		Quote_AddProductOrOption
		Utils_scrollToBottom_lineItemAdd
		Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Set strValue
	End If
End Sub

Sub LineItemDetails_SetProductQuantity(strValue)
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductQty").Set strValue
End Sub

Sub Utils_scrollToBottom_lineItemAdd()
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Object.scrollIntoView
End Sub

'==================================================
' END Quote - LineItemDetails
'==================================================
' BEGIN Quote - "+ Add" button options validation 
'==================================================
function Quote_ValidateAddButtonOptions()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	' Validating Add Line
	If Browser("NGQ").Page("Quote").WebElement("Add Line").Exist(1) Then
		Reporter.ReportEvent micPass, "Validate - Add Line","Add Line option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Add Line","Add Line option is not displayed"
	End If
	' Validating Add Product or Option
	If Browser("NGQ").Page("Quote").WebElement("Add Product or Option").Exist(1) Then
		Reporter.ReportEvent micPass, "Validate - Add Product or Option","Add Product or Option option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Add Product or Option","Add Product or Option option is not displayed"
	End If
	' Validating Add Bundle
	If Browser("NGQ").Page("Quote").WebElement("Add Bundle").Exist(1) Then
		Reporter.ReportEvent micPass, "Validate -Add Bundle","Add Bundle option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Add Bundle","Add Bundle option is not displayed"
	End If	
	' Add Config from OCS
	If Browser("NGQ").Page("Quote").WebElement("Add OCS Config").Exist(1) Then
		Reporter.ReportEvent micPass, "Validate - Add Config from OCS","Add Config from OCS option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Add Config from OCS","Add Config from OCS option is not displayed"
	End If	
	' Search Product(s)
	If Browser("NGQ").Page("Quote").WebElement("Search Product(s)").Exist(1) Then
		Reporter.ReportEvent micPass, "Validate - Search Product","Search Product(s) option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Search Product","Search Product(s) option is not displayed"
	End If	
	' Quick Add
	If Browser("NGQ").Page("Quote").WebElement("Quick Add").Exist(1) Then
		Reporter.ReportEvent micPass, "Validate - Quick Add","Quick Add option is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate - Quick Add","Quick Add option is not displayed"
	End If		
end function
'==================================================
' END Quote - "+ Add" button options validation 
'==================================================
' BEGIN Quote - Add OCS
'==================================================
Sub click_lineitem_add_ocs()
	browser("NGQ").Page("Quote - Line Item Details").WebElement("addButton").Click
	browser("NGQ").Page("Quote - Line Item Details").WebElement("OCSConfig").Click
End Sub
'==================================================
' END Quote - Add OCS 
'==================================================
' BEGIN Quote - OpportunityAndQuoteInfo
'==================================================
function OpportunityAndQuoteInfo_GetOpportunityId()
	OpportunityAndQuoteInfo_GetOpportunityId = Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebEdit("Opportunity ID").Value
end function

sub OpportunityAndQuoteInfo_Import()
	Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebElement("Import").Click
end sub

sub OpportunityAndQuoteInfo_ImportOpportunityId(strValue) 
	OpportunityAndQuoteInfo_SetOpportunityId strValue
	OpportunityAndQuoteInfo_Import
end sub

sub OpportunityAndQuoteInfo_SetOpportunityId(strValue)
	Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebEdit("Opportunity ID").Set strValue
end sub
'Author: Jesus
Sub OpportunityIdIsValid()
	'This subroutine assumes that a valid opportunity id requires the name field to be populated
	Dim strTempContactName : strTempContactName = Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebElement("Opportunity ID Contact Name").GetROProperty("innertext")
	If strTempContactName = "" Then
		Reporter.ReportEvent micFail, "Invalid Opportunity ID", "Invalid Opportunity ID entered.  Fields were not populated"
	Else
		Reporter.ReportEvent micPass, "Valid Opportunity ID", "Valid Opportunity ID Entered"
	End If	
End Sub
'==================================================
' END Quote - OpportunityAndQuoteInfo
'==================================================
' BEGIN Quote - ShippingData
'==================================================
function ShippingData_GetDeliverySpeed()
	ShippingData_GetDeliverySpeed = Browser("NGQ").Page("Quote - Shipping Data").WebList("Delivery Speed").Value
end function

function ShippingData_GetTermsOfDelivery()
	ShippingData_GetTermsOfDelivery = Browser("NGQ").Page("Quote - Shipping Data").WebList("Terms of Delivery").Value
end function

sub ShippingData_SetDeliverySpeed(strValue)
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Delivery Speed").WaitProperty "items count", micGreaterThan(1), 5000
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Delivery Speed").SelectByText strValue
end sub

sub ShippingData_SetTermsOfDelivery(strValue)
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Terms of Delivery").WaitProperty "items count", micGreaterThan(1), 5000
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Terms of Delivery").Click
	Browser("NGQ").Page("Quote - Shipping Data").WebList("Terms of Delivery").SelectByText strValue
end sub
'==================================================
' END Quote - ShippingData
'==================================================
' BEGIN Quote - Search
'==================================================
'Deprecated - Use newly written advanced search functions
'function AdvancedSearch(strQuoteNumber)
'	Browser("name:=Home").Page("title:=Home").WebEdit("xpath:=//DIV[@id=""Form""]/DIV[2]/FORM[1]/DIV[1]/DIV[1]/INPUT[1]").Set strQuoteNumber
'end function

function QuickSearch(strQuoteNumber)
	Browser("NGQ").Page("QuickSearch").WebEdit("QuoteNumber").Set strQuoteNumber
end function

sub QuickSearch_Search()
	Browser("NGQ").Page("QuickSearch").WebElement("Search").Click
end sub

sub SelectResult_Search(strQuoteNumber)
	Browser("NGQ").Page("AdvancedSearch").Link("SelectResult","innertext:="&strQuoteNumber).Click
	wait 4
end sub

''==================================================
' BEGIN Quote - LineItemDetails - Validation Product that doesn’t exist in Corona
'==================================================
'Validate Product that doesn’t exist in Corona
Sub LineItemDetails_ValidateProductNonExist(strQuoteNumber) '*** Edited September 26 Karina***
	Dim actual : actual = Browser("NGQ").Page("Quote").WebElement("WarningMessage").GetROProperty("innertext")
	If actual = "Item " & strQuoteNumber & " not found in corona for country=US currency=USD Incoterm=DP" Then
		Reporter.ReportEvent micPass, "Validate Product that doesn’t exist in Corona","A warning message is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate Product that doesn’t exist in Corona","Warning message is not displayed or there are other error messages"
	End If
	If Browser("NGQ").Page("Quote").WebElement("XMark").Exist(1) Then
    	Browser("NGQ").Page("Quote").WebElement("XMark").Click
    End If
end Sub
'Validate font color to product that doesn’t exist in Corona
Sub LineItemDetails_ValidateProductNonExistFontColor(intIndex, strvalue) '*** Edited September 26 Karina***
	Dim dynCol : dynCol = getProductTableColumn("ProductNumberHeader")
	Dim strDynCol : strDynCol = getProductTableColumn("ProductDescriptionHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	Dim xpath2 : xpath2 = "xpath:=(//div[contains(@class,'" & strDynCol & "')])[" & intIndex & "]/span"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("style/color")
	Dim actualDesc : actualDesc = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath2).GetROProperty("style/color")
	If actual = "rgb(255, 0, 0)" and actualDesc = "rgb(255, 0, 0)" Then
		Reporter.ReportEvent micPass, "Validate font color to product that doesn’t exist in Corona","Entire line is Red"	
	Else
		Reporter.ReportEvent micFail, "Validate font color to product that doesn’t exist in Corona","Entire line is not Red"
	End If	
End Sub
'==================================================
' END Quote - LineItemDetails - Validation Products that doesn’t exist in Corona
'==================================================
' BEGIN Quote - LineItemDetails - Validation Obsolete Product 
'==================================================
'Validate Obsolete Product
Sub LineItemDetails_ValidateProductObsolete(strQuoteNumber) '*** Edited September 26 Karina***
	Dim actual : actual = Browser("NGQ").Page("Quote").WebElement("WarningMessage").GetROProperty("innertext")
	If actual = "Obsolete Product: More" Then
		Reporter.ReportEvent micPass, "Validate Obsolete Product","A warning message is displayed"	
	Else
		Reporter.ReportEvent micFail, "Validate Obsolete Product","Warning message is not displayed or there are other error messages"
	End If
end Sub
'Validate font color to obsolete product
Sub LineItemDetails_ValidateProductObsoleteFontColor(intIndex, strvalue) '*** Edited September 26 Karina***
	Dim dynCol : dynCol = getProductTableColumn("ProductNumberHeader")
	Dim strDynCol : strDynCol = getProductTableColumn("ProductDescriptionHeader")
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "])/descendant::span[.='" & strvalue & "' and starts-with(@class,'ng-binding')]"
	Dim xpath2 : xpath2 = "xpath:=(//div[contains(@class,'" & strDynCol & "')])[" & intIndex & "]/span"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("style/color")
	dim actualDesc : actualDesc = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath2).GetROProperty("style/color")
	If actual = "rgb(255, 0, 0)" and actualDesc = "rgb(0, 0, 255)" Then
		Reporter.ReportEvent micPass, "Validate font color to obsolete product","Product number color is Red and Description font is Blue"
	Else
		Reporter.ReportEvent micFail, "Validate font color to obsolete product","Font color is not right"
	End If	
End Sub
'Validate valid product font color
Sub LineItemDetails_ValidateValidProductFontColor(intIndex, strvalue) '*** Edited September 26 Karina***
	Dim dynCol : dynCol = getProductTableColumn("ProductNumberHeader")
	Dim strDynCol : strDynCol = getProductTableColumn("ProductDescriptionHeader")
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "])/descendant::span[.='" & strvalue & "' and starts-with(@class,'ng-binding')]"
	Dim xpath2 : xpath2 = "xpath:=(//div[contains(@class,'" & strDynCol & "')])[" & intIndex & "]/span"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("style/color")
	dim actualDesc : actualDesc = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath2).GetROProperty("style/color")
	If actual = "rgb(0, 0, 255)" and actualDesc = "rgb(0, 0, 255)" Then
		Reporter.ReportEvent micPass, "Validate font color to valid product","Entire line is blue"
	Else
		Reporter.ReportEvent micFail, "Validate font color to valid product","Entire line is not blue"
	End If	
End Sub
'Validate font color of product in bundle
Sub LineItemDetails_ValidateBundleProductFontColor(intIndex, strvalue) '*** Edited September 26 Karina***
	Dim dynCol : dynCol = getProductTableColumn("ProductNumberHeader")
	Dim strDynCol : strDynCol = getProductTableColumn("ProductDescriptionHeader")
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "])//span"
	Dim xpath2 : xpath2 = "xpath:=(//div[contains(@class,'" & strDynCol & "')])[" & intIndex & "]/span"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("style/color")
	dim actualDesc : actualDesc = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath2).GetROProperty("style/color")
	If actual = "rgb(0, 0, 0)" and actualDesc = "rgb(0, 0, 0)" Then
		Reporter.ReportEvent micPass, "Validate font color to product in bunle","Entire line is black"
	Else
		Reporter.ReportEvent micFail, "Validate font color to product in bunle","Entire line is not black"
	End If	
End Sub

Sub Quote_SearchProductNoQualifiedDataValidation()
		Dim actual : actual = Browser("NGQ").Page("Quote - Search Product").WebElement("NoQualifiedData").GetROProperty("innertext")
		If actual = "No qualified data for the search criteria!" Then
			Reporter.ReportEvent micPass, "Validate - Search Product(s)- No Qualified Data","Warning message is displayed at the top saying - No qualified data for the search criteria!-"	
		Else
			Reporter.ReportEvent micFail, "Validate - Search Product(s)- No Qualified Data","Warning message is not displayed"	
		End If
end Sub

Sub Quote_SearchProductRemoveItem(intIndex) '*** Edited September 23 Karina*** 
	'Remove product B
	Dim xpath : xpath = "xpath:=(//table[@id='product-search-basket-table']/tbody/tr)[" & intIndex & "]/td/span[contains(@class,'icon-trash')]"
	Browser("NGQ").Page("Quote - Search Product").WebElement(xpath).Click
End Sub

Sub CheckItemRemoved(strProductNumber)
	Dim xpath : xpath = "xpath:=//table[@id='product-search-basket-table']//td[.='" & strProductNumber & "']"
	if Not Browser("NGQ").Page("Quote - Search Product").WebElement(xpath).Exist(1) then
		logger.Report micPass, "The item has been removed successfully", "Removed"
	else
		logger.Report micFail, "Failed to remove product", "Failed"
	End if
End Sub


Sub Quote_SearchProductAddProductsToQuoteValidation() '*** Edited September 23 Karina***
	Dim actual : actual = Browser("NGQ").Page("Quote").WebElement("SuccessMessage").GetROProperty("innertext")
	If actual = "Products added." Then
		Reporter.ReportEvent micPass, "Validate add products from Search Product(s)","Confirmation message is displayed at the top saying - Products added -"
	Else
		Reporter.ReportEvent micFail, "Validate add products from Search Product(s)","Confirmation message is not  displayed"	
	End If	
End Sub

' Validate Customize Output button - Unavailable
Sub QuoteOutput_ValidateCustomizeOutputButtonUnavailable()
	Dim actual : actual = Browser("NGQ").Page("Quote - Output Quote").WebElement("CustomizeOutputDisabled").GetROProperty("class")
	If instr(actual, "btn-disabled") <> 0 Then
		Reporter.ReportEvent micPass, "Validate the Customize Output button","Customize Output button is gray and unavailable"
	Else
		Reporter.ReportEvent micFail, "Validate the Customize Output button","Customize Output button is available"	
	End If
End Sub

Sub QuoteOutput_ValidateCustomizeOutputButtonAvailable
	Dim actual : actual = Browser("NGQ").Page("Quote - Output Quote").WebElement("CustomizeOutputDisabled").GetROProperty("class")
	If instr(actual, "btn-disabled") = 0 Then
		Reporter.ReportEvent micPass, "Validate the Customize Output button","Customize Output button is gray and unavailable"
	Else
		Reporter.ReportEvent micFail, "Validate the Customize Output button","Customize Output button is available"	
	End If
End Sub

Sub QuoteOutput_CustomizeOutputButton
	Browser("NGQ").Page("Quote - Output Quote").WebElement("CustomizeOutputDisabled").Click
End Sub

Sub QuoteOutput_VerifyOD1Suppressed
	If Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("OD1Suppressed").IsChecked Then
		Reporter.ReportEvent micPass, "0D1 Supression Option","0D1 Suppression enabled by default"
	Else
		Reporter.ReportEvent micFail, "0D1 Supression Option","0D1 Suppresssion not enabled by default"	
	End If
End Sub

Sub QuoteOutput_ValidateOutputTypeButtonOptions()
	Dim actual : actual = Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").AllItems
	' &_ is multiline continuation operator
	Dim options : options = "Extended Net Price by item with estimated delivery;" &_
				"Extended Net Price by item with estimated delivery (No Price breakdown);" &_
				"Extended Net Price by item with list price and estimated delivery.;" &_
				"Extended Net Price by item with list price and estimated delivery (No Price breakdown);" &_
				"No list or extended list displayed. Line item descriptions with estimated delivery only and Grand Total;" &_
				"No list or extended list displayed. Line item descriptions with estimated delivery only and Grand Total (No Price breakdown);" &_
				"Dynamic Landscape template;" &_
				"Dynamic Portrait template"
	If actual = options Then
		Reporter.ReportEvent micPass, "Validate - Output Type Options ","Nine options are displayed correctly"	
	Else
		Reporter.ReportEvent micFail, "Validate - Output Type Options ","Nine options are not displayed correctly"
	End If
End sub

Sub QuoteOutput_SaveCustomizeOutput
	Browser("NGQ").Page("Quote - Output Quote").WebElement("CustomizeOutputSave").Click
End Sub

Sub CustomerData_ValidateCustomerID(intCustomerID)
	Dim actual : actual = Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("CustomerID").GetROProperty("innertext")
	If actual = intCustomerID Then
		reporter.ReportEvent micPass, "Verify Customer ID", "Customer ID field populated with correct customer ID"
	else
		reporter.ReportEvent micFail, "Verify Customer ID", "Customer ID field did not populate with correct customer ID"
	End If
End Sub

Sub lineItemDetails_changeView(strView)
	Browser("NGQ").Page("Quote - Line Item Details").WebList("ChooseView").Select strView
End Sub

Sub lineItemDetails_LooseItemVerification(strPartNum, strPartDesc, intRowNum)
	verify_prodTable_prodNum strPartNum, intRowNum
	verify_prodTable_prodDesc strPartDesc, intRowNum
	Dim dynCol : dynCol = getProductTableColumn("SolutionIDHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intRowNum & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	If actual = "" Then
		Reporter.ReportEvent micPass, "Verify Empty Solution ID", "Verified Loose Item"
	else
		Reporter.ReportEvent micFail, "Verify Empty Solution ID", "Not a loose item"
	End If
End Sub

Sub lineItemDetails_SolutionIDAsc()
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("SolutionIDHeaderSort").Click
	wait 1
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("SolutionIDHeaderSort").Click
End Sub

Sub lineItemDetails_resetGrid()
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("ResetGrid").Click
End Sub
'==================================================
' END ANA API SECTION
'==================================================
'==================================================
' BEGIN ValidatePriceRefreshed
' Author Jesus
'==================================================
Sub ValidatePriceRefreshed()
	If Browser("NGQ").Page("Quote").WebElement("RefreshPricingMessage").CheckProperty ("innertext", MicRegExpMatch(".*Refresh Pricing completed.*")) Then
		Reporter.ReportEvent micPass, "Price refreshed successfully", "Refresh Pricing completed found"
	Else
		Reporter.ReportEvent micFail, "Price did not refreshed successfully", "Refresh Pricing completed not found"
	End If
End Sub
'==================================================
' END ValidatePriceRefreshed
'==================================================
' BEGIN SelectExtraMenu
' Author Jesus
'==================================================
Sub SelectExtraMenu()
	Browser("NGQ").Page("Quote - Extra Menu").WebElement("Triangle Hidden Menu Button").MouseOver
End Sub
'==================================================
' END SelectExtraMenu
'==================================================
' BEGIN SelectPreValidate
' Author Jesus
'==================================================
Sub SelectPreValidate()
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	SelectExtraMenu
	Browser("NGQ").Page("Quote - Extra Menu").WebElement("Pre-Validate").Click
	UFT.ReplayType = strOriginType
End Sub


'==================================================
' END SelectPreValidate
'==================================================
' BEGIN PreValidate_FixDataCheckErrors
' Author Jesus
'==================================================
Sub PreValidate_FixDataCheckErrors()
	Quote_AdditionalDataTab
	AdditionalData_SetReceiptDateNow
	
	Quote_ShippingDataTab
	ShippingData_SetDeliverySpeed "Standard"
	ShippingData_SetTermsOfDelivery "Carriage Paid To"
	
	'Fix errors in price tab
	Quote_CustomerDataTab
	CustomerData_ShipToTab
	If Not CustomerDataShipTo_SameAsSoldToAddressIsSelected Then
		CustomerDataShipTo_SelectSameAsSoldToAddress
	End If
End Sub

Sub PreValidate_DataCheckNoErrors()
	If Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Data Check Btn").Exist(1) Then
		Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Data Check Btn").Click
		wait 2
		Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Data Check Btn")
		PreValidate_ButtonVerification(objButton)	
	End If
End Sub

Sub PreValidate_ProductCheckNoErrors()
	If Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Product Check Btn").Exist(1) Then
		Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Product Check Btn").Click
		wait 5
		Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Product Check Btn")
		PreValidate_ButtonVerification(objButton)
	End If
End Sub


Sub PreValidate_ClicNoErrors()
	If Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Clic Btn").Exist(1) Then
		Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Clic Btn").Click
		wait 2
		Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Clic Btn")
	'TEMP WORKAROUND FOR CLIC SERVICE UNAVAILABLE
	'Reporter.ReportEvent micDone, "Step not in script", "This step is not in the test case, but it is required to remove the errors from CLIC section.  It overrides the error in this screen."
		If PreValidate_DefaultButtonColor(objButton) Then
			Browser("NGQ").Page("Quote - Pre-Validation").WebEdit("Override Reason Text").Set "Test"	
			Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Custom Config Check Btn").Click
			wait 2
			Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Clic Btn")
		End If	
		PreValidate_ButtonVerification(objButton)
	End If
End Sub

Sub PreValidate_PriceNoErrors()
	If Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Price Btn").Exist(1) Then
		Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Price Btn").Click
		wait 2
		Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Price Btn")
		PreValidate_ButtonVerification(objButton)
	End If
End Sub

Sub PreValidate_BundleNoErrors()
	If Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Bundle Btn").Exist(1) Then
		Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Bundle Btn").Click
		wait 2
		Dim objButton : Set objButton = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Bundle Btn")
		PreValidate_ButtonVerification(objButton)	
	End If
End Sub

Sub PreValidate_CloseValidationPage()
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Close Validation Page Btn").Click
End Sub

Sub PreValidate_ClickCompleteQuote()
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Complete Quote Btn").Click
	wait 2
	PreValidate_ValidateCompleteQuote
End Sub

Function PreValidate_DefaultButtonColor(objButton)
	Dim strButtonColor : strButtonColor = objButton.Object.currentStyle.backgroundColor 
	If strButtonColor = "#01a982" Then
		PreValidate_DefaultButtonColor = True
	else
		PreValidate_DefaultButtonColor = False
	End If
End Function

Sub PreValidate_ButtonVerification(objButton)
	Dim bcolor
	Dim blnCheckMark

	bcolor = objButton.Object.currentStyle.backgroundColor	
	If bcolor = "#767676" Then
		Logger.Report micPass, "Button is gray", "The " & objButton.GetTOProperty("TestObjName") & " is gray with a value of " & bcolor
	Else
		Logger.Report micFail, "Button is not gray", "The " & objButton.GetTOProperty("TestObjName") & " is no gray. It has a value of " & bcolor
		ExitTest
	End If

	blnCheckMark = objButton.CheckProperty("innerhtml", MicRegExpMatch(".*class="".*load_right"".*"))	
	If blnCheckMark Then
		Logger.Report micPass, "Button has checkmark", "The " & objButton.GetTOProperty("TestObjName") & " has a checkmark"
	Else
		Logger.Report micFail, "Button doe not have a checkmark", "The " & objButton.GetTOProperty("TestObjName") & " does not have a checkmark"
		ExitTest
	End If
End Sub

Sub PreValidate_ValidateCompleteQuote()
	If Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Complete Quote Results").Exist(10) Then
		'TODO Jesus: Verify w/ business the correct message
		If Not Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Complete Quote Results").CheckProperty("innertext", MicRegExpMatch(".*QUOTE SUCESSFULLY UPDATED INTO IDS DB")) Then
			Logger.Report micFail, "Message not Displayed", "The results section does not display ""QUOTE SUCESSFULLY UPDATED INTO INS DB"""
			ExitTest
		Else
			Logger.Report micPass, "Message Displayed", "The results section displays ""QUOTE SUCESSFULLY UPDATED INTO INS DB"""
		End If
	Else
		Logger.Report micFail, "Message cannot be found", "The result message in ""Complete Quote"" cannot be found"
		ExitTest
	End If
End Sub

Function OutputQuote_GetOutputType()
	OutputQuote_GetOutputType = Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").Value
end Function

Sub OutputQuote_SetOutputType(strValue)	
	Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").WaitProperty "items count", micGreaterThan(1), 5000
	Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").SelectByText strValue
end Sub

Sub OutputQuote_ClickPreview
	Browser("NGQ").Page("Quote - Output Quote").WebElement("Preview Btn").Click
End Sub

'TODO Jesus: Check if scripts work without these functions.  Function with same names exist
'Sub OutputQuote_SaveQuotePdf(strQuoteNum)
'	Dim strSavePath
'	strSavePath = CreateSavePath(strQuoteNum)
'	SavePdfAs strSavePath
'	DataTable.GlobalSheet.AddParameter "OutputFilePath", strSavePath
'End Sub

'Function CreateSavePath(strQuoteNum)
'	Dim strCreatedPath
'	strCreatedPath = Environment.Value("TestDir") + "\" + strQuoteNum + ".pdf"
'	CreateSavePath = strCreatedPath
'End Function

Sub SavePdfAs(strPath)
	Browser("NGQ").WinObject("Save Bar").WinButton("Save Drop Down Menu").Click
	Browser("NGQ").WinObject("Save Bar").WinMenu("Save Drop Down Menu").Select "Save as"
	Browser("NGQ").Dialog("Save As").WinEdit("File name:").Set strPath
	Browser("NGQ").Dialog("Save As").WinButton("Save").Click
End Sub
	' BEGIN QuoteServices - Options - Claim
	'==================================================
	function QuoteServices_Claim()
		'Use this function if you'll work with QuoteNumber = NI00147520
		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Ok","xpath:=//DIV[@id=""Claim_meg""]/DIV[2]/A[1]").Click
		wait 3
	end function
	'==================================================
	' END QuoteServices - Options - Claim	
	'==================================================	
	' BEGIN QuoteServices - Options - CustomGroup
	'==================================================
	' DEPRECATED DONT USE
'	function QuoteServices_AddCustomGroup(strGroupLabel, strGroupSummary)
'		'Add Custom Group
'		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Add Custom Group","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[1]/DIV[1]/A[1]").Click
'		'Complete form to add
'		Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupLabel","xpath:=//INPUT[@id=""groupLabel""]","index:=0").Set strGroupLabel
'		Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupSummary","xpath:=//TEXTAREA[@id=""groupSummary""]","index:=0").Set strGroupSummary
'		'Save Custom Group
'		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Save","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/DIV[1]/DIV[1]/DIV[3]/A[1]").Click
'		'Validation
'		If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is inserted successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
'			Reporter.ReportEvent micPass, "Add Custom Group","Custom Group was added correctly"
'		Else
'			Reporter.ReportEvent micFail, "Add Custom Group","Custom Group was NOT added correctly"
'		End If		
'	end function
'	
'	sub QuoteServices_EditCustomGroup(strGroupLabelEdited, strGroupSummaryEdited)
'		Browser("name:=Home.*").Page("title:=Home.*").Image("title:=Edit","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/TABLE[1]/TBODY[1]/TR[9]/TD[1]/A[1]/IMG[1]").Click 
'		'Edit Custom Group Information
'		Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupLabel","xpath:=//INPUT[@id=""grouplabeledit""]","index:=0").Set strGroupLabelEdited
'		Browser("name:=Home.*").Page("title:=Home.*").WebEdit("name:=groupSummary","xpath:=//TEXTAREA[@id=""gropsummaryedit""]","index:=0").Set strGroupSummaryEdited
'		'Update Custom Group
'		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Update","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/DIV[2]/DIV[3]/A[1]").Click
'		'Validation
'		If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is updated successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
'			Reporter.ReportEvent micPass, "Edit Custom Group","Custom Group was edited correctly"
'		Else
'			Reporter.ReportEvent micFail, "Edit Custom Group","Custom Group was NOT edited correctly"
'		End If
'	end sub
'	
'	sub QuoteServices_RemoveCustomGroup()
'		Browser("name:=Home.*").Page("title:=Home.*").Image("title:=Del","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[2]/FORM[1]/TABLE[1]/TBODY[1]/TR[9]/TD[1]/A[2]/IMG[1]").Click
'		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Yes","xpath:=//DIV[@id=""UsrPrfnceCustom_group""]/DIV[2]/A[1]").Click
'		'Validation
'		If Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Record is deleted successfully.","xpath:=//DIV[2]/DIV[8]/DIV[1]").Exist then
'			Reporter.ReportEvent micPass, "Remove Custom Group","Custom Group was removed correctly"
'		Else
'			Reporter.ReportEvent micFail, "Remove Custom Group","Custom Group was NOT removed correctly"
'		End If 		
'		'Close Custom Group
'		Browser("name:=Home.*").Page("title:=Home.*").WebElement("innertext:=Close","xpath:=//DIV[@id=""customer_group""]/CUSTOM-GROUP[1]/DIV[1]/DIV[3]/A[1]").Click
'	end sub	
	'==================================================	
	' END QuoteServices - Options - CustomGroup
	'==================================================
	' BEGIN Quotes  - Pricing and Terms Tab
	'==================================================
	Sub verify_price_quality_band()
		If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").Exist Then
			Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands exist"
		else
			Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands failed to load"
		End If
	End Sub
	
Sub applyEmpowerment(eType)
	Dim row, actual, rowcount, Iterator, xpath, index, dynCol
	Select Case eType
		Case "Preferred"
			reset_DataTable
			Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyPreferredEmpower").Click
			If Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Exist Then
				Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Click
			End If
			rowcount = DataTable.GetRowCount
			For Iterator = 1 To rowcount Step 1
				row = DataTable.GetCurrentRow
				'actual = Browser("NGQ").Page("Pricing and Terms").WebElement("TotalRequestedDiscount","index:="&Iterator).GetROProperty("innertext")
				'index = Iterator + 1
				'dynCol = findTableColumn("Total Requested Discount")
				xpath = "xpath:=(//div[@id='thresholdLocation']//span[@title='Total Requested Discount'])[" & Iterator & "]"
				actual = Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).GetROProperty("innertext")
				If actual = DataTable("Preferred") Then
					Reporter.ReportEvent micPass, "Verify Updated Empowerment Pricing", "Verified Correct Empowerment Discount"
				else
					Reporter.ReportEvent micFail, "Verify Updated Empowerment Pricing", "Incorrect Empowerment Discount " & actual & " returned"
				End If
				row = DataTable.SetNextRow
			Next
		Case "Personal"
			reset_DataTable
			Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyPersonalEmpowerment").Click
			If Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Exist Then
				Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Click
			End If
			rowcount = DataTable.GetRowCount
			For Iterator = 1 To rowcount Step 1
				row = DataTable.GetCurrentRow
				'actual = Browser("NGQ").Page("Pricing and Terms").WebElement("TotalRequestedDiscount","index:="&Iterator).GetROProperty("innertext")
				'index = Iterator + 1
				'dynCol = findTableColumn("Total Requested Discount")
				xpath = "xpath:=(//div[@id='thresholdLocation']//span[@title='Total Requested Discount'])[" & Iterator & "]"
				actual = Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).GetROProperty("innertext")
				If actual = DataTable("Personal") Then
					Reporter.ReportEvent micPass, "Verify Updated Empowerment Pricing", "Verified Correct Empowerment Discount"
				else
					Reporter.ReportEvent micFail, "Verify Updated Empowerment Pricing", "Incorrect Empowerment Discount " & actual & " returned"
				End If
				row = DataTable.SetNextRow
			Next
		Case "Manager"
			reset_DataTable
			Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyManagerEmpowerment").Click
			If Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Exist Then
				Browser("NGQ").Page("Pricing and Terms").WebElement("ExistingDealRemoveAlert").Click
			End If
			rowcount = DataTable.GetRowCount
			For Iterator = 1 To rowcount Step 1
				row = DataTable.GetCurrentRow
				'actual = Browser("NGQ").Page("Pricing and Terms").WebElement("TotalRequestedDiscount","index:="&Iterator).GetROProperty("innertext")
				'index = Iterator + 1
				'dynCol = findTableColumn("Total Requested Discount")
				xpath = "xpath:=(//div[@id='thresholdLocation']//span[@title='Total Requested Discount'])[" & Iterator & "]"
				actual = Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).GetROProperty("innertext")
				If actual = DataTable("Manager") Then
					Reporter.ReportEvent micPass, "Verify Updated Empowerment Pricing", "Verified Correct Empowerment Discount"
				else
					Reporter.ReportEvent micFail, "Verify Updated Empowerment Pricing", "Incorrect Empowerment Discount " & actual & " returned"
				End If
				row = DataTable.SetNextRow
			Next
		Case "MCC"
			reset_DataTable
			rowcount = DataTable.GetRowCount
			For Iterator = 1 To rowcount Step 1
				row = DataTable.GetCurrentRow
				'index = Iterator + 1
				'dynCol = findTableColumn("Total Requested Discount")
				xpath = "xpath:=(//div[@id='thresholdLocation']//span[@title='Total Requested Discount'])[" & Iterator & "]"
				
				'INSERT COLUMN FIX
				If Not(Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).Exist(1)) Then
					Browser("NGQ").Page("Quote").WebElement("AddCols").Click
				    Browser("NGQ").Page("Quote").WebElement("RequestedDiscount").Click
				End If
				
				actual = Browser("NGQ").Page("Pricing and Terms").WebElement(xpath).GetROProperty("innertext")
				If actual = DataTable("MCCDiscount") Then
					Reporter.ReportEvent micPass, "Verify Updated MCC Pricing", "Verified Correct MCC Discount"
				else
					Reporter.ReportEvent micFail, "Verify Updated MCC Pricing", "Incorrect MCC Discount " & actual & " returned"
				End If
				row = DataTable.SetNextRow
			Next
	End Select
End Sub

Function findTableColumn(strColumnName)
	dim findCol : findCol = Browser("NGQ").Page("Quote - Line Item Details").WebElement(strColumnName).GetROProperty("class")
	dim matches : set matches = RegexGetMatches(findCol, "\s{1}(col[0-9]+)\s{1}", false)
	if matches.Count = 0 then
	    'we failed poi~
	    print "failed"
	end if
	findTableColumn = Trim(matches(0).Value)
End Function

Sub reset_DataTable()
	Dim it, curRow, numRow
	numRow = DataTable.GetRowCount
	For it = numRow To 1 Step -1
		DataTable.SetPrevRow
	Next
End Sub

Sub lineItemDetails_addColumn(optColumn)
	Utils_scrollToBottom_lineItemAddColumn
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("LineItemDetailsAddColumns").Click
	Dim index
	Select Case optColumn
		Case "Pricing_Source"
			index = "34"
		Case "Source_ID"
			index = "36"
	End Select
	Dim xpath : xpath = "xpath:=//input[@id='SHM" & index & "']"
	Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).Click
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("LineItemDetailsAddColumns").Click
End Sub

Sub lineItemDetails_verifyPricingSource()
	reset_DataTable
	Utils_scrollRight_lineItemTableColumn
	dim rowcount : rowcount = DataTable.GetRowCount
	Dim Iterator,xpath,actual, row, index
	For Iterator = 1 To rowcount Step 1
		row = DataTable.GetCurrentRow
		index = Iterator + 1
		actual = Trim(Browser("NGQ").Page("Pricing and Terms").WebElement("xpath:=//div[contains(concat(' ',@class,' '),' ngCell ') and contains(concat(' ',@class,' '),' colt34 ')]").UpdateIndex(Iterator).InnerText)
		If actual = DataTable("Pricing_Source") Then
			Reporter.ReportEvent micPass, "Verify Pricing_Source", "Verified Correct Pricing_Source"
		else
			Reporter.ReportEvent micFail, "Verify Pricing_Source", "Incorrect Pricing_Source " & actual & " returned"
		End If
		row = DataTable.SetNextRow
	Next
End Sub

Sub Utils_scrollToBottom_lineItemAddColumn()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
End Sub

Sub Utils_scrollRight_lineItemTableColumn()
	dim myElement : Set myElement = Description.Create
	myElement("micclass").value = "WebElement"
	myElement("class").Value = "col"
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("LineItemDetailTableHeader").ChildObjects(myElement).Count
End Sub

Sub requestOPDisc_MCC(strMCCDisc)
	Browser("NGQ").Page("Pricing and Terms").WebList("ReqOpDiscMCC").Select strMCCDisc
End Sub

Sub requestOPDisc_OffApp(boolapproval)
	If boolapproval Then
		Browser("NGQ").Page("Pricing and Terms").WebElement("ReqOpDiscOffAppTrue").Click
	else
		'Browser("NGQ").Page("Pricing and Terms").WebElement("ReqOpDiscOffAppFalse").Click
		'Javascript hack because UFT is unable to click the No radio button, it will always click Yes.
		Browser("NGQ").Page("Pricing and Terms").RunScript "document.getElementsByName('mccCode72')[1].click()"
	End If
End Sub

Sub requestOPDisc_discType(strDiscType)
	Browser("NGQ").Page("Pricing and Terms").WebList("ReqOpDiscType").Select strDiscType
End Sub

Sub requestOPDisc_valueType(strValueType)
	Browser("NGQ").Page("Pricing and Terms").WebList("ReqOpDiscValueType").Select strValueType
End Sub

Sub RequestOPDisc_percentage(strPercentage)
	Browser("NGQ").Page("Pricing and Terms").WebList("ReqOpDiscPercent").Select strPercentage
End Sub

Sub RequestOPDisc_amount(strAmount)
	Browser("NGQ").Page("Pricing and Terms").WebEdit("ReqOpDiscAmt").Set strAmount
End Sub

Sub RequestOPDisc_Submit()
	Browser("NGQ").Page("Pricing and Terms").WebElement("ReqOpDiscSubmit").Click
End Sub

Sub RequestOPDisc(strMCCType, boolAppType, strDiscType, strValueType, strPercentage, strAmount, strMCCNum)
	Utils_scrollToBottom_lineItemAddColumn
	requestOPDisc_MCC strMCCType
	requestOPDisc_OffApp boolAppType
	requestOPDisc_discType strDiscType
	requestOPDisc_valueType strValueType
	RequestOPDisc_percentage strPercentage
	RequestOPDisc_amount strAmount
	RequestOPDisc_Submit
	MCC_success_message strMCCNum
End Sub

Sub MCC_success_message(strMCCNum)
	if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "Mcc " & strMCCNum & " added. This removed all other mccs from line items. Please request special price." then
		Reporter.ReportEvent micPass, "Save Operator Discount Request","Operator Discount Request Successfully Saved"
	else
		Reporter.ReportEvent micFail, "Save Operator Discount Request","Operator Discount Request didn't save"
	End if
End Sub

Function get_grand_total()
	get_grand_total = Browser("NGQ").Page("Quote").WebElement("GrandTotal").GetROProperty("innertext")
End Function

'=========ROSALES Start
'========================
'Start US9430_01================================================= Alejandro Rosales
'Set Opportunity Id in QUICK SEARCH 
sub SetOpportunityId(strOpportunityId)
	Browser("NGQ").Page("Home").WebEdit("Quick OpportunityId").Set strOpportunityId
End sub

Sub ClickNavbarAdvancedSearch()
	Browser("NGQ").Page("Home").WebElement("Navbar_AdvancedSearch").Click
End Sub

'validate the Opportunity Id in advanced Search 
sub Validate_OpportunityId_AdvancedSearch(strOpportunityId)
MoveScrollBarToRight()
wait(2)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("validate Opportunity Id").Exist Then
		Dim strValidateOpportunityId : strValidateOpportunityId = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("validate Opportunity Id").GetROProperty("innertext")
			If strValidateOpportunityId = strOpportunityId Then
				Reporter.ReportEvent micPass, "Validate Opportunity Id","Opportunity ID(s) exist in the table"		
			Else
				Reporter.ReportEvent micFail, "Validate Opportunity Id","Opportunity ID(s) not exist in the table"	
			End If
	End If	
MoveScrollBarToLeft()	
End sub

'Click the reset button in Advanced Search
sub ClickResetButton_advancedSearch()
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("ResetButton").Click
End sub

'Click SearchButton in Advanced mode 
sub ClickSearchButton_advancedSearch()

	Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("SearchButton").Click
End sub

'Function to fill Quote Number 
sub QuoteNumber_AdvancedSearch(quoeteNumber)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Quote Number").Set quoeteNumber
End sub

'Function that verify the Quote Number
sub Validate_QuoteNumer_AdvancedSearch(quoteNumber)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Quote Number").Exist Then
	Dim strValidateQuoteNumber : strValidateQuoteNumber = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Quote Number").GetROProperty("innertext")
		If strValidateQuoteNumber = quoteNumber Then
			Reporter.ReportEvent micPass, "Validate Quote Number","Quote(s) Number Exist in the table"				
		Else
			Reporter.ReportEvent micFail, "Validate Quote Number","Quote(s) Number not Exist in the table"	
		End if
	End If
End sub

'funtion that fill the MDCP ID 
sub MDCPIdAdvancedSearch(mdcpId)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("MDCP Id").Set mdcpId
End sub

'Make a Clean Cache Refresh
sub RefreshPage()
	Dim objKey
	set objKey = CreateObject("WScript.Shell")
	Browser("Home#/selfservicequote/createq").WinObject("Client Caption").Click
	objKey.SendKeys "^(r)"
End sub

'Function that verify the MDCP ORG ID -Done
sub ValidateMDCPIAdvancedSearch(MdcpId)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate MDCP Id").Exist Then
		Dim strValidateMdcpId :	strValidateMdcpId = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate MDCP Id").GetROProperty("innertext")
			If strValidateMdcpId = MdcpId Then
				Reporter.ReportEvent micPass, "Validate MDCP ID","MDCP ID(s) exist in the table"				
		    Else
			    Reporter.ReportEvent micFail, "Validate MDCP ID","MDCP ID(s) not exist in the table"	
			End If
	End If
End sub

'funtion that fill company name / account name 
sub CompanyNameAccountName(CompanyName)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Account Name").Set CompanyName
End sub

'Function that verify the company name  / accont name
sub ValidateCompanyName(CompanyName)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Company Name").Exist Then
	Dim strValidateCompanyName : strValidateCompanyName = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Company Name").GetROProperty("innertext")
	Dim result : result = 	StrComp(CompanyName,strValidateCompanyName,1)
		If result = 0 Then
			Reporter.ReportEvent micPass, "Valide Account Name","Account Name(s) Exist"				
		Else
			Reporter.ReportEvent micFail, "Valide Account Name","Account not Name(s) Exist"
		End If	
	End If
End sub

'functon that fill email in advanced search
sub LastModifedEmail(email)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Last Edited by(Email)").Set email
End sub

'Function that verify the Email
sub ValidateLasModifedEmail(email)
	MoveScrollBarToRight()
	wait(2)
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Email").Exist Then
	Dim strValidateEmail : strValidateEmail = Browser("NGQ").Page("Navbar - AdvancedSearch").WebElement("Validate Email").GetROProperty("innertext")
		If strValidateEmail = email Then
			Reporter.ReportEvent micPass, "Validate Last Modified Email","Email Exist"				
		Else
			Reporter.ReportEvent micFail, "Validate Last Modified Email","Email Not Exist"				
		End If	
	End If	
	MoveScrollBarToLeft()
End sub

'function to set  the start date
sub SetStartDate(strStartDate)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("StartDate").Set strStartDate
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("StartDate").Click
	EnterKey
End sub

'funtion to set the end date
sub SetEndDate(strEndDate)
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("EndDate").Set strEndDate
	Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("EndDate").Click
	EnterKey
End sub

'click in a result from the date search
sub ClickQuoteNumberResult(intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("QuoteNumberHeader")
	'dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/span[not(contains(@class,'ng-hide'))]/a"
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//a)[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).Click
End sub

'funtion to validate the range of the date NEED FIX!!!
sub ValidateDateRange(StartDate,EndDate)
	Dim NGQEndDate : NGQEndDate = Browser("NGQ").Page("Quote").WebElement("quoteEndDate").GetROProperty("innertext")
	Dim NGQStartDate : NGQStartDate = Browser("NGQ").Page("Quote").WebElement("quoteStartDate").GetROProperty("innertext")
	NGQEndDate = FormatDateTime(NGQEndDate,0)
	NGQStartDate = FormatDateTime(NGQStartDate,0)
	StartDate = FormatDateTime(StartDate,0)
	EndDate =  FormatDateTime(EndDate,0)
	dim StartToStart : StartToStart = DateDiff("d",StartDate,NGQStartDate)
	Dim StartToEnd : StartToEnd = DateDiff("d",StartDate,NGQEndDate)
	Dim EndToStart : EndToStart =  DateDiff("d",EndDate,NGQStartDate)
	Dim EndToEnd : EndToEnd = DateDiff("d",EndDate,NGQEndDate)
		If ( (StartToStart>=0) and (StartToEnd>0) ) Then	
			If ( (EndToEnd<=0) and (EndToStart<0) )  Then
				Reporter.ReportEvent micPass, "Validate Date Range","The object is between date range"
			Else 

				Reporter.ReportEvent micFail, "Validate Date Range","The object is not between date range"	
			End If
		End If
End sub
			'End US9430_01================================================= Alejandro Rosales
			'Start US9430_02================================================= Alejandro Rosales
'go to my dashboard
sub ClickMyDashboard()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Click Navbar My Dashboard").Click
End sub
'validate if the quote tab is active/selected
sub ValidateQuoteTab()
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Quote Tab").Exist Then
			Reporter.ReportEvent micPass, "Validate Quote Tab","The quote tab is selected"		
	Else 
			Reporter.ReportEvent micFail, "Validate Quote Tab","The quote tab is Not selected"		
	End If
End sub

'click the button auto filter
sub ClickAutoFilter()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("BtnAutoFilter").Click
End sub

'enter and submit thequote number
sub FillFilterQuoteNumber(quoteNumber)
	Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").Set quoteNumber
	Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").Click 
	EnterKey()
	wait(10)
End sub

'validate if the colums 'Last Modify by' 'Las modified Ts' and 'Owner History' are active
sub ValidateLastModifyBy_TS_and_OwnerHistory()
	'Click to deploy the table of showing colums
	ClickGridButtonOfDashboard
	'Validate if Last Modify by is active
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Last Modify by").Exist Then
		Reporter.ReportEvent micPass, "Validate Last Modiy By","Last Modify By is active"
	Else 	
		Reporter.ReportEvent micFail, "Validate Last Modiy By","Last Modify By is noT active"
	End If
	
	'Validate if Last Modify Ts is active
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Last Modifued Ts").Exist Then
		Reporter.ReportEvent micPass, "Validate Last Modify Ts","Last Modify Ts is active"
	Else 	
		Reporter.ReportEvent micFail, "Validate Last Modify Ts","Last Modify Ts is not active"
	End If
	'Validate if Owner History is active
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Owner History").Exist Then
		Reporter.ReportEvent micPass, "Validate Owner History","Owner History is active"
	Else 	
		Reporter.ReportEvent micFail, "Validate Owner History","Owner History is not active"
	End If
End sub
'Click grid button in Dashboard page
Sub ClickGridButtonOfDashboard()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Colums Button").Click
End Sub

'validate if the colums 'Last Modify by' 'Las modified Ts' and 'Owner History' are has a value different from null
sub ValidateFieldsByTsOwner(intIndex)
	'Validate if Last Modify by is has a Value
	Dim dynCol, xpath
	dynCol = getDashboardColumnHeader("LastModifiedByHeader")
	xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/div"
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement(xpath).GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Value of Last Modiy By","Last Modify By has a Value"
	Else 	
		Reporter.ReportEvent micFail, "Value Last Modiy By","Last Modify By is Empty"
	End If
	'Validate if Last Modify TS is has a Value
	dynCol = getDashboardColumnHeader("LastModifiedTsHeader")
	xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/span"
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement(xpath).GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Value of Last Modiy Ts","Last Modify TS has a Value"
	Else 	
		Reporter.ReportEvent micFail, "Value Last Modiy Ts","Last Modify Ts is Empty"
	End If
	'Validate if Owner History is has a Value
	dynCol = getDashboardColumnHeader("OwnerHistoryHeader")
	xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/a"
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement(xpath).GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Value of Owner History","Owner History has a Value"
	Else 	
		Reporter.ReportEvent micFail, "Value Owner History","Owner History Ts is Empty"
	End If
End sub

Function getDashboardColumnHeader(strColumnName)
	dim findCol : findCol = Browser("NGQ").Page("Navbar - My Dashboard").WebElement(strColumnName).GetROProperty("class")
	dim matches : set matches = RegexGetMatches(findCol, "(coluiGrid-\w{4})", false)
	if matches.Count = 0 then
	    'we failed poi~
	    print "failed"
	end if
	'reporter.ReportEvent micDone, "regex match", Trim(matches(0).value)
	getDashboardColumnHeader = Trim(matches(0).Value)
End Function

Sub verify_advSearch_quoteID(strQuoteID, intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("QuoteNumberHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/span[not(contains(@class,'ng-hide'))]/a"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	If actual = strQuoteID Then
		Reporter.ReportEvent micPass, "Verify Quote Number", "Verified matching Quote Number"
	else
		Reporter.ReportEvent micFail, "Verify Quote Number", "Incorrect Quote Number found"
	End If
End Sub

'click in the owner history link
sub ClickOwnerHistory(intIndex)
	Dim dynCol, xpath
	dynCol = getDashboardColumnHeader("OwnerHistoryHeader")
	xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/a"
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement(xpath).Click
End sub
		' TODO REFACTOR THESE XPATHS WHEN DASHBOARD WORKING -JH
		'validate table in owner history link
sub ValidateOwnerHistoryTable
		'Validate if Document Type column exist
	If 	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateDocumentType").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Document Type","Document Type Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Document Type","Document Type Not Column Exist"
	End If
	'Validate if Operation Type column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateOperationType").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Operation Type","Operation Type Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Operation Type","Operation Type Not Column Exist"
	End If
	'Validate if Transaction By column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateTransaction By").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Transaction By ","Transaction By Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Transaction By ","Transaction By Not Column Exist"
	End If
	'Validate if Transaction Description column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateTransactionDescription").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Transaction Description ","Transaction Description Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Transaction Description ","Transaction Description Not Column Exist"
	End If
	'Validate if Transaction Time column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateTransactionTime").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Transaction Time ","Transaction Time Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Transaction Time ","Transaction Time Not Column Exist"
	End If
	'Validate if Transaction Result column exist
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ValidateTrasactionResult").GetROProperty("innertext") <> "" Then
		Reporter.ReportEvent micPass, "Column Transaction Result ","Transaction Result Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Transaction Result ","Transaction ResultNot Column Exist"
	End If
End sub

'Click quote number
sub ClickQuoteNumber(intIndex)
	'Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ClickQuoteNumber").Click
	Dim dynCol : dynCol = getAdvSearchColumn("QuoteNumberHeader")
	'dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/span[not(contains(@class,'ng-hide'))]/a"
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//a)[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).Click
End sub

'Check the first row quote
sub CheckFirstRowQuote(intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("FirstColumnForCheck")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//div[contains(@class,'icon-ok')]"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).Click
End sub

'click the Log History Button
sub ClickLogHistoryButton()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("ClickLogHistoryBtn").Click
End sub

sub ValidateLogHistory()
	'Validate information in Quote Information Tab
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Last Modifed Time").Exist Then
		Reporter.ReportEvent micPass, "Column Last Modified Time","Last Modified Time Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Last Modified Time ","Last Modified Time Not Column Exist"
	End If
	
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Modified By").Exist Then
		Reporter.ReportEvent micPass, "Column Modified By","Modified By Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Modified By","Modified By Not Column Exist"
	End If
	'Change to tab Line Item
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Line Item Btn").Click

	'Validate information in Line ItemcTab
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Last Modifed Time").Exist Then
		Reporter.ReportEvent micPass, "Column Last Modified Time","Last Modified Time Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Last Modified Time ","Last Modified Time Not Column Exist"
	End If
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Modified By").Exist Then
		Reporter.ReportEvent micPass, "Column Modified By","Modified By Column Exist"
	Else 	
		Reporter.ReportEvent micFail, "Column Modified By","Modified By Not Column Exist"
	End If
	'close log history
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Close Log History Btn").Click
End sub

'Scroll SideBar to validate fields
sub MoveScrollBarToRight()
	Dim Iterator : Iterator = 0
	'Double click in a object to waranty the side scrolling
	
	'Asure move the side bar to the right
	For Iterator = 1 To 7 Step 1
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Scroll Bar").DoubleClick
		ToRight()
	Next
End sub

sub MoveScrollBarToLeft()
	Dim Iterator : Iterator = 0
	'Double click in a object to waranty the side scrolling
	
	'Asure move the side bar to the right
	For Iterator = 1 To 7 Step 1
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Scroll Bar").DoubleClick
		ToLeft()
	Next
End sub

'submit enter key
Function EnterKey()
	Dim objKey
	set objKey = CreateObject("WScript.Shell")
	objKey.SendKeys "{ENTER}"
End Function

'Function that submit the right arrow  -Usefully for horizontal sidebar -
sub ToRight()
	Dim objKey
	set objKey = CreateObject("WScript.Shell")
	objKey.SendKeys "{RIGHT}"
End sub

sub ToLeft()
	Dim objKey
	set objKey = CreateObject("WScript.Shell")
	objKey.SendKeys "{LEFT}"
End sub
		'End US9430_02================================================= Alejandro Rosales


		'Start US9430_03================================================= Alejandro Rosales	
	'Go to		
sub ClickMyGroupQuoteTab
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("My Group Quote Tab").Click
End sub

sub ClickMyGroupStatusCount()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("MyGroupStatus Count").Click
End sub

sub Click_Clone()
	 Browser("NGQ").Page("Navbar - New Quote").WebElement("Quote_Clone").Click
	 Dim strMsg : strMsg = Browser("NGQ").Page("Quote").WebElement("Quote Clone Message").GetROProperty("innertext")
   	if strMsg = "New quote number will be generated upon save." then
        Reporter.ReportEvent micPass, "Clone Quote","Quote Successfully Cloned"
    else
        Reporter.ReportEvent micFail, "Clone Quote","Quote failed to clone"
    End if
End sub 

'save quote
sub Quote_save()
	Browser("NGQ").Page("Quote").WebElement("SaveButton").Click
	Dim strMsg : strMsg = Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext")
    if strMsg = "Successfully Saved Quote!" then
        Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
    else
        Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
    End if
    If Browser("NGQ").Page("Quote").WebElement("XMark").Exist(1) Then
    	Browser("NGQ").Page("Quote").WebElement("XMark").Click
    End If
End sub

'End US9430_03================================================= Alejandro Rosales
'Start US9430_04================================================= Alejandro Rosales
				
'Validate if the quote number submited is the same that the table shows
sub ValidateQuoteNumberValue(QuoteNumber)
	wait(3)
	dim strtempNumber : strtempNumber = Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext")
		
	If QuoteNumber = strtempNumber Then
		Reporter.ReportEvent micPass, "Quote Number Value","Value in tab Match with submited"	
	Else 	
		Reporter.ReportEvent micFail, "Quote Number Value","Value in tab Not Match with submited"	
	End If
End sub

				'End US9430_04================================================= Alejandro Rosales
				'Start US9597_03================================================= Alejandro Rosales
						
'Function to go to My preferences in Admin Tools tab
Sub ClickAdminTools_MyPreferences()
	Browser("NGQ").Page("Navbar-AdminTools").WebElement("My Preferences tab").Click
End Sub

	'function to set choose view name
Sub EditChooseView(strViewName)
dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebEdit("Choose View").Set strViewName
	UFT.ReplayType = intOriginalReplayType
	wait(3)
	'Doesnt work for some reason
	'Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("ViewList").Select strViewName
End Sub

	'Function to choose a whatever value you send from AvailableColumn/ also send it to assigned column
Sub AvailableColumn(strLabel)
	If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Available Column List").Exist Then
		Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Available Column List").Select strLabel
		MoveToRight()
	End If
End Sub

	'Function to choose a whatever value you send from Assigned Colum List/ also send it to Available column
Sub AssignedColumn(strLabel)
	If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Exist then 
		Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Select strLabel
		MoveToLeft()
	End If
End Sub

	'Select the assigned value inthe assigned column to move up one place by click the up button
Sub MoveUpAssignedLabel(strLabel)
	If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Exist Then
		Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Select strLabel
		MoveUp()
	End If
End Sub

	'Select the assigned value inthe assigned column to move down one place by click the down button
Sub MoveDownAssigendLAbel(strLabel)
	If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Exist Then
		Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").Select strLabel
		MoveDown()
	End If
End Sub

	'Click the "Set as default" checkbox
Sub CheckSetAsDefault()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebCheckBox("Set as default").Click
End Sub

	'Click the save button in "My preferences" in Admin Tools navbar
Sub ClickSaveBtnMyPrecerences()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Save btn").Click
End Sub
 
 	'Save all the items of assigned column in an array to compare
Function NoteDownAssignedColumn()
	Dim ListSize : ListSize = Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").GetROProperty("items count")

	Dim count
	Dim LabelsArray()
	ReDim LabelsArray(ListSize)
	
		For count = 1 To ListSize Step 1
			LabelsArray(count) = Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").GetItem(count)
		Next
		
	NoteDownAssignedColumn = LabelsArray
End Function

	'Validate if the dafault Choose view in "New Quote" is the one you set in My preferences / Admin tools
Sub ValidateChooseView(strChooseView)
	Dim strValidate
	strValidate = Browser("NGQ").Page("Navbar - New Quote").WebList("ChooseView").GetROProperty("selection")
	'print strValidate
	If strValidate = strChooseView Then
		Reporter.ReportEvent micPass, "Choose View","Value selected match"
	Else 
		Reporter.ReportEvent micFail, "Choose View","Value selected Doesn't Match"
	End If
End Sub

	'Validate if all columns in the choose view's table are the same that created in assigned column array
Sub ValidateAssignedList_NewQuote(listArray())
	Browser("NGQ").Page("Navbar - New Quote").WebList("ChooseView").Object.scrollIntoView
	Dim intListSize : intListSize = UBound(listArray)
	Dim iterator 
	For Iterator = 1 To intListSize Step 1
		Dim xpath : xpath = "//div[contains(@class,'sortable') and .//span[.='" + listArray(Iterator) + "']]/parent::div"
		Browser("NGQ").Page("Navbar - New Quote").WebElement("ColumnName{xpath}").SetTOProperty "xpath", xpath
		If Browser("NGQ").Page("Navbar - New Quote").WebElement("ColumnName{xpath}").Exist(1) Then
	    	Reporter.ReportEvent micPass, "Templete Table", listArray(Iterator)+" Value Exist"
	    Else 
	    	Reporter.ReportEvent micFail, "Templete Table", listArray(Iterator)+" Value Doesn't Exist"
     	End If
	Next
	Browser("NGQ").Page("Home").WebElement("Home").Object.scrollIntoView
	wait 4
End Sub
	'Click delete button for choose view
 Sub ClickDeleteBtnChooseView()
 	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Delete Choose view btn").Click
 	EnterKey()
 End Sub

'Import the data from the exell sheet to a local array
Function ExellToArray()
    Dim Iterator
	Dim strColumnLabel()
	Dim count : count = DataTable.GetSheet(1).GetRowCount	
	ReDim strColumnLabel(count)
		For Iterator = 1 To count Step 1
			DataTable.SetCurrentRow(Iterator)
			strColumnLabel(Iterator) = DataTable("strColumnLabel",1)
		Next
	DataTable.SetCurrentRow(1)
	ExellToArray=strColumnLabel
End Function
	'Send from Available Column to Assigned Column
Sub MoveToRight()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Move to Right").Click
End Sub
	'Send from Assigned Column to Available Column
Sub MoveToLeft()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Move to Left").Click
End Sub
	'click the move up btn for choose view
Sub MoveUp()
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Move up").Click
End Sub
	'click the down up btn for choose view
Sub MoveDown
	Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebElement("Move Down").Click
End Sub 
			'End US9597_03================================================= Alejandro Rosales
		
			'Start US9597_06================================================= Alejandro Rosales
Sub ClickAddConfigOcs()
	Browser("NGQ").Page("Navbar - New Quote").WebElement("Addbtn").HoverTap()
	Browser("NGQ").Page("Navbar - New Quote").WebElement("ConfigOsc").Click
End Sub	

Sub ClickRefreshPricing()
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
End Sub

Sub ClickPricingTermsTab()
	Browser("NGQ").Page("Quote").WebElement("PricingTermsTab").Click
End Sub
'End US9597_06================================================= Alejandro Rosales


'=====================================================================
'LV Add
'=====================================================================
Sub Quote_RefreshPricng()
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
	if Browser("NGQ").Page("Quote").WebElement("RefreshPricingMessage").GetROProperty("innertext") = "Refresh Pricing completed" then
		Reporter.ReportEvent micPass, "Refresh Pricing", "Successfully Refreshed Pricing for this Quote"
	else
		Reporter.ReportEvent micFail, "Refresh Pricing","Failed to Refresh Pricing for this Quote"
	End if
End Sub

Sub Quote_ClickFooter()
	Dim intOriginalFilter : intOriginalFilter = Logger.SetReporterFilter(rfEnableErrorsOnly) 
 	Browser("NGQ").Page("Footer").WebElement("Grand Total Label").Click 
 	Logger.SetReporterFilter intOriginalFilter
End Sub


Sub Quote_PricingBand()
	
	If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").Exist Then
			If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").GetROProperty("visible") Then 
				Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands exist"
			else
				Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands failed to load"
			End If	
	else
			Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Bands failed to load"
	End If
	'verify_price_quality_band	
		
End Sub

Sub Quote_SaveButton()
	'save quote
	'The Quote_save and Savebutton were both in object repo. Savebutton was retained in repo as they both had same xpath. Only one has to be retained.
	'Browser("NGQ").Page("Quote").WebElement("Quote_Save").Click
	Browser("NGQ").Page("Quote").WebElement("SaveButton").Click
	if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "Successfully Saved Quote!" then
		Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
	else
		Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
	End if
End Sub

Sub Quote_DealId()
	Dim strDealId 
	
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealId").Exist Then
		
		strDealId = Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealId").GetROProperty("innertext")
		if  strDealId <>  "" Then
			Reporter.ReportEvent micPass, "Products under bundle with valid Deal Id","Products under T bundles have Deal Id displayed"
		else
			Reporter.ReportEvent micFail, "Products under bundle with valid Deal Id","Products under T bundles have Deal Id is Empty"
		End if	
	else
		Reporter.ReportEvent micDone, "Products under bundle with valid Deal Id Display Check","Products under T bundles have Deal Id is Not displayed"
	End if	
End Sub

sub LineItemDetails_AddProductOrOption(strProductNumber, strQuantity) 
 	Quote_AddProductOption 
 	Quote_PopulateProduct strProductNumber, strQuantity
end sub 

sub LineItemDetails_AddBundleProduct(strProductNumber, strQuantity)
	Quote_AddBundle
	Quote_PopulateBundle strProductNumber, strQuantity
end sub

Sub Quote_ManualAddBundle(strBundle,intQuantity)
	Quote_AddBundleOption
	Quote_PopulateBundle strBundle,intQuantity
	wait 2
End Sub

Sub Quote_PopulateBundle(strBundleNumber,intQuantity)
	LineItemDetails_SetQuantity intQuantity
	LineItemDetails_SetProductNumber strBundleNumber
End Sub
 
sub LineItemDetails_SetProductNumber(strValue) 
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").Set strValue
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductNumber").SendKeys "~"
	wait 1
end sub  
 
 sub LineItemDetails_SetQuantity(intQuantity) 
 	Browser("NGQ").Page("Quote - Line Item Details").WebEdit("EnterProductQty").Set intQuantity 
 end sub 
 '================================================== 
 ' END Quote - LineItemDetails 
 '================================================== 
 
Sub Quote_SearchProduct()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("Search Product(s)").Click
	UFT.ReplayType = intOriginalReplayType	
End Sub

'Selects bundle to be searched
Sub Quote_SelectBundle()
	Browser("NGQ").Page("Quote").WebElement("Search Product(s)").Click
	Browser("NGQ").Page("Quote - Search Product").WebRadioGroup("ProductSearchType").Select "Bundle"
End Sub


'Adds a product or option the line item details table
sub Quote_AddProductOption()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	wait 1
	intOriginalReplayType
	Browser("NGQ").Page("Quote").Link("Add Product or Option").Click
End sub

'Adds a product or option the line item details table
sub Quote_AddBundleOption()
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	dim intOriginalReplayType : intOriginalReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	wait 1
	UFT.ReplayType = intOriginalReplayType
	Browser("NGQ").Page("Quote").WebElement("Add Bundle").Click
End sub

'Save the deal id
Sub Quote_CaptureDealId()
	Dim strDealId
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealId").Exist Then
	    strDealId = Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealId").GetROProperty("innertext")
		Datatable.GetSheet ("Global").AddParameter "DealId_Output", strDealId
	else
		Reporter.ReportEvent micDone, "Products under bundle with valid Deal Id Display Check","Products under T bundles have Deal Id is Not displayed"
	End if
End Sub


'Add bundle using search
Sub Quote_AddBundleToQuote( strBundleId )
  Browser("NGQ").Page("Quote - Search Product").WebEdit("FindByBundleID").Click
  Browser("NGQ").Page("Quote - Search Product").WebEdit("FindByBundleID").Set strBundleId
  Browser("NGQ").Page("Quote - Search Product").WebElement("Bundle Search").Click
  Browser("NGQ").Page("Quote - Search Product").WebRadioGroup("SelectedBundle").Select strBundleId
  Browser("NGQ").Page("Quote - Search Product").WebElement("AddBundleToQuote").Click
End Sub

' Update quantity option
Sub Quote_QtyUpdate(intIndex, intBundleQty)
	'refactored by JH
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("editLineItem").Click
	intIndex = intIndex + 1
	Dim dynCol : dynCol = getProductTableColumn("QuantityHeader")
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//input)[1]"
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit(xpath).Set intBundleQty
End Sub

' Select output tab
Sub Quote_OutputTab()
	Browser("NGQ").Page("Quote").WebElement("QuoteOutputTab").Click
    Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").Select "Extended Net Price by item with estimated delivery"
End Sub

' Clicks the preview button
Sub Quote_PreviewButton(strName)
	Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").Select strName
	Browser("NGQ").Page("Quote - Output Quote").WebElement("Preview Btn").Click
End Sub

' Clicks the save button when downloading files
Sub Quote_SaveFromDownloadBar()
	Browser("NGQ").WinObject("Notification").WinButton("WinButton").Click
    Browser("NGQ").WinObject("Save Bar").WinButton("Save").Click
End Sub

' Gets pdf ready to download
Sub Quote_PreProcessDownload(strDownloadDir,strSearchFileName)
	Dim fso
	
	'Save writes to a file with quote number
  	strSearchFileName = Datatable.GetSheet ("Global").GetParameter("QuoteNumber_Output").Value
  	
  	Set fso = CreateObject("Scripting.FileSystemObject") 
	
	If fso.FileExists(strDownloadDir + strSearchFileName + ".pdf") Then
		fso.DeleteFile strDownloadDir + strSearchFileName + ".pdf"
  	End If
  		
End Sub


' Saves the pdf to be checked
Sub Quote_ProcessDownload(strDownloadDir,strSearchFileName)
	Dim fso
	
	'Save writes to a file with quote number
  	strSearchFileName = Datatable.GetSheet ("Global").GetParameter("QuoteNumber_Output").Value
  	
  	Set fso = CreateObject("Scripting.FileSystemObject") 
	
	fso.CopyFile strDownloadDir + strSearchFileName + ".pdf" , Environment.Value("ResultDir") + "\" + strSearchFileName + ".pdf", True
  	  	
  	If fso.FileExists(strDownloadDir + strSearchFileName + ".pdf") Then
		fso.DeleteFile strDownloadDir + strSearchFileName + ".pdf"
  	End If
  	Browser("Home#/selfservicequote/createquote/").WinObject("Notification").WinButton("Close").Click
End Sub

' Checks the pdf to verify all of the products were added
Sub Quote_FileContentPriceCheck
	FileContent("To be assigned.pdf").Check CheckPoint("To be assigned.pdf")
End Sub


' Selects the include cover page box
sub Quote_SelectIncludeCoverPage()
	Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("IncludeCoverPage").CheckBox
end sub

' Un selects the include cover page box
sub Quote_DeSelectIncludeCoverPage()
	Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("IncludeCoverPage").UnCheckBox
end sub

' Checks the CustomGroupView box
sub Quote_SelectCustomGroupView()
	Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("CustomGroupView").CheckBox
end sub

' Unchecks the CustomGroupView box
sub Quote_DeSelectCustomGroupView()
	Browser("NGQ").Page("Quote - Output Quote").WebCheckBox("CustomGroupView").UnCheckBox
end sub

' Verifies that the Price Quality Band Table is not shown
Sub Quote_CheckPricingBandNotDisplayed()	
	If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").Exist Then
			If Browser("NGQ").Page("Pricing and Terms").WebElement("PriceQualityBandsTable").GetROProperty("visible") Then 
				Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Band exist, Check Failed"
			else
				Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Band is Not Displayed - Validation Passed"
			End If	
	else
			Reporter.ReportEvent micPass, "Price Quality Band", "Price Quality Band is Not Displayed - Validation Passed"
	End If
	'verify_price_quality_band			
End Sub

' Finds the quote id and adds it to datasheet
Sub Quote_CaptureQuoteNumber()
	Dim quoteID : quoteID = Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext") 
	Datatable.GetSheet ("Global").AddParameter "QuoteNumber_Output", quoteID
End Sub


'=====================================================================
'LV End
'=====================================================================

'=====================================================================
'PRE VALIDATE START
'=====================================================================
Sub select_preValidate_link()
	Browser("NGQ").Page("Quote").WebElement("ExtraMenuButton").Click
	Browser("NGQ").Page("Quote").WebElement("PreValidateDropdownSelect").Click
End Sub

Sub PreValidateQuote()
	Browser("NGQ").Page("PreValidate").WebElement("CLICButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("PriceButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("BundleButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("CompleteQuoteButton").Click
End Sub

Sub PreValidateQuoteOverwrite()
	Browser("NGQ").Page("PreValidate").WebElement("CLICButton").Click
	Browser("name:=Home.*").Page("title:=Home.*").WebEdit("xpath:=(//span[contains(text(), 'Override Reason:')])[1]/preceding-sibling::textarea").Set "automation"
	Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=(//i[@id='checkFanNrBtn'])[1]").Click 
	Browser("NGQ").Page("PreValidate").WebElement("PriceButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("BundleButton").Click
	Browser("NGQ").Page("PreValidate").WebElement("CompleteQuoteButton").Click
End Sub
Sub PreValidateQuote_success()
    Dim regEx, Match, Matches   ' Create variable.
    Set regEx = New RegExp   ' Create a regular expression.
    'regEx.Pattern = "Deal \d{9}, Version 1 successfully created.QUOTE SUCESSFULLY UPDATED INTO IDS DB"  ' Set pattern.
    regEx.Pattern = "QUOTE SUCESSFULLY UPDATED INTO IDS DB" 
    regEx.IgnoreCase = True   ' Set case insensitivity.
    regEx.Global = True   ' Set global applicability.
    print Browser("NGQ").Page("PreValidate").WebElement("QuoteValidatedResult").GetROProperty("innertext")
	If regEx.Test(Browser("NGQ").Page("PreValidate").WebElement("QuoteValidatedResult").GetROProperty("innertext")) Then
		Reporter.ReportEvent micPass, "Verify Quote Successfully Validated","Quote Successfully Saved/Validated"
	else
		Reporter.ReportEvent micFail, "Verify Quote Successfully Validated","Quote did not Save/Validate"
	End if
End Sub
'=====================================================================
'PRE VALIDATE END
'=====================================================================
'====================================
' Author: Reese Childers
' Purpose: Functions for refreshing prices,
' interacting with product select.
'====================================

' Clicks the line item search option for search product
Sub click_lineitem_add_product_search()
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	'browser("NGQ").Page("Quote - Line Item Details").WebElement("addButton").Click
	browser("NGQ").Page("Quote - Line Item Details").WebElement("SearchProduct").Click
	UFT.ReplayType = strOriginType
End Sub

' Clicks the product list button in new configuration
Sub select_product()
	browser("NGQ").Page("New Configuration").WebElement("ProductList").Click
End Sub

' Clicks the save button on the new quote screen
Sub click_save_button()
	browser("NGQ").Page("Quote").WebElement("SaveButton").Click
	if browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "Successfully Saved Quote!" then
        Reporter.ReportEvent micPass, "Save Quote","Quote Successfully Saved"
    else
        Reporter.ReportEvent micFail, "Save Quote","Quote didn't save"
    End if
End Sub

'Sets the product number and searches ( can only search one product )
Sub set_product_number(strNum)
	browser("NGQ").Page("Quote - Search Product").WebEdit("ProductNumber").Set strNum
	browser("NGQ").Page("Quote - Search Product").WebElement("ProductSearch").Click
End Sub

' Sets the quantity for the first item to 1
Sub set_quantity()
	browser("NGQ").Page("Quote - Search Product").WebEdit("ChangeQuantity").Set "1"
	browser("NGQ").Page("Quote - Search Product").WebElement("addToCart").Click
End Sub

' Clicks the add to quote button
Sub add_to_quote()
	browser("NGQ").Page("Quote - Search Product").WebElement("addToQuote").Click
End Sub

' Validates quote was successfully saved
Sub validate_products_added_to_quote()
	if browser("NGQ").Page("Quote").WebElement("SuccessMessage").GetROProperty("innertext") = "Products added." then
        Reporter.ReportEvent micPass, "Quote Add","Product Successfully Added to Quote"
    else
        Reporter.ReportEvent micFail, "Quote Add","Products Were Not Added"
    End if	
End Sub

' Clicks the refresh pricing button
Sub click_refresh_pricing()
	browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
End Sub


Sub validate_product_number_line_item(strName)
	Dim goodPath : goodPath = "xpath:=(//span[contains(text(),'"
	goodPath = goodPath + strName + "')])[1]"
	
	If Browser("NGQ").Page("Quote").WebElement(goodPath).Exist then
		Reporter.ReportEvent micPass, "Validate Variable Success", strName
	Else
		Reporter.ReportEvent micFail, "Validate Variable Fail", strName
	End If		
End Sub

'Adds an item from ocs config
Sub build_ocs_bom()
	'browser("NGQ").Page("Quote - Line Item Details").WebElement("addButton").Click
	'browser("NGQ").Page("Quote - Line Item Details").WebElement("OCSConfig").Click
	wait 1
	If Browser("NGQ").height < 800 Then
		Browser("NGQ").FullScreen
	End If
	click_lineitem_add_ocs
	browser("NGQ").Page("OCS Config").WebElement("ProductList").Click
	Browser("NGQ").Page("OCS Config").WebEdit("InputField").Set "752426-B21"
	Browser("NGQ").Page("OCS Config").WebElement("SearchButton").Click
	Browser("NGQ").Page("OCS Config").WebEdit("SetQuantity").Set "1"
	Browser("NGQ").Page("OCS Config").WebElement("Go2Bom").Click
	Browser("NGQ").Page("OCS Config").WebElement("SaveOCSConfig").Click
	Browser("NGQ").Page("OCS Config").WebElement("ConvertQuote").Click
End Sub

Sub build_ocs_bom_od1()
	click_lineitem_add_ocs
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("DLServers").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("DL100").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("DL180").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("DL180_Optimal").Click
	Browser("NGQ").Page("OCS Config").WebElement("SaveOCSConfig").Click
	Browser("NGQ").Page("OCS Config").WebElement("ConvertQuote").Click
End Sub

Sub build_ocs_bom_serviceSupport()
	'implement fully later
	Dim lifecycle : lifecycle = "H0JT1A1"
	Dim training : training = "H9P11A1"
	Dim support : support = "H0JD4A1#WFH"
	click_lineitem_add_ocs
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("DLServers").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("DL100").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("DL180").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("DL180_Optimal").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").Link("ServicesSupportCenter").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("LifecycleServices").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebEdit("xpath:=//tr[@id='" & lifecycle &"']//input").Set 1
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("TrainingServices").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebEdit("xpath:=//tr[@id='" & training &"']//input").Set 1
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("SupportCredits").Click
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebEdit("xpath:=//tr[@id='" & support &"']//input").Set 1
	Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("Overview").Click
	Verify_bom_lineItem "H0JT1A1", 17
	Verify_bom_lineItem "H9P11A1", 21
	Verify_bom_lineItem "H0JD4A1 WFH", 20
	Browser("NGQ").Page("OCS Config").WebElement("SaveOCSConfig").Click
	Browser("NGQ").Page("OCS Config").WebElement("ConvertQuote").Click
End Sub

Sub Verify_bom_lineItem(strProdNum, intLineNum)
	Dim actual : actual = Browser("NGQ").Page("OCS Config").Frame("OCSConfigFrame").WebElement("xpath:=//table[starts-with(@id,'bom_grid')]/tbody/tr["& intLineNum &"]/td[3]").GetROProperty("InnerText")
	If actual = strProdNum Then
		Reporter.ReportEvent micPass, "Verify BOM line item", "Verified BOM Line item successfully"
	else
		Reporter.ReportEvent micFail, "Verify BOM line item", "Failed to Verify BOM Line item successfully"
	End If
End Sub
'Adds an item from ocs config
Sub click_lineitem_add_ocs()
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	browser("NGQ").page("Quote").webelement("Add").Object.scrollIntoView
	browser("NGQ").Page("Quote").WebElement("Add").MouseOver
	UFT.ReplayType = strOriginType
	wait 1
	browser("NGQ").Page("Quote - Line Item Details").WebElement("OCSConfig").Click
End Sub

'Right click items
Sub right_click_in_table()
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('contextMenu').setAttribute('style', 'left: 572px; top: 58px; display: block;');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_29').getElementsByTagName('a')[0].click()"
End Sub

' Add product option
Sub add_product_option(strName)
	procMessageSync
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('contextMenu').setAttribute('style', 'left: 572px; top: 58px; display: block;');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_28').getElementsByTagName('a')[0].click()"
	 wait(2)
	write_product(strName)
End Sub

Sub add_product_option2(strName)
	procMessageSync
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('contextMenu').setAttribute('style', 'left: 572px; top: 58px; display: block;');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_2').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_3').getElementsByTagName('a')[0].click()"
	 wait(2)
	write_product(strName)
End Sub

Sub procMessageSync()
	Dim i : i = 0
	
	Do while (Browser("NGQ").Page("Quote").WebElement("processingMessage").Exist(1))
		wait(1)
	Loop

End Sub

Sub write_product(strName)
	Browser("NGQ").Page("Quote").WebEdit("xpath:=//option[@label='Product']/ancestor::div[@role='row']//input[@ng-model='row.entity.productNr']").Set strName
	Browser("NGQ").Page("Quote").WebEdit("xpath:=//option[@label='Product']/ancestor::div[@role='row']//input[@ng-model='row.entity.productNr']").SendKeys "~"
End Sub

Sub select_product()
	browser("NGQ").Page("New Configuration").WebElement("ProductList").Click
End Sub

' Verifies that an obsolete message appears when an obsolete product is added
Sub validate_obsolete_message()
Dim compareElement : compareElement = Browser("NGQ").Page("Quote").WebElement("WarningMessage").GetROProperty("InnerText")
	If (InStr(1, compareElement, "Obsolete") <> 0) Then
		Reporter.ReportEvent micPass, "Obsolete Product Detected", "Obsolete Product Detected"
	Else
		Reporter.ReportEvent micFail, "Obsolete Product not Detected", "Obsolete Product not Detected"
	End If
End Sub

' Hovers over a line item and check whether the object is obsolete or not. Send in
' 1 if the item is suppsoed to be obsolete and 0 if it is not.
Sub validate_obsolete_object(strName, valOption)
	Dim goodPath : goodPath = "xpath:=//span[contains(text(),'"
	Dim validateTip,  myMatch, obsDate, currDate
	
	' Regular expressions to check for dates in tool tip
	Dim reEOL, reAVAIL, reDISCO, reOBSOLETE
	
	Set reEOL = New RegExp
	Set reAVAIL = New RegExp
	Set reDISCO = new RegExp
	Set reOBSOLETE = New RegExp
	currDate = Date 
	
	' Regular expression that locates EOL line and check for other expressions
	' NOTE: if the names of the fields change, just change the regular expressions below
	With reEOL
	  .Pattern    = "EOL=[0-9-]*"
      .IgnoreCase = False
      .Global     = False
	End With
	
	With reAVAIL
	  .Pattern    = "AVAIL="
      .IgnoreCase = False
      .Global     = False
	End With
	
	With reDISCO
	  .Pattern    = "DISCO="
      .IgnoreCase = False
      .Global     = False
	End With
	
	With reOBSOLETE
	  .Pattern    = "OBSOLETE="
      .IgnoreCase = False
      .Global     = False
	End With	
		

	
	' Building dynamic xpath
	goodPath = goodPath + strName + "') and @class='ng-binding']/parent::div"
	
	validateTip = Browser("NGQ").Page("Quote").WebElement(goodPath).GetROProperty("title")
	
	validateTip = Replace(validateTip, "<br>", "")
	
	
	' Checking to see if custom context menu populates properly
	If reEOL.Test(validateTip) Then
		Reporter.ReportEvent micPass, "Validate EOL is present", "EOL is present"	
	Else
		Reporter.ReportEvent micFail, "Validate EOL is present", "EOL is not present"	
	End If
	
	If reAVAIL.Test(validateTip) Then
		Reporter.ReportEvent micPass, "Validate AVAIL is present", "AVAIL is present"	
	Else
		Reporter.ReportEvent micFail, "Validate AVAIL is present", "AVAIL is not present"	
	End If
	
	If reDISCO.Test(validateTip) Then
		Reporter.ReportEvent micPass, "Validate DISCO is present", "DISCO is present"	
	Else
		Reporter.ReportEvent micFail, "Validate DISCO is present", "DISCO is not present"	
	End If
	
	
	If reOBSOLETE.Test(validateTip) Then
		Reporter.ReportEvent micPass, "Validate OBSOLETE is present", "OBSOLETE is present"	
	Else
		Reporter.ReportEvent micFail, "Validate OBSOLETE is present", "OBSOLETE is not present"	
	End If
	
	
	Set myMatch = reEOL.Execute(validateTip)
	
	validateTip = Replace(myMatch(0).Value, "EOL=", "")
	
	obsDate = FormatDateTime(validateTip, 2)
	
	' If option 1 is selected, the program will verify that the product is obsolete
	' while any other number will verify that it is current.
	If valOption = 1 Then
		If (DateDiff("d", obsDate,currDate) > 0) Then
			Reporter.ReportEvent micPass, "Item is Obsolete", ("Product Name: " + CStr(strName) + " Product Obsolete Date: " + CStr(obsDate) + " Current Date: " + CStr(currDate))
		Else
			Reporter.ReportEvent micFail, "Item is not Obsolete", ("Product Name: " + CStr(strName) + " Product Obsolete Date: " + CStr(obsDate) + " Current Date: " + CStr(currDate))
		End If
	Else
		If (DateDiff("d", obsDate,currDate) < 0) Then
			Reporter.ReportEvent micPass, "Item is not Obsolete", ("Product Name: " + CStr(strName) + " Product Obsolete Date: " + CStr(obsDate) + " Current Date: " + CStr(currDate))
		Else
			Reporter.ReportEvent micFail, "Item is Obsolete", ("Product Name: " + CStr(strName) + " Product Obsolete Date: " + CStr(obsDate) + " Current Date: " + CStr(currDate))
		End If
	End If
End Sub

' Validates that the obsolete product color 
Sub validate_obsolete_color()
	
	if Browser("NGQ").Page("Quote").WebElement("xpath:=//span[@class='ng-binding obsoleteColor']").Exist then
		Reporter.ReportEvent micPass, "Obsolete Color is displayed", "The proper Obsolete color is displayed"
	Else
		Reporter.ReportEvent micFail, "Obsolete Color is not displayed", "The Obsolete color was not displayed"	
	End If
End Sub


' Clicks on the upload product button
Sub uploadProduct()
	Browser("NGQ").Page("Quote").WebElement("UploadProduct").Click
    Browser("NGQ").Page("Quote").WebElement("UploadProductBrowse").Click
End Sub

' Uploads the product from the specified file path
Sub importProductExcelSheet(strName)
	Browser("NGQ").Dialog("Choose File to Upload").WinEdit("File name:").Set strName
	Browser("NGQ").Dialog("Choose File to Upload").WinButton("Open").Click
	UploadProducts_VerifyProducts(strName)
	Browser("NGQ").Page("Quote").WebElement("ImportExcel").Click
	Browser("NGQ").Page("Quote").WebElement("ImportQuote").Click
	UploadProducts_ProductsAddedMsg()
End Sub

' Sets the external comment for quote output
Sub EditExternalComment(strName)
	Browser("NGQ").Page("Quote").WebElement("EditExternal").Click
	Browser("NGQ").Page("Quote - Output Quote").WebEdit("ExternalComment").Set strName
End Sub

' clicks on the quote output tab
Sub Quote_OutputTab()
	Browser("NGQ").Page("Quote").WebElement("QuoteOutputTab").Click
End Sub

' Sets the type of pdf to create and then saves the pdf to the specified path
Sub Quote_SelectOutputType(strName, filePath)
	Browser("NGQ").Page("Quote - Output Quote").WebList("Pdf Output Type").Select strName
	Browser("NGQ").Page("Quote - Output Quote").WebElement("Preview Btn").Click
	wait(3)
    Browser("NGQ").WinObject("Notification").WinButton("WinButton").Click
	Browser("Home").WinMenu("ContextMenu").Select "Save as"
	Browser("NGQ").Dialog("Save As").WinEdit("File name:").Set filePath
	Browser("NGQ").Dialog("Save As").WinButton("Save").Click
End Sub

' sets the auto allocation target price
Sub Quote_SetTargReqPrice(strNum)
	Browser("NGQ").Page("Quote").WebElement("PricingTermsTab").Click
	Browser("NGQ").Page("Pricing and Terms").WebEdit("AutoTargPrice").Set strNum
	Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyAuto").Click
	Browser("NGQ").Page("Pricing and Terms").WebElement("ApproveOverride").Click
End Sub

Sub Quote_SetTargReqPrice2(strNum)
	Browser("NGQ").Page("Quote").WebElement("PricingTermsTab").Click
	Browser("NGQ").Page("Pricing and Terms").WebEdit("AutoTargPrice").Set strNum
	Browser("NGQ").Page("Pricing and Terms").WebElement("ApplyAuto").Click
	'Browser("NGQ").Page("Pricing and Terms").WebElement("ApproveOverride").Click
End Sub

' Verifies that the table displayed in ngq was successfully transferred to the pdf properly
Sub verifyProductInPDF(objPDF, numRows)
	Dim i : i = 1
	While i <> (numRows + 1)
		Dim prodName 
		prodName = get_product_number((i + 1))
		If (objPDF.getProductsProduct(i) = prodName) Then
			reporter.ReportEvent micPass, "Product In PDF", prodName
		Else
			reporter.ReportEvent micFail, "Product not In PDF", prodName
		End If
		
		i = i + 1
	Wend
End Sub

' Verifies that the grand total is the sum of subtotal and shipping and handling
Sub verifyGrandTotal()
	Browser("NGQ").Page("Footer").WebElement("CollapseIcon").Click
    Dim subTot : subTot = Cdbl(Browser("NGQ").Page("Footer").WebElement("subtotal").GetROProperty("innertext"))
    Dim shipAndHandle : shipAndHandle = Cdbl(Browser("NGQ").Page("Footer").WebElement("ShipAndHandle").GetROProperty("innertext"))
    Dim grandTot : grandTot = Cdbl(Browser("NGQ").Page("Footer").WebElement("GrandTotal").GetROProperty("innertext"))
    If grandTot = (subTot + shipAndHandle) Then
    	Reporter.ReportEvent micPass, "Grand Total Match Sub total plus Shipping and Handling", CStr(grandTot)
    Else
    	Reporter.ReportEvent micFail, "Grand Total Does Not Match Sub total plus Shipping and Handling", CStr(grandTot)
    End If
    
    Datatable.GetSheet ("Global").AddParameter "GrandTotal", CStr(grandTot)
End Sub

' Verifies that the discription in the top right of the pdf matches the specified string
Sub verifyHeaderInPDF(strName, pdfObj)
	Dim re, myMatch
	
	Set re = New RegExp
	
	With re
	  .Pattern    = strName
      .IgnoreCase = False
      .Global     = False
	End With
	
	Set myMatch = re.Execute(pdfObj.getQuoteHeader())
	
	If myMatch.count > 0 Then
		Reporter.ReportEvent micPass, "Quote Header Found In PDF", strName
	Else
		Reporter.ReportEvent micFail, "Quote Header Not Found in PDF", strName
	End If
	
End Sub

Sub scrollPageDown()
 	Dim obj
 	Dim WS
 	Set obj = CreateObject("Mercury.DeviceReplay")
 	Set WS = CreateObject("Wscript.Shell") 
 	WS.SendKeys "^{PGDN}"
End Sub

' Verifies that the grand total was entered into the pdf properly
Sub verifyGrandTotalInPDF(strName, pdfObj)
	Dim re, myMatch, valid, totalMatch
	
	Set re = New RegExp
	Set valid = New RegExp
	
	' xpath to extract grand total amount from string
	With re
	  .Pattern    = "[0-9]*[.][0-9]*"
      .IgnoreCase = False
      .Global     = False
	End With
	
	
	' Gets grand total from the pdf
	Dim tot : tot = pdfObj.getTotalsGrandTotal()
	
	' removes any commas from the totals
	tot = Replace(tot, "," , "")
	strName = Replace(strName, ",", "")
	
	' Extracts value from provided string
	Set myMatch = re.Execute(strName)
	strName = myMatch(0).Value
	
	
	With valid
	  .Pattern    = strName
      .IgnoreCase = False
      .Global     = False
	End With
	
	
	If valid.Test(tot) Then
		Reporter.ReportEvent micPass, "Grand Total Does Match In PDF", strName
	Else
		Reporter.ReportEvent micFail, tot, strName
	End If
End Sub

' Verifies that the comment entered into the external comments was added properly
Sub verifyCommentInPDF(strName, pdfObj)
	Dim re, myMatch
	
	Set re = New RegExp
	
	With re
	  .Pattern    = strName
      .IgnoreCase = False
      .Global     = False
	End With
	
	Set myMatch = re.Execute(pdfObj.getCommentsBlock())
	
	If myMatch.count > 0 Then
		Reporter.ReportEvent micPass, "Comments Found In PDF", strName
	Else
		Reporter.ReportEvent micFail, "Comments Not Found in PDF", strName
	End If
End Sub

' Clicks and edits the Customer Specific Quote ID
Sub quote_editCutomerSpecQouteID(strName)
	Browser("NGQ").Page("Quote").WebElement("CustomerSpecQuoteIDImage").Click
    Browser("NGQ").Page("Quote").WebEdit("CustomerSpecQuoteIDBox").Set strName
End Sub

' Adds a page break to line item details table
Sub rightClickAddPageBreak()
	wait 1
	Browser("NGQ").Page("Quote").WebElement("Add").Object.scrollIntoView
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(3)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'" & prodName & "')])[1]"
	
	Browser("NGQ").Page("Quote").WebElement(xpath).RightClick
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_29').getElementsByTagName('a')[0].click()"
	Browser("NGQ").Page("Quote").WebList("xpath:=//div[@role='row']//select").SelectByText "Page Break"
	UFT.ReplayType = strOriginType
End Sub

' Add a comment to line item details table
Sub rightClickAddComment()
	wait 1
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(5)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'" & prodName & "')])[1]"
	
	Browser("NGQ").Page("Quote").WebElement(xpath).RightClick
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_29').getElementsByTagName('a')[0].click()"
	UFT.ReplayType = strOriginType
	Browser("NGQ").Page("Quote").WebEdit("xpath:=//span[@class='wrap ng-scope']/input").Click
	Browser("NGQ").Page("Quote").WebEdit("xpath:=//span[@class='wrap ng-scope']/input").Set "A Comment"
	Browser("NGQ").Page("Quote").WebEdit("xpath:=//span[@class='wrap ng-scope']/input").Sendkeys("~")
End Sub

' Select multiple lines of the line item details table
Sub selectMultipleLines()
	wait(3)
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(3)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'" & prodName & "')])[1]"
	
	prodName = get_product_number(8)
	Dim xpath2 : xpath2 = "xpath:=(//span[contains(text(),'" & prodName & "')])[1]"
	
	Browser("NGQ").Page("Quote").WebElement(xpath).Click
	Dim obj
	Set obj = CreateObject("Mercury.DeviceReplay")
	obj.KeyDown 42
	Browser("NGQ").Page("Quote").WebElement(xpath2).Click
	obj.KeyUp 42
	UFT.ReplayType = strOriginType
	'Browser("NGQ").Page("Quote").WebElement("xpath:=(//a[contains(text(), 'Add Subtotal')])[1]").Click
End Sub

Sub AddSubtotal()
	wait 1
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(8)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'" & prodName & "')])[1]"
	
	Browser("NGQ").Page("Quote").WebElement(xpath).RightClick
	UFT.ReplayType = strOriginType
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').getElementsByTagName('a')[2].click()"
End Sub

' Tries to remove an item from the line item details while being in a subtotal
Sub removeItemInSubTotal()
	wait 3
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(8)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'" & prodName &"')])[1]"
	Browser("NGQ").Page("Quote").WebElement(xpath).RightClick
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_30').getElementsByTagName('a')[0].click()"
	Browser("NGQ").Page("Quote").WebElement("xpath:=//div[@id='grid_msgs']//a").Click
	UFT.ReplayType = strOriginType
End Sub

' Removes item from table
Sub removeItem()
	wait(3)
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(8)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'" & prodName & "')])[2]"
	Browser("NGQ").Page("Quote").WebElement(xpath).RightClick
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_30').getElementsByTagName('a')[0].click()"
	UFT.ReplayType = strOriginType
End Sub

' Deletes sub total line
Sub deleteSubTotalLine()
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("xpath:=(//span[@class='icon-trash ng-scope'])[last()]").Click
	UFT.ReplayType = strOriginType
End Sub

' Edits the product number of a pre existing item
Sub editProductNum(strName)
	wait(3)
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(5)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'" & prodName & "')])[1]"
	
	Browser("NGQ").Page("Quote").WebElement(xpath).RightClick
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_7').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_31').getElementsByTagName('a')[0].click()"
	Browser("NGQ").Page("Quote").WebEdit("xpath:=//span[@title='Product No.']//input").click
	Browser("NGQ").Page("Quote").WebEdit("xpath:=//span[@title='Product No.']//input").Set strName
	Browser("NGQ").Page("Quote").WebEdit("xpath:=//span[@title='Product No.']//input").SendKeys("~")
	UFT.ReplayType = strOriginType
End Sub

' Promotes an item in the line item details table
Sub rightClickPromoteItem()
	wait(3)
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(5)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'"
	xpath = xpath + prodName + "')])[2]"
	
	Dim correctNum : correctNum = get_item_number(5)
	
	Browser("NGQ").Page("Quote").WebElement(xpath).RightClick
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_11').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_42').getElementsByTagName('a')[0].click()"
	
	dim correctNum2 : correctNum2 = get_item_number(5)
	
	If (correctNum = correctNum2) Then
		Reporter.ReportEvent micPass, "Expected Line Number: " + correctNum, "Actual Line Number: " + correctNum2
	Else
		Reporter.ReportEvent micFail, "Expected Line Number: " + correctNum, "Actual Line Number: " + correctNum2
	End If
	UFT.ReplayType = strOriginType
End Sub

' Demotes an item in the line item details table
Sub rightClickDemoteItem()
	wait(3)
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim prodName : prodName = get_product_number(5)
	Dim xpath : xpath = "xpath:=(//span[contains(text(),'"
	xpath = xpath + prodName + "')])[2]"
	
	Dim correctNum : correctNum = get_item_number(5)
	
	Browser("NGQ").Page("Quote").WebElement(xpath).RightClick
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('menu_11').setAttribute('class', 'submenu');"
	Browser("NGQ").Page("Upload Config").RunScript "document.getElementById('item_43').getElementsByTagName('a')[0].click()"
	
	dim correctNum2 : correctNum2 = get_item_number(5)
	
	If (correctNum = correctNum2) Then
		Reporter.ReportEvent micPass, "Expected Line Number: " + correctNum, "Actual Line Number: " + correctNum2
	Else
		Reporter.ReportEvent micFail, "Expected Line Number: " + correctNum, "Actual Line Number: " + correctNum2
	End If
	UFT.ReplayType = strOriginType
End Sub
'================================
' End of Reese's functions
'================================

'==================================================
' BEGIN pramesh
'==================================================
'==================================================
'BEGIN Quote- Quote Output
'==================================================
Sub QuoteOutput()
	 Browser("NGQ").Page("Quote").WebElement("QuoteOutputTab").Click
	
End Sub
'==================================================
'BEGIN Quote- Quote Output- Internal Comments Validations
'==================================================
Function QuoteOutput_Internal_Comments_Validation()
	' Validating Empty internal comments area
	Dim emptyInternalComments : emptyInternalComments =Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").GetROProperty("innertext")
	If emptyInternalComments =  "" Then
		Reporter.ReportEvent micPass, "Internal comments: ","Internal Comments Textbox is empty"
	Else
		Reporter.ReportEvent micFail, "Internal Comments: ","Internal Comments Textbox is not empty"
	End If
	'Validating maximum number of character allowed in Textarea
	Dim maxLength : maxLength = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").maxlength
	If maxLength =  "4000" Then
		Reporter.ReportEvent micPass, "Internal comments Character count: ","Validated Maximum character allowed is " & maxLength
	Else
		Reporter.ReportEvent micFail, "Internal comments Character count: ","Maximum Character allowed is " & maxLength
	End If
End Function
'=====================================================
'Sets internal comment in the internal comment section
'=====================================================
Sub Set_InternalComments(strComments)
	Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").Set strComments
	wait 1
End Sub
'============================================================
'Clicks Refresh pricing button located on the top right corner
'============================================================
Sub Quote_Refresh_Pricing()
	Browser("NGQ").Page("Quote").WebElement("RefreshPricing").Click
End Sub
Sub CloseInformMessage
	Browser("NGQ").Page("Quote").WebElement("XMark").Click
End Sub
'======================================================
'Validates the internal comment has the correct format
'======================================================
Function QuoteOutput_ValidateInternalComments()
	'dim comment : comment = Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_DisplayInternalComments").GetROProperty("innertext")
	Dim comment : comment = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_SavedInternalComments").GetROProperty("Innertext")
	Dim regEx   ' Create variable.
    Set regEx = New RegExp   ' Create a regular expression.
    'regEx.Pattern = "\w+\.\w*.?@\w+\.com\:\s\d{4}\-\d{2}-\d{2}\s\d{2}\:\d{2}\s\(UTC\):\w+.*?$"   ' Set pattern.
    regEx.Pattern = "\w+@\w+\.com\:\s\d{4}\-\d{2}-\d{2}\s\d{2}\:\d{2}\s\(UTC\):\w+.*?$"   ' Set pattern.
	regEx.IgnoreCase = True   ' Set case insensitivity.
    regEx.Global = True   ' Set global applicability.
    dim retVal : retval = regEx.Test(comment)      ' Execute the search test.
		If retVal Then
		Reporter.ReportEvent micPass, "Internal Comments Validation: ","Internal Comment is in Correct Format"
	Else
		Reporter.ReportEvent micFail, " Internal Comments Validation: ","Internal Comment is Not in Correct Format"
	End If
End Function
'=========================================================
'Sets External comment at external comment section
'=========================================================
sub QuoteOutput_SetExternalComments(strExternalComments)
	Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_ExternalCommentEdit").Click
	Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_ExternalCommentEditBox").Set strExternalComments
End sub
'=========================================================
'Sets External comment at external comment section
'=========================================================
sub QuoteOutput_ExternalComments(strExternalComments)
	Browser("NGQ").Page("Navbar - New Quote").Image("QuoteOutput_ExternalCommentEdit").Click
	Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_ExternalCommentEditBox").Set strExternalComments
End suB
'==================================================
'Make sure External Comment check box is checked
'==================================================
 sub QuoteOutput_ExternalCommentCheckBox()
	dim enableCheckbox : enableCheckbox = Browser("NGQ").Page("Navbar - New Quote").WebCheckBox("QuoteOutput_ExternalCommentCheckBox"). GetROProperty ("Value")
	
	If enableCheckbox = false Then
		Browser("NGQ").Page("Navbar - New Quote").WebCheckBox("QuoteOutput_ExternalCommentCheckBox").Click
	End If
End sub
'==================================================
' Verifies Opportunity and QuoteInfoTab Existence
'==================================================
Function OpportunityandQuoteInfoTabExistence()
	IF Browser("NGQ").Page("Quote").WebElement("Opportunity and Quote Info Tab").Exist(1) THEN
		Reporter.ReportEvent micPass, "Opportunity and QuoteInfoTab: ","Displayed"
	ELSE
		Reporter.ReportEvent micFail, "Opportunity and QuoteInfoTab: ","Not Displayed"
	End IF 
End Function
'==================================================
'Mouse Over to Add+ Button
'==================================================
Sub Click_Add()
	Browser("NGQ").Page("Quote").WebElement("Add").MouseOver
End Sub
'==================================================
'Click on Add product or Option under Add+
'==================================================
Sub ClickAddproductOption()
	Browser("NGQ").Page("Quote").WebElement("AddProductOrOption").Click
End Sub
'=======================================================
'Navigates through Add product or Option
'=======================================================
Sub Click_AddProdAndOption()
	Browser("NGQ").Page("Quote").WebElement("Add+").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Add+").MouseOver
	Browser("NGQ").Page("Quote").WebElement("Add Product Or Option").Click
End Sub
'==============================================================
'Navigates through searched quote number undewr advanced search
'===============================================================
Sub AdvancedSearch_Result_OpenQuoteNumber(strQuote)
    Dim temp : temp = Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Autofilter Quote Number").GetROProperty("innertext")
    temp = Trim(temp)
    strQuote = Trim(strQuote)
    If temp = strQuote  Then
	     Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Autofilter Quote Number").Click
    End If
End Sub
'==================================================
'Set Product number in product number Column
'==================================================
Sub SetProductNumber(strValue)
Browser("NGQ").Page("Quote").WebEdit("EnterProductNumber").Set strValue
    wait 1
    If not Browser("NGQ").Page("Quote").WebEdit("EnterProductNumber").Exist Then
        Quote_AddProductOrOption
        Utils_scrollToBottom_lineItemAdd
        Browser("NGQ").Page("Quote").WebEdit("EnterProductNumber").Set strValue
    End If
    Browser("NGQ").Page("Quote").WebEdit("EnterProductNumber").Click
    EnterKeys
End Sub
'==================================================
'Verifies Internal Comments Section is empty
'==================================================
Function QuoteOutput_Internal_Comments_Empty()
	' Validating Empty internal comments area
	Dim emptyInternalComments : emptyInternalComments =Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").GetROProperty("innertext")
	If emptyInternalComments =  "" Then
		Reporter.ReportEvent micPass, "Internal comments: ","Internal Comments Textbox is empty"
	Else
		Reporter.ReportEvent micFail, "Internal Comments: ","Internal Comments Textbox is not empty"
	End If
End function
'==================================================
'Click Advanced Serach on the top right corner of the page
'==================================================
Sub AdvancedSearchClick()
	Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Advanced_SearchTab").DoubleClick
End Sub

'=========================================================================
'Set Quote Number in a Quote Number Text field under Advanced Search Tab
'=========================================================================
Function SetQuoteNumber_AdvancedSearch(quoeteNumber)
	Browser("NGQ").Page("Navbar_AdvancedSearch").WebEdit("QuoteNumber").Set quoeteNumber
End Function
'==================================================
'Clicks Search button under Advanced search tab
'==================================================
sub ClickSearch_advancedSearch()
	Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("SearchButton").MouseOver
	Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("SearchButton").Click
 End sub

Sub ClickSearch_QuickSearch()
	Browser("NGQ").Page("Home").WebButton("Search").Click
End Sub
 
 '==================================================
 ' Opens the hyperlink Quote number
 '==================================================
 Sub ClickResult_QuoteNumber(strValue)
 	Browser("NGQ").Page("Navbar_AdvancedSearch").WebElement("Result_QuoteNumber").Click
 	 End Sub
 
''==================================================================
''Validates the comments remains in the Display internal comment box
''==================================================================
'Function validate_SavedInternalComments()
'	Dim temp : temp = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_SavedInternalComments").GetROProperty("Innertext")
'	If temp = "" Then
'		Reporter.ReportEvent micPass, "Saved Internal comments: ","Validated Internal comments Failed"
'	Else
'		Reporter.ReportEvent micFail, "Saved Internal Comments: ","Validation of internal comments passed"
'	End If
'
'End Function
'==================================================================
'Validates the internal comments display the specific comment
'==================================================================
Function validate_SavedInternalComments(strToCheck)
	Dim temp : temp = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_SavedInternalComments").GetROProperty("Innertext")
	Dim checkReadonly: checkReadonly = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_SavedInternalComments").GetROProperty("disabled")
	print checkReadonly
	If InStr(1,temp, strToCheck) > 0 Then
		Reporter.ReportEvent micPass, "Saved Internal Comments: ","Internal comments contains: " & strToCheck
	Else
		Reporter.ReportEvent micFail, "Saved Internal comments: ","Internal comments Doesn't dispaly: " & strToCheck
	End If


	If checkReadonly = "1" Then
		Reporter.ReportEvent micPass, "Saved Internal Comments: ","Internal comments is in Read-only mode"
	Else
		Reporter.ReportEvent micFail, "Saved Internal comments: ","Internal comments is not Read-only mode"
	End If
End Function
'==================================================================
'Validates the comments remains in the external comment box
'==================================================================
Function validate_SavedExternalComments(strToCheck)
	Dim temp : temp = Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_ExternalCommentEditBox").GetROProperty("Innertext")
	If InStr(1,temp, strToCheck) > 0 Then
		Reporter.ReportEvent micPass, "Saved External comments: ","External comments contains: " & strToCheck

	Else
		Reporter.ReportEvent micFail, "Saved External Comments: ","External comments contains: " & strToCheck
	End If
End Function
'==================================================================
'Clicks the new version Button on the top right corner
'==================================================================
Sub Click_QuoteNewVersionButton()
	Browser("NGQ").Page("Quote NewVersion").WebButton("New Version").Click
End Sub
'==================================================================
'Selects new version source from the drop down list
'==================================================================
Sub Choose_NewVersionSource(strNewVersionSource)
	Browser("NGQ").Page("Quote NewVersion").WebList("NewVersionSource_DropDownButton").Select strNewVersionSource
End Sub
'==================================================================
'Selects new version reason  from the drop down list
'==================================================================
Sub Choose_NewVersionReason(strNewVersionReason)
Browser("NGQ").Page("Quote NewVersion").WebList("NewVersionReason_DropDownButton").Select strNewVersionReason
End Sub
'==================================================================
'Set comment in new version code window
'==================================================================
Sub SetComment_NewVersionWindow(strComment)
	Browser("NGQ").Page("Quote NewVersion").WebEdit("New Version Comment").Set strComment
End Sub
'==================================================================
'Clicks ok button on new version window
'==================================================================
Sub NewVersion_OkButton()
	Browser("NGQ").Page("Quote NewVersion").WebElement("NewVersion_OkButton").Click
End Sub
'==================================================================
'Selects output type from the drop down list
'==================================================================
Sub Select_Quote_GeneraL_OutputType(strGenOutputType)
	Browser("NGQ").Page("Navbar - New Quote").WebList("Quote_GeneraL_OutputType").Select strGenOutputType
End Sub

'==================================================================
'Clicks Preview button under general section
'==================================================================
Sub Click_Preview_Quote_OutputType()
	Browser("NGQ").Page("Navbar - New Quote").WebElement("Qute_QuoteOutput_Preview").Click
	'Browser("NGQ").Page("Navbar - New Quote").WebElement("Qute_QuoteOutput_Preview").DoubleClick
End Sub


'===============================================================================================
'Validates Quote number, Quote version, Quote name, Quote status, Quote start date and end date
'===============================================================================================
Function Validated_Quote(quoteNumber,quoteVersion,quoteName,quoteStatus,quoteEndDate)
	' Validating Quote Number
	Dim strQuoteNumberID: strQuoteNumberID  = Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext")'Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""quoteId""]").GetROProperty("innertext")
	If strQuoteNumberID = quoteNumber Then
		Reporter.ReportEvent micPass, "Valid quote number: ","Quote number remains the same"
	Else
		Reporter.ReportEvent micFail, "Valid quote number: ","Quote Number is different"
	End If
	' Validating Quote Version
	Dim strQuoteVersion : strQuoteVersion  = Browser("NGQ").Page("Quote").WebElement("quoteVersion").GetROProperty("innertext") 'Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[2]/DIV[1]/SPAN[3]").GetROProperty("innertext")
	If strQuoteVersion = quoteVersion Then
		Reporter.ReportEvent micPass, "Valide version: ","New quote version is To be assigned"
	Else
		Reporter.ReportEvent micFail, "Valide version: ","New quote version is not To be assigned"
	End If
	' Validating Quote Name
	Dim strQuotename : strQuotename = Browser("NGQ").Page("Quote").WebElement("quoteName").GetROProperty("innertext")'Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""quotenamespanSecond""]").GetROProperty("innertext")
	If strQuotename = quoteName Then
		Reporter.ReportEvent micPass, "Valid Quote name:","Quote Name is Validated"	
	Else
		Reporter.ReportEvent micFail, "Valid Quote name: ","Quote Name is not Validated"
	End If	
	' Validating Quote Status
	Dim strQuoteStatus : strQuoteStatus = Browser("NGQ").Page("Quote").WebElement("quoteStatus").GetROProperty("innertext")'Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[3]/SPAN[1]/SPAN[1]").GetROProperty("innertext")
	If strQuoteStatus = quoteStatus Then
		Reporter.ReportEvent micPass, "Valide quote status","Quote Status is Quote/Configuration Created"
	Else
		Reporter.ReportEvent micFail, "Valide quote status","Quote Status is not Quote/Configuration Created"
	End If	
	' Validating Quote Start Date
	If Browser("NGQ").Page("Quote").WebElement("quoteStartDate").Exist then 'Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[3]/SPAN[2]/SPAN[1]").Exist Then
		Reporter.ReportEvent micPass, "Valide start date","Start Date is visible"	
	Else
		Reporter.ReportEvent micFail, "Valide start date","Start Date is not visible"
	End If		
	' Validating Quote End Date
	Dim strQuoteEndDate : strQuoteEndDate = Browser("NGQ").Page("Quote").WebElement("quoteEndDate").GetROProperty ("innertext") 'Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//SPAN[@id=""expiryTsSpan""]/SPAN[1]").GetROProperty ("innertext")
	If strQuoteEndDate = quoteEndDate Then
		Reporter.ReportEvent micPass, "Valide end date","End Date is not pulled out. It says - Need Pricing Call -"
	Else
		Reporter.ReportEvent micFail, "Valide end date","End Date is pulled out"
	End If	
End Function
'==================================================================
'Validates the version number located on the top left corner
'==================================================================
Function validate_VersionNumber(strNumber)
	Dim strQuoteVersion : strQuoteVersion  = Browser("NGQ").Page("Quote").WebElement("quoteVersion").GetROProperty("innertext") 'Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[2]/DIV[1]/SPAN[3]").GetROProperty("innertext")
	If strQuoteVersion = "0"& strNumber or strQuoteVersion = strNumber Then
		Reporter.ReportEvent micPass, "Valid version: ","New quote version expected " & strNumber & " found " & strQuoteVersion
	Else
		Reporter.ReportEvent micPass, "Valid version: ","New quote version expected " & strNumber & " found " & strQuoteVersion
	End If
End Function

'==================================================================
'Click search button
'==================================================================
Sub Click_Search()
	Browser("NGQ").Page("Home").WebElement("Home_Search").Click
End Sub

'==================================================================
'Validates the two internal comments box are empty
'==================================================================
function Validate_TwoInternalCommentsBox()
	If Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").Exist(1) Then
		If Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_DisplayInternalComments").Exist(1) Then
			Reporter.ReportEvent micPass, "Internal Comment Box: ","Internal Comment box are Visible"
		Else 
			Reporter.ReportEvent micFail, "Internal Comment Box: ","Internal Comment box are not Visible"
		End If
	End If
End function


'==================================================================
'Validates the internal comment display box is readonly mode
'==================================================================
function Validate_ReadOnlyInternal_DisplayCommentsBox()
	If Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_DisplayInternalComments").GetROProperty("disabled") = false Then
		Reporter.ReportEvent micFail, "Internal Comment Display Box: ","Internal Comment display box is not read only mode"
	Else 
		Reporter.ReportEvent micPass, "Internal Comment Display Box: ","Internal Comment display box is read only mode"
	End If
End function

'==================================================================
'validates Internal comment box is empty and read only mode
'==================================================================
Function Internal_Commentbox_Empty()
	If Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_InternalComments").GetROProperty("innertext") = "" Then
		Reporter.ReportEvent micPass, "Internal Comment Edit Box: ","Internal Comment Edit box is Empty"
	else
		Reporter.ReportEvent micFail, "Internal Comment Edit Box: ","Internal Comment Edit box is Empty"
	End If
End Function

'==================================================================
'Clicks the clone button on the top right corner
'==================================================================
Sub Click_Clone()
	Browser("NGQ").Page("Navbar - New Quote").WebElement("Quote_Clone").Click
End Sub

'==================================================================
'Navigates "My Dashboard" 
'==================================================================
Sub Click_MyDashboard()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("My Dashboard").Click
End Sub

'==================================================================
'Selects the Quote
'==================================================================
Sub Check_RadioButton(strQuote)
	wait(8)
    Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Check RadioButton").Click
End Sub

'==================================================================
'Click the "My Group Quote" tab next to the "My Quote" tab
'==================================================================
Sub Click_MyGroupQuote()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("My Group Quote").Click
End Sub

'===================================================================================
'Clicks the "Count" number associated to "Quote Status"- Quote/Configuration Created
'===================================================================================
Sub Click_QuoteConfiguration_Count()
	 Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote_Configuration_Count").Click
End Sub
'after status friday
'==================================================================
'Clicks on Transfer Ownership Button
'==================================================================
Sub Click_TransferOwnership()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Transfer Ownership").Click
End Sub

'==================================================================
'Selects Transfer Ownership Transfer reason
'==================================================================
Sub SelectTransferOwnership_TransferReason(strReason)
	Browser("NGQ").Page("Transfer Ownership").WebList("Transfer Reason").Select strReason
End Sub

'==================================================================
'Selects the transfer ownership Group
'==================================================================
Sub SelectTransferOwnershipGroup(strGroup)
	Browser("NGQ").Page("Transfer Ownership").WebList("Transfer Select Group").Select strGroup
End Sub 

'==================================================================
'Selects the transfer email
'==================================================================
Sub SelectTransferEmail(strEmail)
	Browser("NGQ").Page("Transfer Ownership").WebList("Transfer Select Email").Select strEmail
End Sub

'==================================================================
'Clicks continue button of transfer ownership window
'==================================================================
Sub Click_TransferContinue()
	Browser("NGQ").Page("Transfer Ownership").WebElement("Transfer Continue Button").Click
End Sub

'==================================================================
'click on Claim button on the top right of result section
'==================================================================
Sub Click_Claim()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Claim Button").Click
End Sub

'==================================================================
'Click ok button to confirm Claim under my dashboard
'==================================================================
Sub Click_Ok_Claim()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Claim_Ok").Click
End Sub

'==================================================================
'Click the "OK" button to close the window
'==================================================================
Sub Quote_Claim_Success_Ok()
	Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Claim Success Ok").Click
End Sub

'==================================================================
'Clicks the re-login links
'==================================================================
Sub Click_Relogin()
	Browser("NGQ").Page("Logout  ReLogin").Link("Please click here to re-login").Click

End Sub

'==================================================================
'Closes the pdf
'==================================================================
Sub pdfClose()
  If Browser("title:=.*pdf").Exist then
    Browser("title:=.*pdf").Close
  end if
End Sub

'==================================================================
'Move the page up
'==================================================================
Sub pageUpNewQuotePage()
	Dim myjs : myjs ="window.scrollTo(0,0);"
 	Browser("NGQ").Page("Navbar - New Quote").RunScript(myjs)
End Sub

'==================================================================
'Move the page down
'==================================================================
Sub pageDownNewQuotePage()
	'browser("NGQ").FullScreen
	Dim myjs : myjs ="window.scrollTo(0,0, document.body.scrollHeight);"
 	Browser("NGQ").Page("Navbar - New Quote").RunScript(myjs)
End Sub

'==================================================================
'Closes the windows notification
'==================================================================
Sub windowNotifClose()
	Browser("NGQ").WinObject("Save Bar").WinButton("Close").Click
End Sub

'==================================================================
'Verifies transfer of quote
'==================================================================
Function VerifyQuoteTransfer(strEmail)
	If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote successfully transfered").GetROProperty("innertext")  = "Quote successfully transfered to " & strEmail  Then
		Reporter.ReportEvent micPass, "Verification: ","Quote is Successfully Transfered"
	Else 
		Reporter.ReportEvent micFail, "Verification: ","Quote is Not Successfully Transferred"
	End If
End Function
'==================================================================
'Verifies email and quote number 
'Refactored by JH
'==================================================================

Function VerifyEmailQuote(strEmail,strQuote)
	Dim temp1 : temp1 = verify_advSearch_emailBool(strEmail, 2)
	Dim temp: temp = verify_advSearch_quoteIDBool(strQuote, 2)
	If temp = true and temp1 = true Then
		Reporter.ReportEvent micPass, "Verification: ","Quote is Successfully Claimed/Transfered"
	else
		Reporter.ReportEvent micFail, "Verification: ","Quote is Not Successfully Claimed/Transfered"
	End If
End Function

Function verify_advSearch_emailBool(strEmailAdd, intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("CurrentOwnerHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/div"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	If actual = strEmailAdd Then
		verify_advSearch_emailBool = true
	else
		verify_advSearch_emailBool = false
	End If
End Function

Function verify_advSearch_quoteIDBool(strQuoteID, intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("QuoteNumberHeader")
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//a)[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	If actual = strQuoteID Then
		verify_advSearch_quoteIDBool = true
	else
		verify_advSearch_quoteIDBool = false
	End If
End Function
'==================================================
'Validate the quote status 
'==================================================

Function Quote_QuoteStatus(strQuoteStatus)
	Dim temp : temp = Browser("name:=Home.*").Page("title:=Home.*").WebElement("xpath:=//DIV[@id=""customerData""]/DIV[5]/DIV[3]/SPAN[1]/SPAN[1]").GetROProperty("innertext")

	If temp = strQuoteStatus  Then
		Reporter.ReportEvent micPass, "Valide quote status","Quote Status is Quote/Configuration Created"
	Else
		Reporter.ReportEvent micFail, "Valide quote status","Quote Status is not Quote/Configuration Created"
	End If
End Function

'==================================================
'Clicks Customer Data Ship to tab
'==================================================
sub CustomerData_ShipTo()
	Browser("NGQ").Page("Quote - Customer Data").WebElement("ShipTo").DoubleClick
	Wait 1
end sub

'==================================================
'Checks the same as sold to address checkbox
'==================================================
Sub CustomerDataShipTo_SameAsSoldToAddress()
	if Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address Webcheckbox").Exist(1) then
		Browser("NGQ").Page("Quote - Customer Data - Ship To").WebCheckBox("Same as Sold to Address Webcheckbox").CheckBox
	End if
End Sub

'*******************************************************************************************
'Clicks on Pricing and terms tab
'*******************************************************************************************
Sub Quote_PricinadAndTermsTab()
	Browser("NGQ").Page("Quote").WebElement("PricingTermsTab").Click
	wait 1
End Sub

'*******************************************************************************************
' sets Target discount percentage under auto allocation section
'*******************************************************************************************

Sub SetAutoAllocTargReqDiscPercentage(strTargReqDiscPercentage)
	Browser("NGQ").Page("Auto Allocation").WebEdit("AutoAllocation _Target ReqDiscPercentage").Set strTargReqDiscPercentage
	Browser("NGQ").Page("Auto Allocation").WebElement("Apply").Click
	If Browser("NGQ").Page("Auto Allocation").WebElement("Yes").Exist Then
		Browser("NGQ").Page("Auto Allocation").WebElement("Yes").Click
	End If
End Sub

'*******************************************************************************************
'Clicks the triangle button beside the "Refresh Pricing" button 
'*******************************************************************************************
Sub click_Triangle()
	Browser("NGQ").Page("Quote").WebElement("Triangle").Click	
End Sub

'*******************************************************************************************
'Clicks the "Request Special Pricing" button.
'*******************************************************************************************
Sub Select_RequestSpecialPricing()
	Browser("NGQ").Page("Triangle").WebElement("Triangle").Click
	Browser("NGQ").Page("Triangle").WebElement("Request Special Pricing").Click
End Sub

'*******************************************************************************************
'Selects Request Eclipse Bid Desk approval and clicks cubmit
'*******************************************************************************************
'Selects Request Eclipse Bid Desk approval and clicks cubmit
Sub Select_RequestEclipseBidDeskApproval()
	Browser("NGQ").Page("Triangle").WebRadioGroup("Special Requerst - Request Eclipse Bid Desk Approval").Select "2"
	Browser("NGQ").Page("Triangle").WebElement("Submit Special Pricing Request").Click
End Sub

'*******************************************************************************************
' Validates special pricing in progress is visible
'*******************************************************************************************
Sub validate_SpecialPriceInProgress()
	if Browser("NGQ").Page("Triangle").WebElement("Special Pricing In Progress").Exist(1) then
		Reporter.ReportEvent micPass, "Quote Status: ", "Special Pricing in progress"
	else
		Reporter.ReportEvent micFail, "Quote Status: ", "Special Pricing in progress"
	End if
		
End Sub

'*******************************************************************************************
'Returns eclipse deal id
'*******************************************************************************************
Function get_EclipseDealId()
	Dim temp : temp = Browser("NGQ").Page("Quote").WebElement("Eclipse Deal Id").GetROProperty("innertext")
End Function

'*******************************************************************************************
'Clicks searched quote number
'*******************************************************************************************

Sub Click_SearchedQuoteNumber()
	Browser("NGQ").Page("Navbar - My Dashboard").Link("Auto Filter Searched Quote Number").Click
End Sub

'*******************************************************************************************
'Selects pre-validate under triangle
'*******************************************************************************************
Sub Select_Prevalidate()
	Browser("NGQ").Page("Triangle").WebElement("Triangle").Click
	Browser("NGQ").Page("Triangle").WebElement("Pre-Validate").Click
End Sub

'*******************************************************************************************
'Validates the pdf contains the external comments
'*******************************************************************************************
Function validateCommentInPdf(strExternalComments)
	Dim pdfObj 
	Dim path
	path = DataTable("OutputFilePath","Global")
	'UFT IS DUMB, IGNORE THIS ERROR, IT IS VALID VBSCRIPT, IT WILL RUN REGARDLESS
	set pdfObj = NewPdfParser(path) 'poi~'
	Dim temp: temp = pdfObj.compareCommentsBlock(strExternalComments)
	If temp Then
	Reporter.ReportEvent micPass, "PDF Compare: ", "Pdf contains comment: " & strExternalComments
	Else 
		Reporter.ReportEvent micFail, "PDF Compare: ", "Pdf doesn't contains External Comments"
	End If
End Function

'*******************************************************************************************
'Sets Quote number in the quote number column and hits  enter from the keyboard
'*******************************************************************************************
Function SetAutoFilterQuoteNumber(quoteNumber)
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter for column").Click 
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter for column").Set quoteNumber
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter for column").SendKeys "~"
End Function

'*******************************************************************************************
'Closes browser
'*******************************************************************************************
Sub Close_Browser()
	Browser("NGQ").Close
End Sub

'*******************************************************************************************
'Saves the pdf in designed path
'*******************************************************************************************
Sub SavePdfAs(strPath)
	Browser("NGQ").WinObject("Save Bar").WinButton("Save Drop Down Menu").Click
	UFT.ReplayType = 2

	Browser("NGQ").WinObject("Save Bar").WinMenu("Save Drop Down Menu").Select "Save as"
	'UFT.ReplayType = 1
	'Browser("NGQ").Dialog("Save As").WinEdit("File name:").Set strPath
	Browser("NGQ").Dialog("Save As").WinToolbar("FolderPath").Click
	Browser("NGQ").Dialog("Save As").WinEdit("edit").Set strPath
	Browser("NGQ").Dialog("Save As").WinEdit("edit").Type  micReturn

'	Browser("NGQ").Dialog("Save As").WinEdit("File name:").Click
'	Dim wshshell
'	Set wshshell = CreateObject("WScript.Shell")
'	wshshell.Sendkeys "{ENTER}"
	'print "have saved file to path: " & strPath
	Browser("NGQ").Dialog("Save As").WinButton("Save").Click
	UFT.ReplayType = 1
End Sub 

'*******************************************************************************************
'Saves the path on the datatable
'*******************************************************************************************
Sub OutputQuote_SaveQuotePdf(strQuoteNum)
	Dim strSavePath
	strSavePath = CreateSavePath(strQuoteNum)
	Dim strSavePathForPDF : strSavePathForPDF =  Environment.Value("TestDir") + "\..\..\data\pdfs"
	SavePdfAs strSavePathForPDF
	DataTable.GlobalSheet.AddParameter "OutputFilePath", strSavePath
End Sub

'*******************************************************************************************
'Creates a path for pdf
'*******************************************************************************************
Function CreateSavePath(strQuoteNum)
	Dim strCreatedPath
	'It's quite wired, will store the file in the products folder instead of pdfs folder
	strCreatedPath = Environment.Value("TestDir") + "\..\..\data\pdfs\" + strQuoteNum + ".pdf"
	'strCreatedPath = Environment.Value("TestDir") + "\..\..\data\pdfs\" + strQuoteNum + ".pdf"
	'strCreatedPath = "C:\temp\" & strQuoteNum & ".pdf"
	CreateSavePath = strCreatedPath
End Function 

Sub Quote_create_newVersion(strSource, strReason, strComment)
	Browser("NGQ").Page("Quote").WebElement("NewVersion").Click
	Browser("NGQ").Page("Quote").WebList("NewVersionRevisionSource").Select strSource
	Browser("NGQ").Page("Quote").WebList("NewVersionRevisionReason").Select strReason
	Browser("NGQ").Page("Quote").WebEdit("NewVersionRevisionComment").Set strComment
	Browser("NGQ").Page("Quote").WebElement("NewVersionSubmit").Click
End Sub

Sub quote_newVersion(oldQuoteID)
	Quote_create_NewVersion DataTable.Value("versionSource", "Global"), DataTable.Value("versionReason", "Global"), DataTable.Value("versionComment", "Global")
	verify_newVersion_message
	Verify_quoteID oldQuoteID
	Dim temp : temp = DataTable.Value("quoteVersion", "Global")
	temp = temp - 1
	If temp < 10 Then
		Verify_quoteName "New Version of " & oldQuoteID & "-0" & temp
	else
		Verify_quoteName "New Version of " & oldQuoteID & "-" & temp
	End If
	Verify_quoteVersion "To be assigned"
	Quote_save
	Verify_quoteVersion	DataTable.Value("quoteVersion", "Global")	
End Sub

'==================================================
' END pramesh
'==================================================

'alexandro Quote
'validate if the quote tab is active/selected
Function ValidateQuoteTab()
    If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Validate Quote Tab").Exist(1) Then
            Reporter.ReportEvent micPass, "Valide Quote Tab","The quote tab is selected"
    Else 
            Reporter.ReportEvent micFail, "Valide Quote Tab","The quote tab is Not selected"        
    End If
End Function
'enter and submit th equote number in My Dashboard
Function FillFilterQuoteNumber(quoteNumber)
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").Click 
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").Set quoteNumber
    Browser("NGQ").Page("Navbar - My Dashboard").WebEdit("Filter Quote Number").SendKeys "~"
    'EnterKeys
End Function

Function ClickAutoFilter()
    Browser("NGQ").Page("Navbar - My Dashboard").WebElement("BtnAutoFilter").Click
End Function

'To get the quote dynamically each time
'Function GetFirstQuoteNumberofMyGroupQuote()
'	GetFirstQuoteNumberofMyGroupQuote = Browser("NGQ").Page("Navbar - My Dashboard").Link("First Quote Num in My Group Quote").GetROProperty("innertext")
'End Function
Function GetFirstQuoteNumberofMyGroupQuote(intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("QuoteNumberHeader")
	'dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/span[not(contains(@class,'ng-hide'))]/a"
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//a)[" & intIndex & "]"
	'dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	GetFirstQuoteNumberofMyGroupQuote = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
End Function

Function GetFirstQuoteNumberofMyQuote(intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("QuoteNumberHeader")
	'dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]/span[not(contains(@class,'ng-hide'))]/a"
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//a)[" & intIndex & "]"
	'dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	GetFirstQuoteNumberofMyQuote = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
End Function
Function EnterKeys()
	UFT.ReplayType = 2
	Dim objKey 
	set objKey = CreateObject("WScript.shell")
	objKey.SendKeys("{ENTER}")
	UFT.ReplayType = 1
End Function
'Jesus stuff
'TODO Jesus: Add comments to my functions
'Functions for "upload products file section of NGQ
' Clicks on the upload product button
Sub uploadProduct()
	Dim strOriginType : strOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote").WebElement("Upload").Object.scrollIntoView
	Browser("NGQ").Page("Quote").WebElement("Upload").MouseOver
	UFT.ReplayType = strOriginType
	wait 1
    Browser("NGQ").Page("Quote").WebElement("UploadProduct").Click
    Browser("NGQ").Page("Upload Product File").WebElement("Choose File").Click
End Sub

' Uploads the product
Sub setUploadProductPath(strName)
	Browser("NGQ").Dialog("Choose File to Upload").WinEdit("File name:").Set strName
	Browser("NGQ").Dialog("Choose File to Upload").WinButton("Open").Click
End Sub

Function getProductFilePath(strFileName)
	Dim strProductFilePath
	strProductFilePath = Environment.Value("TestDir") & "\..\..\data\products\" & strFileName
	getProductFilePath = strProductFilePath
End Function

Sub UploadProducts_VerifyProducts(strFilePath)
	Dim intRows, intRowIter, intColIter, strCellData, strExcelData

	UploadProducts_VerifyHeaders

	Dim objExcel
	Set objExcel = createobject("excel.application")
	objExcel.Workbooks.open strFilePath
	Dim objExSheet : Set objExSheet = objExcel.ActiveWorkbook.Worksheets("Sheet1")
	intRows = objExSheet.UsedRange.Rows.Count
	
	For intRowIter = 1 To intRows Step 1
		For intColIter = 1 To 3 Step 1
			If intColIter = 3 Then
				strCellData = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(intRowIter+2, intColIter+1)
			Else
				strCellData = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(intRowIter+2, intColIter)
			End If
			
			strExcelData = objExSheet.cells(intRowIter, intColIter).value
			If StrComp(strCellData, strExcelData, 1) <> 0 Then
				Reporter.ReportEvent micFail, "Upload Product Table", "There was a missmatch between the search results and product upload sheet " _
																		& "(Row: " & intRowIter & ", Column: " & intColIter & ") NGQ Table: " _
																		& strCellData & " Excel: " & strExcelData
			End If
		Next		
	Next
	Reporter.ReportEvent micPass, "Product Table Verified", "Products from the search results have been verified"
	
	objExcel.ActiveWorkbook.Close
	objExcel.Application.Quit
	Set objExSheet = nothing
	Set objExcel = nothing
End Sub

Sub UploadProducts_VerifyHeaders()
	Dim strColOneHeader : strColOneHeader = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(1, 1)
	Dim strColTwoHeader : strColTwoHeader = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(1, 2)
	Dim strColThreeHeader : strColThreeHeader = Browser("NGQ").Page("Upload Product File").WebTable("Uploaded Products Table").GetCellData(1, 3)
	
	If Trim(strColOneHeader) = "Quantity" Then
		Reporter.ReportEvent micPass, "Quantity Header", "Quantity header sucessfully labeled"
	Else 
		Reporter.ReportEvent micFail, "Quantity Header", "Incorrect Quantity header.  Expected: ""Quantity"" Actual: " & strColOneHeader
		ExitTest
	End If
	
	If Trim(strColTwoHeader) = "Product Number" Then
		Reporter.ReportEvent micPass, "Product Number Header", "Product Number header sucessfully labeled"
	Else 
		Reporter.ReportEvent micFail, "Product Number Header", "Incorrect Product Number header.  Expected: ""Product Number"" Actual: " & strColTwoHeader
		ExitTest
	End If
	
	If Trim(strColThreeHeader) = "Product Description" Then
		Reporter.ReportEvent micPass, "Product Description Header", "Product Description header sucessfully labeled"
	Else 
		Reporter.ReportEvent micFail, "Product Description Header", "Incorrect Product Description header.  Expected: ""Product Description"" Actual: " & strColThreeHeader
		ExitTest
	End If

End Sub

Sub UploadProducts_changeDataColumns(strQuantity, strProduct, strDesc, strRowNum)
	Browser("NGQ").Page("Upload Product File").WebList("Quantity Column").Select strQuantity
	Browser("NGQ").Page("Upload Product File").WebList("Product Column").Select strProduct
	Browser("NGQ").Page("Upload Product File").WebList("Product Description Column").Select strDesc
	Browser("NGQ").Page("Upload Product File").WebEdit("Skip Rows Edit").Set strRowNum
End Sub

Sub UploadProducts_ProceedWithImport()
    Browser("NGQ").Page("Upload Product File").WebElement("Proceed with Import").Click
End Sub

Sub UploadProducts_VerifyAddToQuoteTabDisplayed()
	If Browser("NGQ").Page("Upload Product File").WebElement("productAddToQuoteTab").CheckProperty("class", MicRegExpMatch(".*active")) Then
		Reporter.ReportEvent micPass, "Add to Quote Tab", "Add to quote tab is selected and being displayed"
	Else
		Reporter.ReportEvent micFail, "Add to Quote Tab", "Add to quote tab is not selected and being displayed"
	End If
End Sub

Sub UploadProducts_AddValidProducts()
    Browser("NGQ").Page("Upload Product File").WebElement("Add Valid Products To").Click
End Sub

Sub UploadProducts_ProductsAddedMsg()
	If Browser("NGQ").Page("Quote").WebElement("SuccessMessage").Exist(1) Then
        Reporter.ReportEvent micPass, "Products Added Message", "Products added message successfully displayed"
    ElseIf Browser("NGQ").Page("Quote").WebElement("WarningMessage").Exist(1) Then
        Reporter.ReportEvent micDone, "Obsolete Product Message", "The obsolete product message is being displayed"
    Else
    	Reporter.ReportEvent micFail, "Products Added Message", "Products added message not displayed"
    End If
End Sub

Function QuoteOutput_ExternalComments(strExternalComments)
    Browser("NGQ").Page("Navbar - New Quote").WebElement("QuoteOutput_ExternalCommentEdit").Click
    Browser("NGQ").Page("Navbar - New Quote").WebEdit("QuoteOutput_ExternalCommentEditBox").Set strExternalComments
End Function
''end jesus

Sub Quote_create_newVersion(strSource, strReason, strComment)
	Browser("NGQ").Page("Quote").WebElement("NewVersion").Click
	Browser("NGQ").Page("Quote").WebList("NewVersionRevisionSource").Select strSource
	Browser("NGQ").Page("Quote").WebList("NewVersionRevisionReason").Select strReason
	Browser("NGQ").Page("Quote").WebEdit("NewVersionRevisionComment").Set strComment
	Browser("NGQ").Page("Quote").WebElement("NewVersionSubmit").Click
End Sub

Sub quote_newVersion(oldQuoteID)
	Quote_create_NewVersion DataTable.Value("versionSource", "Global"), DataTable.Value("versionReason", "Global"), DataTable.Value("versionComment", "Global")
	verify_newVersion_message
	Verify_quoteID oldQuoteID
	Dim temp : temp = DataTable.Value("quoteVersion", "Global")
	temp = temp - 1
	If temp < 10 Then
		Verify_quoteName "New Version of " & oldQuoteID & "-0" & temp
	else
		Verify_quoteName "New Version of " & oldQuoteID & "-" & temp
	End If
	Verify_quoteVersion "To be assigned"
	Quote_save
	Verify_quoteVersion	DataTable.Value("quoteVersion", "Global")	
End Sub

Sub verify_newVersion_message()
	if Browser("NGQ").Page("Quote").WebElement("Quote_Save_Message").GetROProperty("innertext") = "New version number will be generated upon save." then
		Reporter.ReportEvent micPass, "New Version of Quote Created","New Version successfully created"
	else
		Reporter.ReportEvent micFail, "New Version of Quote Created","New Version failed to create"
	End if
End Sub

Sub Verify_quoteID(strQuoteID)
	If Browser("NGQ").Page("Quote").WebElement("QuoteID").GetROProperty("innertext") = strQuoteID Then
		Reporter.ReportEvent micPass, "QuoteID Comparison","Quote ID Valid"
	else
		Reporter.ReportEvent micFail, "QuoteID Comparison","Quote ID NOT Valid"
	End If
End Sub

Sub Verify_quoteVersion(strVersionID)
	If Browser("NGQ").Page("Quote").WebElement("quoteVersion").GetROProperty("innertext") = strVersionID Then
		Reporter.ReportEvent micPass, "Quote Version Comparison","Quote Version Valid"
	else
		Reporter.ReportEvent micFail, "Quote Version Comparison","Quote Version NOT Valid"
	End If
End Sub

Sub Verify_quoteName(strQuoteName)
	If Browser("NGQ").Page("Quote").WebElement("quoteName").GetROProperty("innertext") = strQuoteName Then
		Reporter.ReportEvent micPass, "Quote Name Comparison","Quote Name Valid"
	else
		Reporter.ReportEvent micFail, "Quote Name Comparison","Quote Name NOT Valid, Received " & Browser("NGQ").Page("Quote").WebElement("quoteName").GetROProperty("innertext")
	End If
End Sub

Sub Quote_GrandTotal_Changed(strGrandTotal)
	If get_grand_total = Browser("NGQ").Page("Quote").WebElement("GrandTotal").GetROProperty("innertext") <> strGrandTotal Then
		Reporter.ReportEvent micPass, "Grand Total Changed", "Grand Total successfully changed"
	else
		Reporter.ReportEvent micPass, "Grand Total Changed", "Grand Total failed to change"
	End If
End Sub

Sub verify_advSearch_versions(strVersion, intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("VersionHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	If actual = strVersion Then
		Reporter.ReportEvent micPass, "Verify Version", "Verified matching version"
	else
		Reporter.ReportEvent micFail, "Verify Version", "Incorrect version found"
	End If
End Sub

Sub verify_advSearch_quoteID(strQuoteID, intIndex)
	Dim dynCol : dynCol = getAdvSearchColumn("QuoteNumberHeader")
	dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//a)[2]"
	dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
	If actual = strQuoteID Then
		Reporter.ReportEvent micPass, "Verify Quote Number", "Verified matching Quote Number"
	else
		Reporter.ReportEvent micFail, "Verify Quote Number", "Incorrect Quote Number found"
	End If
End Sub
	
Function getAdvSearchColumn(strColumnName)
	dim findCol : findCol = Browser("NGQ").Page("AdvancedSearch").WebElement(strColumnName).GetROProperty("class")
	dim matches : set matches = RegexGetMatches(findCol, "(coluiGrid-\w{4})", false)
	if matches.Count = 0 then
	    print "failed"
	end if
	getAdvSearchColumn = Trim(matches(0).Value)
End Function

Sub verify_advSearch_table(strQuoteID)
	Dim it, numRow, version, counter
	counter = 2
	'numRow = DataTable.GetRowCount
	'awful hack because this for loop will run 11 times for 3 line datatable due to DataTable.GetRowCount returning a long
	numRow = DataTable.Value("AdvSearchIt", "Global")
	For it = 1 To numRow Step 1
		version = DataTable.Value("quoteVersion", "Global")
		verify_advSearch_quoteID strQuoteID, counter
		verify_advSearch_versions version, counter
		DataTable.SetPrevRow
		counter = counter + 1
	Next
	'Always do version 01 at the end
	verify_advSearch_quoteID strQuoteID, counter
	verify_advSearch_versions "01", counter
End Sub

Sub verify_product_table
	Dim it, numRow, productNum, productDesc, productOpt, counter
	counter = 3
	numRow = DataTable.GetRowCount
	For it = 1 To numRow Step 1
		productNum = DataTable.Value("productNum","Global")
		productDesc = DataTable.Value("productDesc","Global")
		productOpt = DataTable.Value("productOpt", "Global")
		verify_prodTable_prodNum productNum, counter
		verify_prodTable_prodDesc productDesc, counter
		verify_prodTable_prodOpt productOpt, counter
		DataTable.SetNextRow
		counter = counter + 1
	Next
End Sub

Function getProductTableColumn(strColumnName)
	dim findCol : findCol = Browser("NGQ").Page("Quote - Line Item Details").WebElement(strColumnName).GetROProperty("class")
	dim matches : set matches = RegexGetMatches(findCol, "(uiGrid-\w{4})", false)
	if matches.Count = 0 then
	    print "failed to get the column"
	end if
	getProductTableColumn = Trim(matches(0).Value)
End Function

Sub verify_prodTable_GroupName(strGroupName,intIndex)
	Dim dynCol : dynCol = getProductTableColumn("Group Name Header")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')]//select)[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebList(xpath).GetROProperty("Selection")
	If actual = strGroupName Then
		Reporter.ReportEvent micPass, "Group Name has been set successfully", "Verified matching group name"
	else
		Reporter.ReportEvent micFail, "Group Name has been set successfully", "Incorrect group name found"
	End If
End Sub


Sub verify_prodTable_prodNum(productNum, intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ProductNumberHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	If actual = productNum Then
		Reporter.ReportEvent micPass, "Verify Product Number", "Verified matching Product Number"
	else
		Reporter.ReportEvent micFail, "Verify Product Number", "Incorrect Product Number found"
	End If
End Sub

Sub verify_prodTable_prodDesc(productDesc, intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ProductDescriptionHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	If actual = productDesc Then
		Reporter.ReportEvent micPass, "Verify Product Description", "Verified matching Product Description"
	else
		Reporter.ReportEvent micFail, "Verify Product Description", "Incorrect Product Description found"
	End If
End Sub

Sub verify_prodTable_prodOpt(productOpt, intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ProductOptionHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	If actual = productOpt Then
		Reporter.ReportEvent micPass, "Verify Option", "Verified matching Option"
	else
		Reporter.ReportEvent micFail, "Verify Option", "Incorrect Product Option"
	End If
End Sub

Sub DisplayDealId()
	    If not Browser("NGQ").Page("Quote - Line Item Details").WebElement("DealIdHeader").Exist(1) Then
	    	Browser("NGQ").Page("Quote").WebElement("AddCols").Click
	    	Dim objItem
	    	Dim objElement : set objElement = Browser("NGQ").Page("Quote").WebElement("NewMenu").Object
	    	Dim objItems : set objItems = objElement.getElementsByTagName("button")
	    	For each objItem in objItems
                If objItem.lastChild.nodeValue = " " & "Deal Id" Then
                    objItem.click
                    Browser("NGQ").Page("Quote").WebElement("AddCols").Click
                    Exit sub
                End If
            Next
	    End If
End Sub

Sub DisplayGroupName()
	    If not Browser("NGQ").Page("Quote - Line Item Details").WebElement("Group Name Header").Exist(1) Then
	    	Browser("NGQ").Page("Quote").WebElement("AddCols").Click
	    	Dim objItem
	    	Dim objElement : set objElement = Browser("NGQ").Page("Quote").WebElement("NewMenu").Object
	    	Dim objItems : set objItems = objElement.getElementsByTagName("button")
	    	For each objItem in objItems
                If objItem.lastChild.nodeValue = " " & "Group Name" Then
                    objItem.click
                    Browser("NGQ").Page("Quote").WebElement("AddCols").Click
                    Exit sub
                End If
            Next
	    End If
End Sub

Sub DisplayMCC()
	If not Browser("NGQ").Page("Quote - Line Item Details").WebElement("MCC Header").Exist(1) Then
	    	Browser("NGQ").Page("Quote").WebElement("AddCols").Click
	    	Dim objItem
	    	Dim objElement : set objElement = Browser("NGQ").Page("Quote").WebElement("NewMenu").Object
	    	Dim objItems : set objItems = objElement.getElementsByTagName("button")
	    	For each objItem in objItems
                If objItem.lastChild.nodeValue = " " & "MCC" Then
                    objItem.click
                    Browser("NGQ").Page("Quote").WebElement("AddCols").Click
                    Exit sub
                End If
            Next
	    End If
End Sub

Function get_prodTable_dealId(intIndex)
	Dim dynCol : dynCol = getProductTableColumn("DealIdHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	get_prodTable_dealId = actual
End Function

Function get_product_number(intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ProductNumberHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	get_product_number = actual
End Function

Function get_item_number(intIndex)
	Dim dynCol : dynCol = getProductTableColumn("ItemNumberHeader")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]"
	dim actual : actual = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	get_item_number = actual
End Function

Sub ClickCompanyPencilBtn()
	Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("EditCompany").Click
End Sub

Sub EditCompanyName(StrCompanyName)
	Browser("NGQ").Page("Quote - Customer Data - Sold To").WebEdit("Company Name").Set StrCompanyName
	Browser("NGQ").Page("Quote - Customer Data - Sold To").WebEdit("Company Name").SendKeys "~"
End Sub


' Author: Jesus
'==================================================
Sub Ocs_SelectAndConfigureProduct()
	Browser("NGQ").Page("OCS").WebElement("Networking Product HTML ID").Click
	Browser("NGQ").Page("OCS").WebElement("Networking - Wireless Devices").Click
	Browser("NGQ").Page("OCS").WebElement("Wireless Devices - HPE M210 AP").Click
	Browser("NGQ").Page("OCS").WebElement("HPE M210 - JL023A").Click
End Sub

Sub Ocs_SaveBom()
	Browser("NGQ").Page("OCS").WebButton("BOM Save Btn").Click
End Sub

Sub Ocs_SaveBomValid()
	Dim strSuccessfulMsgText
	strSuccessfulMsgText = Browser("NGQ").Page("OCS").WebElement("Save Succesful Confirmation").InnerText
	If Browser("NGQ").Page("OCS").WebElement("Save Succesful Confirmation").Exist _
   	   And strSuccessfulMsgText = "Untitled Successfully saved - Click ""Next"" to continue." Then
		Reporter.ReportEvent micPass, "Save confirmation found", "Succesful save confirmation was found"
	Else
		Reporter.ReportEvent micPass, "Save confirmation not found", "Succesful save confirmation was not found"
	End If
End Sub

Sub Ocs_ClickConvertToQuote()
	Browser("NGQ").Page("OCS").WebElement("Next - Convert To Quote Btn").Click
End Sub

'To display the Product Description column in the line item details page
Sub DisplayProductDescriptionColumn
	If not Browser("NGQ").Page("Quote - Line Item Details").WebElement("ProductDescriptionHeader").Exist(1) Then
		Browser("NGQ").Page("Quote").WebElement("AddCols").Click
		Dim objItem
		Dim objElement : set objElement = Browser("NGQ").Page("Quote").WebElement("NewMenu").Object
		Dim objItems : set objItems = objElement.getElementsByTagName("button")
		For each objItem in objItems
            If objItem.lastChild.nodeValue = " Product Description" Then
                objItem.click
                Browser("NGQ").Page("Quote").WebElement("AddCols").Click
                Exit sub
            End If
        Next
	End If
End Sub

'To display the Option column in the line item details page
Sub DisplayProductOptionColumn
	If not Browser("NGQ").Page("Quote - Line Item Details").WebElement("ProductOptionHeader").Exist(1) Then
		Browser("NGQ").Page("Quote").WebElement("AddCols").Click
		Dim objItem
		Dim objElement : set objElement = Browser("NGQ").Page("Quote").WebElement("NewMenu").Object
		Dim objItems : set objItems = objElement.getElementsByTagName("button")
		For each objItem in objItems
            If objItem.lastChild.nodeValue = " Option" Then
                objItem.click
                Browser("NGQ").Page("Quote").WebElement("AddCols").Click
                Exit sub
            End If
        Next
	End If
End Sub

Sub CheckHeaderOfHomePage(strSystemName, strLoginUser)
	If Browser("NGQ").Page("Home").WebElement("HeaderOfHomePage").Exist(1) Then
		Logger.report MicPass, "The header is displayed","The header appears correctly"
	else
		logger.report micFail, "The header is NOT loaded","Fail to load"
	End If
	If Browser("NGQ").Page("Home").WebElement("LogoOfHPE").Exist(1) Then
		Logger.report MicPass, "The HPE logo is displayed","The HPE logo appears correctly"
	else
		logger.report micFail, "The logo is NOT displayed","Logo not load"
	End If
	If Browser("NGQ").Page("Home").Link("Log Out").Exist(1) Then
		Logger.report MicPass, "The log out button is displayed","The log out appears correctly"
	Else 
		logger.report micFail, "The log out button is NOT displayed", "Button not load"
	End If
	If Browser("NGQ").Page("Home").WebElement("NavigationMenus").Exist(1) Then
		Logger.report MicPass, "The navigation menus are displayed","The navigation menus appear correctly"
	else
		logger.report micFail, "The navigation menus are NOT displayed", "Navigation menus not load"
	End If
	If Browser("NGQ").Page("Home").WebList("LanguageSelect").Exist(1) Then
		Logger.report MicPass, "The languange selection is displayed","The languange selection appears correctly"
	else
		logger.report micFail, "The languange selection is NOT displayed", "Language selection not load"
	End If
	If Browser("NGQ").Page("Home").WebEdit("SimpleSearchForm").Exist(1) Then
		Logger.report MicPass, "The simple search form is displayed","The simple search form appears correctly"
	else
		logger.report micFail, "The simple search form is NOT displayed", "simple search form not load"
	End If
	Dim strSystemNameShowed : strSystemNameShowed = Browser("NGQ").Page("Home").WebElement("SystemName").InnerText
	If strSystemNameShowed = strSystemName Then
		Logger.report MicPass, "The system name: " & strSystemNameShowed & " is displayed correctly","System name displays correctly"
	Else 
		logger.report micFail, "The system name: " & strSystemNameShowed & " is NOT displayed correctly", "System name not load"
	End If
	Dim strUserShowed : strUserShowed =Browser("NGQ").Page("Home").WebElement("LoginUser").InnerText
	If strUserShowed = strLoginUser Then
		Logger.report MicPass, "Login user: " & strUserShowed & " shows correctly","The right user is displayed"
	else
		logger.report micFail, "Login user doses NOT show correctly","User not load"
	End If
End Sub

Sub CheckQuickSearchOfHomePage()
	If Browser("NGQ").Page("Home").WebEdit("QuoteNumber").Exist(1) Then
		Logger.report MicPass, "The quote number search form is displayed","The quote number search form appears correctly"
	Else 
		logger.report micFail, "The quote number search form is NOT displayed", "The quote number search form not load"
	End If
	If Browser("NGQ").Page("Home").WebEdit("MDCP Org ID").Exist(1) Then
		Logger.report MicPass, "The MDCP Org ID search form is displayed","The MDCP Org ID search form appears correctly"
	else
		logger.report micFail, "The MDCP Org ID search form is NOT displayed", "The MDCP Org ID search form not load"
	End If
	If Browser("NGQ").Page("Home").WebEdit("Product Number").Exist(1) Then
		Logger.report MicPass, "The Product Number search form is displayed","The Product Number search form appears correctly"
	else
		logger.report micFail, "The Product Number search form is NOT displayed", "The Product Number search form not load"
	End If
	If Browser("NGQ").Page("Home").WebEdit("Created By Email").Exist(1) and Browser("NGQ").Page("Home").WebEdit("Created By Email").GetROProperty("placeholder") = "Ex: me@ex33ample.com" Then
		Logger.report MicPass, "The Created By Email search form is displayed","The Created By Email search form appears correctly"
	else
		logger.report micFail, "The Created By Email search form is NOT displayed", "The Created By Email search form not load"
	End If
	If Browser("NGQ").Page("Home").WebEdit("Opportunity ID").Exist(1) Then
		Logger.report MicPass, "The Opportunity ID search form is displayed","The Opportunity ID search form appears correctly"
	else
		logger.report micFail, "The Opportunity ID search form is NOT displayed", "The Opportunity ID search form not load"
	End If
	Dim strStatusDefault : strStatusDefault = DataTable.GetSheet("Global").GetParameter("Status").ValueByRow(1)
	If Browser("NGQ").Page("Home").WebList("Status").Exist(1) and strStatusDefault = "Please Select One" Then
		Logger.report MicPass, "The Status search list is displayed","The Status search list appears correctly"
	else
		logger.report micFail, "The Status search list is NOT displayed", "The Status search list not load"
	End If
	Dim strCountryDefault : strCountryDefault = DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(1)
	If Browser("NGQ").Page("Home").WebList("Country").Exist(1) and strCountryDefault = "Please Select One" Then
		Logger.report MicPass, "The Country search list is displayed","The Country search list appears correctly"
	else
		logger.report micFail, "The Country search list is NOT displayed", "he Country search list not load"
	End If
	If Browser("NGQ").Page("Home").WebButton("Search").Exist(1) Then
		Logger.report MicPass, "The search button is displayed","The search button appears correctly"
	else
		logger.report micFail,"The search button is NOT displayed","The search button not load"
	End If
End Sub

Sub CheckDashboardDocumentPhotoOfHomePage()
	If Browser("NGQ").Page("Home").WebElement("My Dashboard").Exist(1) Then
		Logger.report MicPass, "My Dashboard section is displayed","My Dashboard section appears correctly"
	else
		logger.report micFail, "My Dashboard section is NOT displayed", "My Dashboard section not load"
	End If
	If Browser("NGQ").Page("Home").WebElement("Document Flow").Exist(1) Then
		Logger.report MicPass, "Document Flow section is displayed","Document Flow section appears correctly"
	else
		logger.report micFail, "Document Flow section is NOT displayed","Document Flow section not load"
	End If
	If Browser("NGQ").Page("Home").WebElement("Photo").Exist(1) Then
		Logger.report MicPass, "The photo is displayed","The photo appears correctly"
	Else 
		logger.report micFail, "The photo is NOT displayed","The photo not load"
	End If
	If Browser("NGQ").Page("Home").WebEdit("Document Search").Exist(1) Then
		Logger.report MicPass, "The Document Search form is displayed","The Document Search form appears correctly"
	Else 
		logger.report micFail, "The Document Search form is NOT displaye", "The Document Search form not load"
	End If
End Sub

Sub CompareListOptionsOfHomePage()
	CompareLanguageList
	CompareStatusList
	CompareHomeCountryList
End Sub

'To compare the listed options of languages in the header of home page
'Sub CompareLanguageList()
'	Dim intRows : intRows = 1
'	Browser("NGQ").Page("Home").Link("Displayed Language").Click
'	Dim intNumberOfLanguages : intNumberOfLanguages = Browser("NGQ").Page("Language Select").WebList("LanguageSelect").ItemsCount
'	While DataTable.GetSheet("Global").GetParameter("Language").ValueByRow(intRows) <> ""
'		intRows = intRows + 1
'	Wend
'	intRows = intRows - 1
'	If intRows = intNumberOfLanguages Then
'		Dim i
'		For i = 1 To intRows Step 1
'			If Browser("NGQ").Page("Language Select").WebList("LanguageSelect").HasItem(DataTable.GetSheet("Global").GetParameter("Language").ValueByRow(i)) Then
'				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("Language").ValueByRow(i) & " shows in the list", "The language shows"
'			Else
'				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("Language").ValueByRow(i) & " does NOT show in the list", "Fail to show the language"
'			End If
'		Next
'	Else
'		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
'	End If
'End Sub

Sub CompareLanguageList()
	Dim intRows : intRows = 1
	'Browser("NGQ").Page("Home").Link("Displayed Language").Click
	Dim intNumberOfLanguages : intNumberOfLanguages = Browser("NGQ").Page("Language Select").WebList("LanguageSelect").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("Language").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfLanguages Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Language Select").WebList("LanguageSelect").HasItem(DataTable.GetSheet("Global").GetParameter("Language").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("Language").ValueByRow(i) & " shows in the list", "The language shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("Language").ValueByRow(i) & " does NOT show in the list", "Fail to show the language"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

'To compare the listed options of status in the quick search section
Sub CompareStatusList()
	Dim intRows : intRows = 1
	Dim intNumberOfLanguages : intNumberOfLanguages = Browser("NGQ").Page("Home").WebList("Status").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("Status").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfLanguages Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Home").WebList("Status").HasItem(DataTable.GetSheet("Global").GetParameter("Status").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("Status").ValueByRow(i) & " shows in the list", "The status shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("Status").ValueByRow(i) & " does NOT show in the list", "Fail to show the status"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

'To compare the listed options of country in the quick search section
Sub CompareHomeCountryList()
	Dim intRows : intRows = 1
	Dim intNumberOfLanguages : intNumberOfLanguages = Browser("NGQ").Page("Home").WebList("Country").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfLanguages Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Home").WebList("Country").HasItem(DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(i) & " shows in the list", "The country shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(i) & " does NOT show in the list", "Fail to show the country"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

'To check whether each item shows in the page
Sub CheckEachExists(arrSource)
	Dim intSourceLen : intSourceLen = Ubound(arrSource)
	Dim i
	For i = 0 To intSourceLen - 1 Step 1
		Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Dynamic Column{xpath}").SetTOProperty "xpath", "//div//span[./i]/preceding-sibling::span[.='" & arrSource(i) & "']"
		If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Dynamic Column{xpath}").Exist(1) Then
			Logger.Report micPass, arrSource(i) & " column exists", "Column shows correctly"
		ElseIf Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Data Source Column").Exist(1) Then
			MoveScrollBarToRight
			If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Dynamic Column{xpath}").Exist(1) Then
				Logger.Report micPass, arrSource(i) & " column exists", "Column shows correctly"
			else
				Logger.Report micFail, arrSource(i) & " column does NOT show in the page", "Column doesn't show correctly"
			End If
		ElseIf Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Owner History Column").Exist(1) Then
			MoveScrollBarToLeft
			If Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Dynamic Column{xpath}").Exist(1) Then
				Logger.Report micPass, arrSource(i) & " column exists", "Column shows correctly"
			else
				Logger.Report micFail, arrSource(i) & " column does NOT show in the page", "Column doesn't show correctly"
			End If
		End If
	Next
End Sub


Sub ChangeToMyDashboard()
	Browser("NGQ").Page("Navbar - My Dashboard").Link("My Dashboard").Click
End Sub

'Store data from excel to arrays
Function GetSourceDataFromExcel()
	Dim intCounter : intCounter = 1
	Dim arrSource()
	While DataTable.GetSheet("Global").GetParameter("Columns").ValueByRow(intCounter) <> ""
		ReDim preserve arrSource(intCounter)
		arrSource(intCounter - 1) = DataTable.GetSheet("Global").GetParameter("Columns").ValueByRow(intCounter)
		intCounter = intCounter + 1
	Wend
	GetSourceDataFromExcel = arrSource
End Function

'To compare two arrays to see whether all the items in arrSource exists in arrDest
Sub CompareTwoArrays(arrSource,arrDest)
	Dim intSourceLen : intSourceLen = Ubound(arrSource)
	Dim intDestlen : intDestlen = Ubound(arrDest)
	Dim i,j
	For i = 0 To intSourceLen - 1 Step 1
		For j = 0 To intDestLen - 1 Step 1
			If arrSource(i) = arrDest(j) Then
				Reporter.ReportEvent micPass, arrSource(i) & " has been showed in the page", "Item shows correctly"
				Exit For
			End If
		Next
		If j = intDestLen Then
			Reporter.ReportEvent micFail, arrSource(i) & " has NOT been showed in the page", "Item does NOT appear"
		End If
	Next
End Sub

Sub ChangeToAdvancedSearch()
	Browser("NGQ").Page("Navbar - AdvancedSearch").Link("Advanced Search").Click
End Sub

Sub ChangeToHomePage()
	Browser("NGQ").Page("Navbar").Link("Home").Click
End Sub

Sub CheckDefaultPageOfAdvancedSearch()
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Quote Number").Exist(1) Then
		Logger.report MicPass, "The quote number search form is displayed","The quote number search form appears correctly"
	else
		logger.report micFail, "The quote number search form is NOT displayed", "The quote number search form not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Quote Number & Version").Exist(1) Then
		Logger.report MicPass, "The Quote Number & Version search form is displayed", "shows rightly"
	else
		logger.report micFail,"The Quote Number & Version search form is NOT displayed","Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Company Name").Exist(1) Then
		Logger.report MicPass, "The Company Name search form is displayed","shows rightly"
	else
		logger.report micFail, "The Company Name search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Quote Start Date(From)").Exist(1) Then
		Logger.report MicPass, "The Quote Start Date(From) search form is displayed","shows rightly"
	else
		logger.report micFail, "The Quote Start Date(From) search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Product Number").Exist(1) Then
		Logger.report MicPass, "The Product number search form is displayed","shows rightly"
	Else 
		logger.report micFail,"The Product number search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Customer Line Item Number(CLIN)").Exist(1) Then
		Logger.report MicPass, "The Customer Line Item Number(CLIN) search form is displayed","shows rightly"
	Else 
		logger.report micFail,"The Customer Line Item Number(CLIN) search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Quote Name").Exist(1) Then
		Logger.report MicPass, "The Quote  Name search form is displayed","shows rightly"
	Else 
		logger.report micFail,"The Quote  Name search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Order Number").Exist(1) Then
		Logger.report MicPass, "The Order Number search form is displayed","shows rightly"
	Else 
		logger.report micFail,"The Order Number search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Create By(Email)").Exist(1) and Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Create By(Email)").GetROProperty("placeholder") = "Specify Email (Ex:me@example.com)" Then
		Logger.report MicPass, "The Create By search form is displayed","shows rightly"
	Else 
		logger.report micFail,"The Create By search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Last Edited by(Email)").Exist(1) and Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Last Edited by(Email)").GetROProperty("placeholder") = "Specify Email (Ex:me@example.com)" Then
		Logger.report MicPass, "The Last Edited By search form is displayed","shows rightly"
	Else 
		logger.report micFail,"The Last Edited By search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Quote End Date(To)").Exist(1) Then
		Logger.report MicPass, "The Quote End Date search form is displayed","shows rightly"
	Else 
		logger.report micFail,"The Quote End Date search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Opportunity ID").Exist(1) Then
		Logger.report MicPass, "The Opportunity ID search form is displayed","shows rightly"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("MDCP Id").Exist(1) Then
		Logger.report MicPass, "The MDCP Org ID search form is displayed","shows rightly"
	Else 
		logger.report micFail,"The MDCP Org ID search form is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Quote Status").Exist(1) and Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Quote Status").GetROProperty("selection") = "Please Select One" then
		Logger.report MicPass, "The Quote status list is displayed","shows rightly"
	Else 
		logger.report micFail,"The Quote status list is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Country Code").Exist(1) and Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Country Code").GetROProperty("selection") = "Please Select One" Then
		Logger.report MicPass, "The Country Code list is displayed","shows rightly"
	Else 
		logger.report micFail,"The Country Code list is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Region Code").Exist(1) and Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Region Code").GetROProperty("selection") = "Please Select One" Then
		Logger.report MicPass, "The Region Code list is displayed","shows rightly"
	Else 
		logger.report micFail,"The Region Code list is NOT displayed", "Not load"
	End If
	If Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Data Source").Exist(1) and Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Data Source").GetROProperty("selection") = "NGQ" Then
		Logger.report MicPass, "The Data Source list is displayed","shows rightly"
	Else 
		logger.report micFail,"The Data Source list is NOT displayed", "Not load"
	End If
End Sub

Sub CompareListOptionsOfAdvancedSearch()
	CompareQuoteStatusList
	CompareCountryCodeList
	CompareRegionCodeList
	CompareDataSourceList
End Sub

Sub CompareQuoteStatusList()
	Dim intRows : intRows = 1
	Dim intNumberOfQuoteStatus : intNumberOfQuoteStatus = Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Quote Status").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("QuoteStatus").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfQuoteStatus Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Quote Status").HasItem(DataTable.GetSheet("Global").GetParameter("QuoteStatus").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("QuoteStatus").ValueByRow(i) & " shows in the list", "The status shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("QuoteStatus").ValueByRow(i) & " does NOT show in the list", "Fail to show the status"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

Sub CompareCountryCodeList()
	Dim intRows : intRows = 1
	Dim intNumberOfCountryCode : intNumberOfCountryCode = Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Country Code").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("CountryCode").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfCountryCode Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Country Code").HasItem(DataTable.GetSheet("Global").GetParameter("CountryCode").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("CountryCode").ValueByRow(i) & " shows in the list", "The country shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("CountryCode").ValueByRow(i) & " does NOT show in the list", "Fail to show the country"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

Sub CompareRegionCodeList()
	Dim intRows : intRows = 1
	Dim intNumberOfRegionCode : intNumberOfRegionCode = Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Region Code").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("RegionCode").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfRegionCode Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Region Code").HasItem(DataTable.GetSheet("Global").GetParameter("RegionCode").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("RegionCode").ValueByRow(i) & " shows in the list", "The region shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("RegionCode").ValueByRow(i) & " does NOT show in the list", "Fail to show the region"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

Sub CompareDataSourceList()
	Dim intRows : intRows = 1
	Dim intNumberOfDataSource : intNumberOfDataSource = Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Data Source").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("DataSource").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfDataSource Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Navbar - AdvancedSearch").WebList("Data Source").HasItem(DataTable.GetSheet("Global").GetParameter("DataSource").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("DataSource").ValueByRow(i) & " shows in the list", "The data source shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("DataSource").ValueByRow(i) & " does NOT show in the list", "Fail to show the data source"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

Sub ClickMyPreferenceUnderAdminTools()
	Dim intReplayType : intReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Navbar-AdminTools").WebElement("Admin Tools").MouseOver
	Browser("NGQ").Page("Navbar-AdminTools").WebElement("My Preferences tab").Click
	UFT.ReplayType = intReplayType
End Sub

Sub CheckDefaultValueOfSelectDefaultCountry()
	Dim strDefaultValue : strDefaultValue = Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Select Default Country").Value
	If strDefaultValue = "U.S.A." Then
		Logger.Report micPass, "The default value is right","Default value: U.S.A. shows correctly"
	else
		logger.report micFail, "The default value is not U.S.A.","Default value is wrong"
	End If
End Sub

Sub CompareCountryList()
	Dim intRows : intRows = 1
	Dim intNumberOfCountry : intNumberOfCountry = Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Select Default Country").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfCountry Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Select Default Country").HasItem(DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(i) & " shows in the list", "The country shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("Country").ValueByRow(i) & " does NOT show in the list", "Fail to show the country"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

Sub CompareAvailableColumnList()
	Dim intRows : intRows = 1
	Dim intNumberOfAvailableColumn : intNumberOfAvailableColumn = Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Available Column List").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("AvailableColumns").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfAvailableColumn Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Available Column List").HasItem(DataTable.GetSheet("Global").GetParameter("AvailableColumns").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("AvailableColumns").ValueByRow(i) & " shows in the list", "The item shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("AvailableColumns").ValueByRow(i) & " does NOT show in the list", "Fail to show the item"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

Sub CompareAssignedColumnList()
	Dim intRows : intRows = 1
	Dim intNumberOfAssignedColumn : intNumberOfAssignedColumn = Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").ItemsCount
	While DataTable.GetSheet("Global").GetParameter("AssignedColumns").ValueByRow(intRows) <> ""
		intRows = intRows + 1
	Wend
	intRows = intRows - 1
	If intRows = intNumberOfAssignedColumn Then
		Dim i
		For i = 1 To intRows Step 1
			If Browser("NGQ").Page("Navbar-AdminTools/My preferences").WebList("Assigned Column List").HasItem(DataTable.GetSheet("Global").GetParameter("AssignedColumns").ValueByRow(i)) Then
				Logger.report MicPass, DataTable.GetSheet("Global").GetParameter("AssignedColumns").ValueByRow(i) & " shows in the list", "The item shows"
			Else
				Logger.report MicFail, DataTable.GetSheet("Global").GetParameter("AssignedColumns").ValueByRow(i) & " does NOT show in the list", "Fail to show the item"
			End If
		Next
	Else
		Logger.report MicFail, "The number of required options does NOT equal to the listed options","They are not equal"
	End If
End Sub

Sub CompareTwoQuote(strQuoteNumber,strQuote)
	If strQuoteNumber = strQuote Then
		Logger.Report micPass, "Quote Transfered successfully","Transfer quote successfully"
	else
		Logger.Report micFail, "Failed to transfer quote","Failed"
	End If
End Sub

Sub ClickHome()
	Browser("NGQ").Page("Home").WebElement("Home").Click
End Sub

Sub ChangeToResultTable()
	Browser("NGQ").Page("Quote - Search Product").WebElement("Search Results").Click
End Sub

Sub CheckStatusColumnsExist()
	if Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Data Source").Exist(1) then
		logger.report micPass, "'Data Source' column exists", "Column exists"
	else
		logger.report micFail, "'Data Source' column does not exist", "Not Exist"
	End if
	if Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Quote Status").Exist(1) then
		logger.report micPass, "'Quote Status' column exists", "Column exists"
	else
		logger.report micFail, "'Quote Status' column does not exist", "Not Exist"
	End if
	if Browser("NGQ").Page("Navbar - My Dashboard").WebElement("Count").Exist(1) then
		logger.report micPass, "'Count' column exists", "Column exists"
	else
		logger.report micFail, "'Count' column does not exist", "Not Exist"
	End if	
End Sub

Sub CheckDealIdDisplayed(strDealID)
	Dim strXpath : strXpath = "xpath:=//div/span[.='" & strDealID & "']"
	If Browser("NGQ").Page("Quote - Line Item Details").WebElement(strXpath).Exist(1) Then
		Logger.report micPass, "Deal Id generated","Pass"
	else
		Logger.report micFail, "Fail to generate Deal Id","Fail"
	End If
End Sub

Function FetchDealId()
	Dim strValue : strValue = Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Deal Info Msg").InnerText
	strValue = mid(strValue,6,9)
	FetchDealId = strValue
End Function

Sub CheckDealGenerateInfoDisplay()
	Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Complete Quote Btn").Click
	If Browser("NGQ").Page("Quote - Pre-Validation").WebElement("Deal Info Msg").Exist(1) Then
		Logger.report micPass, "Infor displayed","Displays inform message"
	else
		Logger.report micFail, "Fails to generate Deal","Fails"
	End If
End Sub

Sub CheckHPEFS()
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("HPEFS").Click
End Sub

Sub SearchWithQuoteNumber(strQuoteNumber)
	Dim strReplayType : strReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Home").WebEdit("SimpleSearchForm").Set strQuoteNumber
	UFT.ReplayType = strReplayType
	Dim strXpath : strXpath = "xpath:=//ul/li[.='" & strQuoteNumber & "  IN QUOTE#']"
	Browser("NGQ").Page("Home").WebElement(strXpath).Click
End Sub

Sub SearchWithOppID(strOppID)
	Dim strReplayType : strReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Home").WebEdit("SimpleSearchForm").Set strOppID
	UFT.ReplayType = strReplayType
	Dim strXpath : strXpath = "xpath:=//ul/li[.='" & strOppID & "  IN OPPORTUNITY ID']"
	Browser("NGQ").Page("Home").WebElement(strXpath).Click
End Sub

Sub SearchWithCompanyName(strCompanyName)
	Dim strReplayType : strReplayType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Home").WebEdit("SimpleSearchForm").Set strCompanyName
	UFT.ReplayType = strReplayType
	Dim strXpath : strXpath = "xpath:=//ul/li[.='" & strCompanyName &"  IN COMPANY NAME']"
	Browser("NGQ").Page("Home").WebElement(strXpath).Click
End Sub

Sub CheckOppSearchReslut(strOppValue)
	Dim dynCol : dynCol = getAdvSearchColumn("Opportunity ID Header")
	Dim intIndex
	For intIndex = 3 To 8 Step 1
		Dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')]//span)[" & intIndex & "]"
		If Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).Exist(1) Then
			Dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
			If actual = strOppValue Then
				Reporter.ReportEvent micPass, "Verify Opportunity ID", "Verified matching Opportunity ID"
			else
				Reporter.ReportEvent micFail, "Verify Opportunity ID", "Incorrect Opportunity ID found"
			End If
		else
			Exit for
		End If
	Next
End Sub

Sub CheckNameSearchReslut(strNameValue)
	Dim dynCol : dynCol = getAdvSearchColumn("Company Name Header")
	Dim intIndex
	For intIndex = 7 To 12 Step 1
		Dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')]//div)[" & intIndex & "]"
		If Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).Exist(1) Then
			Dim actual : actual = Browser("NGQ").Page("AdvancedSearch").WebElement(xpath).GetROProperty("innertext")
			If actual = strNameValue Then
				Reporter.ReportEvent micPass, "Verify Company Name", "Verified matching Company Name"
			else
				Reporter.ReportEvent micFail, "Verify Company Name", "Incorrect Company Name found"
			End If
		else
			Exit for
		End If
	Next
End Sub

Sub InputSearchCriterias(strQuoteNumber,strMDCPOrgID,strProductNumber,strLoginUser,strOppID)
	Browser("NGQ").Page("Home").WebEdit("QuoteNumber").Set strQuoteNumber
	Browser("NGQ").Page("Home").WebEdit("MDCP Org ID").Set strMDCPOrgID
	Browser("NGQ").Page("Home").WebEdit("Product Number").Set strProductNumber
	Browser("NGQ").Page("Home").WebEdit("Created By Email").Set strLoginUser
	Browser("NGQ").Page("Home").WebEdit("Opportunity ID").Set strOppID
End Sub

Sub CompareSearchCriterias(strLoginUser,strOppID,strMDCPOrgID,strProductNumber,strQuoteNumber)
	Dim strQuote : strQuote = Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Quote Number").GetROProperty("innertext")
	If strQuote = strQuoteNumber Then
		logger.report micPass,"Quote Number shows in advanced page","Shows correctly"
	else
		logger.report micFail,"Quote Number not equal","Fail to compare"
	End If
	Dim strUser : strUser = Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Create By(Email)").GetROProperty("innertext")
	If strUser = strLoginUser Then
		logger.report micPass,"User shows in advanced page","Shows correctly"
	else
		logger.report micFail,"User not equal","Fail to compare"
	End If
	Dim strOpportunityID : strOpportunityID = Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Opportunity ID").GetROProperty("innertext")
	If strOpportunityID = strOppID Then
		logger.report micPass,"Opportunity ID shows in advanced page","Shows correctly"
	else
		logger.report micFail,"Opportunity ID not equal","Fail to compare"
	End If
	Dim strMDCPID : strMDCPID = Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("MDCP Id").GetROProperty("innertext")
	If strMDCPID = strMDCPOrgID Then
		logger.report micPass,"MDCP Org ID shows in advanced page","Shows correctly"
	else
		logger.report micFail,"MDCP Org ID not equal","Fail to compare"
	End If
	Dim strProduct : strProduct = Browser("NGQ").Page("Navbar - AdvancedSearch").WebEdit("Product Number").GetROProperty("innertext")
	If strProduct = strProductNumber Then
		logger.report micPass,"Product Number shows in advanced page","Shows correctly"
	else
		logger.report micFail,"Product Number not equal","Fail to compare"
	End If
End Sub

Sub PopUpCustomerSearch()
	Browser("NGQ").Page("Quote - Customer Data").WebButton("Customer Search").Click
End Sub

Sub ClickSearchButton()
	Browser("NGQ").Page("Customer Search").WebButton("Search").Click
End Sub

Sub EnterCustomerSearchCriterias(strMDCDOrgID,strCompanyName,strStreet1,strCity,strZipCode,strCountry)
	Browser("NGQ").Page("Customer Search").WebEdit("MDCP Org ID").Set strMDCDOrgID
	Browser("NGQ").Page("Customer Search").WebEdit("Company Name").Set strCompanyName
	Browser("NGQ").Page("Customer Search").WebEdit("Street 1").Set strStreet1
	Browser("NGQ").Page("Customer Search").WebEdit("City").Set strCity
	Browser("NGQ").Page("Customer Search").WebEdit("Zip Code").Set strZipCode
	Browser("NGQ").Page("Customer Search").WebList("Country").Select strCountry
End Sub

Sub CheckSoldTo()
	Browser("NGQ").Page("Customer Search").WebCheckBox("Sold To").CheckBox
End Sub
Sub CheckBillTo()
	Browser("NGQ").Page("Customer Search").WebCheckBox("Bill To").CheckBox
End Sub
Sub CheckShipTo()
	Browser("NGQ").Page("Customer Search").WebCheckBox("Ship To").CheckBox
End Sub
Sub CheckReseller()
	Browser("NGQ").Page("Customer Search").WebCheckBox("Reseller").CheckBox
End Sub
Sub CheckEndCustomer()
	Browser("NGQ").Page("Customer Search").WebCheckBox("End Customer").CheckBox
End Sub

Sub ValidateDataPopulated(strMDCDOrgID)
	Dim strSoldMDCP : strSoldMDCP = Browser("NGQ").Page("Customer Search").WebElement("SoldTo MDCP Org ID").GetROProperty("innertext")
	If strSoldMDCP = strMDCDOrgID Then
		logger.report micPass,"Sold to data populated","Generated"
	else
		logger.report micFail,"Sold to data NOT populated","Not generated"
	End If
	Dim strBillMDCP : strBillMDCP = Browser("NGQ").Page("Customer Search").WebElement("BillTo MDCP Org ID").GetROProperty("innertext")
	If strBillMDCP = strMDCDOrgID Then
		logger.report micPass,"Bill to data populated","Generated"
	else
		logger.report micFail,"Bill to data NOT populated","Not generated"
	End If
	Dim strShipMDCP : strShipMDCP = Browser("NGQ").Page("Customer Search").WebElement("ShipTo MDCP Org ID").GetROProperty("innertext")
	If strShipMDCP = strMDCDOrgID Then
		logger.report micPass,"Ship to data populated","Generated"
	else
		logger.report micFail,"Ship to data NOT populated","Not generated"
	End If
	Dim strResellerMDCP : strResellerMDCP = Browser("NGQ").Page("Customer Search").WebElement("Reseller MDCP Org ID").GetROProperty("innertext")
	If strResellerMDCP = strMDCDOrgID Then
		logger.report micPass,"Reseller data populated","Generated"
	else
		logger.report micFail,"Reseller data NOT populated","Not generated"
	End If
	Dim strEndCustomerMDCP : strEndCustomerMDCP = Browser("NGQ").Page("Customer Search").WebElement("EndCustomer MDCP Org ID").GetROProperty("innertext")
	If strEndCustomerMDCP = strMDCDOrgID Then
		logger.report micPass,"End customer data populated","Generated"
	else
		logger.report micFail,"End customer data NOT populated","Not generated"
	End If
End Sub

Sub UnCheckReseller()
	Browser("NGQ").Page("Customer Search").WebCheckBox("Reseller").UncheckBox
End Sub
Sub UnCheckEndCustomer()
	Browser("NGQ").Page("Customer Search").WebCheckBox("End Customer").UncheckBox
End Sub
Sub SubmitCustomerData()
	Browser("NGQ").Page("Customer Search").WebButton("Submit").Click
End Sub

Sub ValidateSoldToData(strMDCDOrgID)
	Dim strValue : strValue = Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("MDCP Org ID").GetROProperty("innertext")
	If strValue = strMDCDOrgID Then
		logger.report micPass,"Sold to data generated","Pass"
	else
		logger.report micFail,"Sold to data not generated","Fail"
	End If
End Sub
Sub ValidateShipToData(strMDCDOrgID)
	Dim strValue : strValue = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebElement("MDCP Org ID").GetROProperty("innertext")
	If strValue = strMDCDOrgID Then
		logger.report micPass,"Ship to data generated","Pass"
	else
		logger.report micFail,"Ship to data not generated","Fail"
	End If
End Sub
Sub ValidateBillToData(strMDCDOrgID)
	Dim strValue : strValue = Browser("NGQ").Page("Quote - Customer Data - Bill To").WebElement("MDCP Org ID").GetROProperty("innertext")
	If strValue = strMDCDOrgID Then
		logger.report micPass,"Bill to data generated","Pass"
	else
		logger.report micFail,"Bill to data not generated","Fail"
	End If
End Sub
Sub ValidateResellerData(strMDCDOrgID)
	Dim strValue : strValue = Browser("NGQ").Page("Quote - Customer Data").WebElement("Reseller MDCP Org ID").GetROProperty("innertext")
	If strValue <> strMDCDOrgID and strValue="" Then
		logger.report micPass,"Reseller data generated","Pass"
	else
		logger.report micFail,"Reseller data not generated","Fail"
	End If
End Sub
Sub ValidateEndCustomerData(strMDCDOrgID)
	Dim strValue : strValue = Browser("NGQ").Page("Quote - Customer Data").WebElement("End Customer MDCP Org ID").GetROProperty("innertext")
	If strValue <> strMDCDOrgID and strValue="" Then
		logger.report micPass,"End Customer data generated","Pass"
	else
		logger.report micFail,"End Customer data not generated","Fail"
	End If
End Sub

Sub ValidateAddedProduct(strProductNumber,intQty,intIndex)
	Dim dynCol : dynCol = getProductTableColumn("QuantityHeader")
	Dim xpath : xpath = "xpath:=((//div[contains(@class, '" & dynCol & "')])[" & intIndex & "]//span)[1]"
	Dim intQuantity : intQuantity = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).GetROProperty("innertext")
	intQuantity = Cint(intQuantity)
	Dim dynColProduct : dynColProduct = getProductTableColumn("ProductNumberHeader")
	Dim xpath2 : xpath2 = "xpath:=(//div[contains(@class,'" & dynColProduct & "')])[" & intIndex & "]//span"
	Dim strProduct : strProduct = Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath2).GetROProperty("innertext")
	If strProduct = strProductNumber and intQuantity = intQty Then
		logger.report micPass,"Product has been added","Add succesfully"
	else
		logger.report micFail,"Fail to add product","Fail"
	End If
End Sub

Sub SelectFirstLineProduct(intIndex)
	Dim intOriginType : intOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim dynColProduct : dynColProduct = getProductTableColumn("ProductNumberHeader")
	Dim xpath : xpath = "xpath:=(//div[contains(@class,'" & dynColProduct & "')])[" & intIndex & "]//span"
	Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).Object.ScrollIntoView
	Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).Click
	UFT.ReplayType = intOriginType
End Sub

Sub SelectOption()
	Browser("NGQ").Page("Quote - Line Item Details").WebList("ProductOption").Select "Option"
End Sub

Sub SetOptionValue(strOptionValue,intIndex)
	Dim dynColOption : dynColOption = getProductTableColumn("ProductOptionHeader")
	Dim xpath : xpath = "xpath:=(//div[contains(@class,'" & dynColOption & "')])[" & intIndex & "]//input"
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit(xpath).Set strOptionValue
	Browser("NGQ").Page("Quote - Line Item Details").WebEdit(xpath).SendKeys "~"
End Sub

Sub EnterString(strValue)
	Dim objWsh : Set objWsh = CreateObject("WScript.Shell")
	objWsh.SendKeys strValue
	Set objWsh = Nothing
End Sub

Sub QuickAddProducts(strProduct1,strProduct2)
	Dim intOriginType : intOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Product_QuickAdd").WebElement("Row1Column1").FireEvent "ondblclick"
	EnterString strProduct1
	Browser("NGQ").Page("Product_QuickAdd").WebElement("Row1Column2").FireEvent "ondblclick"
	EnterString "0D1"
	Browser("NGQ").Page("Product_QuickAdd").WebElement("Row1Column4").FireEvent "ondblclick"
	EnterString 5
	Browser("NGQ").Page("Product_QuickAdd").WebElement("Row2Column1").FireEvent "ondblclick"
	EnterString strProduct2
	EnterKey
	wait 1
	Browser("NGQ").Page("Product_QuickAdd").WebElement("Submit").Click
	UFT.ReplayType = intOriginType
End Sub

Sub PopUpGroupNameDialog(intIndex)
	RightClickLineItem intIndex
	Browser("NGQ").Page("Quote - Line Item Details").RunScript "document.getElementById('menu_1').getElementsByTagName('a')[1].click()"
End Sub

Sub RightClickLineItem(intIndex)
	Dim intOriginType : intOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim dynColProduct : dynColProduct = getProductTableColumn("ProductNumberHeader")
	Dim xpath : xpath = "xpath:=(//div[contains(@class,'" & dynColProduct & "')])[" & intIndex & "]//span"
	Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).RightClick
	UFT.ReplayType = intOriginType
End Sub

Sub PopUpLineItemMCCDialog(intIndex)
	RightClickLineItem intIndex
	MouseOverMCC
	Browser("NGQ").Page("Quote - Line Item Details").RunScript "document.getElementById('item_9').getElementsByTagName('a')[0].click()"
End Sub

Sub MouseOverMCC()
	Dim intOriginType : intOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Browser("NGQ").Page("Quote - Line Item Details").WebElement("SubMenu MCC").MouseOver
	wait 1
	UFT.ReplayType = intOriginType
End Sub

Sub SetGroupName(strName)
	Browser("NGQ").Page("Assign Group Name").WebList("Group Name").Select strName
	Browser("NGQ").Page("Assign Group Name").WebElement("Save").Click
End Sub

Sub ManualSelectGroupName(strGroupName,intIndex)
	Dim dynCol : dynCol = getProductTableColumn("Group Name Header")
	dim xpath : xpath = "xpath:=(//div[contains(@class, '" & dynCol & "')]//select)[" & intIndex & "]"
	Browser("NGQ").Page("Quote - Line Item Details").WebList(xpath).select strGroupName
End Sub

Sub RemoveManualAddedPA(intIndex)
	Dim intOriginType : intOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim dynColProduct : dynColProduct = getProductTableColumn("ProductNumberHeader")
	Dim xpath : xpath = "xpath:=(//div[contains(@class,'" & dynColProduct & "')])[" & intIndex & "]//span"
	Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).RightClick
	UFT.ReplayType = intOriginType
	Browser("NGQ").Page("Quote - Line Item Details").RunScript "document.getElementById('item_20').getElementsByTagName('a')[0].click()"
End Sub

Sub AddHeaderLevelPA(strPA)
	Browser("NGQ").Page("Pricing and Terms").WebEdit("PA Number").Set strPA
	Browser("NGQ").Page("Pricing and Terms").WebList("Customer Application Code").Select "V=VAR"
	Browser("NGQ").Page("Pricing and Terms").WebButton("ValidatePA").Click
	OverRidePA
End Sub

Sub OverRidePA()
	Browser("NGQ").Page("Pricing and Terms").WebElement("Override PA Yes").Click
End Sub


Sub AddLintItemPA(strPA, intIndex)
	PopUpSearchPADialog intIndex
	SelectPreferedPA strPA
End Sub

Sub PopUpSearchPADialog(intIndex)
	Dim intOriginType : intOriginType = UFT.ReplayType
	UFT.ReplayType = 2
	Dim dynColProduct : dynColProduct = getProductTableColumn("ProductNumberHeader")
	Dim xpath : xpath = "xpath:=(//div[contains(@class,'" & dynColProduct & "')])[" & intIndex & "]//span"
	Browser("NGQ").Page("Quote - Line Item Details").WebElement(xpath).RightClick
	UFT.ReplayType = intOriginType
	Browser("NGQ").Page("Quote - Line Item Details").RunScript "document.getElementById('item_16').getElementsByTagName('a')[0].click()"
End Sub

Sub SelectPreferedPA(strPA)
	Browser("NGQ").Page("SearchPA").WebEdit("Add new PA Number").Set strPA
	Browser("NGQ").Page("SearchPA").WebList("Customer Application Code").SelectByValue "V"
	Browser("NGQ").Page("SearchPA").WebElement("Add").Click
	wait 1
	SelectFirstLinePA strPA
End Sub

Sub SelectFirstLinePA(strPA)
	Dim strXpath : strXpath = "xpath:=//div[@id='paNumberSearchResult']//td[.='" & strPA & "']"
	Browser("NGQ").Page("SearchPA").WebElement(strXpath).Click
	Browser("NGQ").Page("SearchPA").WebElement("Select").Click
End Sub

Sub DisplayPANumberColumn()
	If not Browser("NGQ").Page("Quote - Line Item Details").WebElement("PA Number Header").Exist(1) Then
	    	Browser("NGQ").Page("Quote").WebElement("AddCols").Click
	    	Dim objItem
	    	Dim objElement : set objElement = Browser("NGQ").Page("Quote").WebElement("NewMenu").Object
	    	Dim objItems : set objItems = objElement.getElementsByTagName("button")
	    	For each objItem in objItems
                'print objItem.lastChild.nodeValue
                If objItem.lastChild.nodeValue = " " & "PA Number" Then
                    objItem.click
                    Browser("NGQ").Page("Quote").WebElement("AddCols").Click
                    Exit sub
                End If
            Next
	    End If
End Sub

Sub ValidateLineItemMCC(intIndex,strLineItemValue)
	Dim strValue, item
	Dim strAddedMCC : strAddedMCC = LineItemDetails_CaptureMCCDiscount(intIndex)
	Dim arrResults : Set arrResults = FetchNumber("\d*%",strAddedMCC)
	For Each item in arrResults
		If item.value = "" Then
			logger.report micFail, "No MCC shows","No MCC is added successfully"
		Else 
			strValue = item.value
			Exit for
		End If
	Next
	strValue = Replace(strValue, "%", "")
	If cint(strValue) = cint(strLineItemValue) Then
		logger.report micPass, "The MCC is added successfully","MCC Added"
	else
		logger.report micFail,"Wrong MCC shows","Wrong data"
	End If
End Sub

Function FetchNumber(patrn,stringValue)
	Dim regEx
	Set regEx = new RegExp
	regEx.Pattern = patrn
	regEx.IgnoreCase = True
	Set FetchNumber =regEx.Execute(stringValue)
	Set regEx = Nothing
End Function

Function LineItemDetails_CaptureMCCDiscount(intIndex)
	Dim dynColProduct : dynColProduct = getProductTableColumn("MCC Header")
	Dim strXpath : strXpath = "xpath:=(//div[contains(@class,'" & dynColProduct & "')])[" & intIndex & "]//a/div"
	LineItemDetails_CaptureMCCDiscount = Browser("NGQ").Page("Quote - Line Item Details").WebElement(strXpath).GetROProperty("innertext")
End Function

Sub ApplyLineItemMCC(strMCC ,strDiscountType,strPercent,intDiscount)
	Browser("NGQ").Page("MCC Line Details").WebList("MCC").Select strMCC
	Browser("NGQ").Page("MCC Line Details").WebList("Discount Type").Select strDiscountType
	Browser("NGQ").Page("MCC Line Details").WebList("Percent").Select strPercent
	Browser("NGQ").Page("MCC Line Details").WebEdit("Value").Set intDiscount
	Browser("NGQ").Page("MCC Line Details").WebElement("Enter Arrow").Click
	Browser("NGQ").Page("MCC Line Details").WebButton("Close").Click
End Sub
