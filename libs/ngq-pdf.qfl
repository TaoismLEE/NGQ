Option Explicit

Sub PdfVerification(strPdfFilePath, blnSoldTo, blnShipTo, blnSalesContact, blnLineItem, blnGrandTotal, blnComment, blnHeader)
	Dim objPdfInfo : Set objPdfInfo = NewPdfInfo(blnSoldTo, blnShipTo, blnSalesContact, blnLineItem, blnGrandTotal, blnComment, blnHeader)	
	objPdfInfo.Compare(strPdfFilePath)
End Sub

Class PdfInfo
	'Quote Number
	Dim strQuoteNumber
	
	'Sold To Fields
	Dim strSoldTo_CompanyName
	Dim strSoldTo_StAddress
	Dim strSoldTo_City
	Dim strSoldTo_State
	Dim strSoldTo_PostalCode
	Dim strSoldTo_Country
	
	'Ship to fields
	Dim strShipTo_CompanyName
	Dim strShipTo_StAddress
	Dim strShipTo_City
	Dim strShipTo_State
	Dim strShipTo_PostalCode
	Dim strShipTo_Country
	
	'HPE Sales Contact info
	Dim strSalesInfo_Name
	Dim strSalesInfo_Phone
	Dim strSalesInfo_Email
	
	'Line Item information
	Dim strProductNum()
	Dim strProductDesc()
	Dim intQuantity()
	Dim dblExtendedNetVal()
	Dim intSubTotal
	Dim intProductCount
	
	Dim dblGrandTotal
	
	'Comment
	Dim strExternalComment
	
	'Header
	Dim strHeader
	
	'Save bool parameters
	Dim blnPdfSoldTo
	Dim blnPdfShipTo
	Dim blnPdfSalesContact
	Dim blnPdfLineItem
	Dim blnPdfGrandTotal
	Dim blnPdfComment
	Dim blnPdfHeader
	
	Public Function Init(blnSoldTo, blnShipTo, blnSalesContact, blnLineItem, blnGrandTotal, blnComment, blnHeader)
		strQuoteNumber = Quote_get_quoteNumber
		
		'Go to Customer Data Tab if any of these three are true
		If blnSoldTo Or blnShipTo Then
			Quote_CustomerDataTab
		End If
		
		If blnSoldTo Then
			GetSoldTo
		End If
		
		If blnSalesContact Then
			GetSalesContact
		End If
		
		If blnShipTo Then
			GetShipTo
		End If
		
		If blnLineItem Then
			GetLineItems
		End If
		
		If blnGrandTotal Then
			GetGrandTotal
		End If
		
		If blnComment Then
			GetExternalComment
		End If
		
		If blnHeader Then
			GetHeader
		End If
		
		blnPdfSoldTo = blnSoldTo
		blnPdfShipTo = blnShipTo
		blnPdfSalesContact = blnSalesContact
		blnPdfLineItem = blnLineItem
		blnPdfGrandTotal = blnGrandTotal
		blnPdfComment = blnComment
		blnPdfHeader = blnHeader	
	End Function 'End Init
	
	Private Sub GetSoldTo()
		'Navigate to sold to tab
		CustomerData_SoldToTab()
		
		'Get the information from the page
		strSoldTo_CompanyName = Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("Company Name").GetROProperty("innertext")
		strSoldTo_StAddress = Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("Street Address One").GetROProperty("innertext")
		strSoldTo_City = Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("City").GetROProperty("innertext")
		strSoldTo_State = Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("State").GetROProperty("innertext")
		strSoldTo_PostalCode = Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("Postal Code").GetROProperty("innertext")
		strSoldTo_Country = Browser("NGQ").Page("Quote - Customer Data - Sold To").WebElement("Country").GetROProperty("innertext")
	End Sub
	
	Private Sub GetShipTo()
		'Navigate to Ship To tab
		CustomerData_ShipToTab
		
		'Get the information from the page
		strShipTo_CompanyName = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebElement("Company Name").GetROProperty("innertext")
		strShipTo_StAddress = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebElement("Street Address One").GetROProperty("innertext")
		strShipTo_City = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebElement("City").GetROProperty("innertext")
		strShipTo_State = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebElement("State").GetROProperty("innertext")
		strShipTo_PostalCode = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebElement("Postal Code").GetROProperty("innertext")
		strShipTo_Country = Browser("NGQ").Page("Quote - Customer Data - Ship To").WebElement("Country").GetROProperty("innertext")
	End Sub
	
	Private Sub GetSalesContact()
		Dim strSelectedTab : strSelectedTab = Browser("NGQ").Page("Quote").WebElement("Quote_CurrentlySelectedTab").GetROProperty("innertext")
		If strSelectedTab <> "Opportunity and Quote Info" Then
			'Navigate to opportunity and quote info tab
			Quote_OpportunityAndQuoteInfoTab
		End If
		
		'Get info
		strSalesInfo_Name = Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebElement("Opportunity ID Contact Name").GetROProperty("innertext")
		strSalesInfo_Phone = Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebElement("Contact Phone").GetROProperty("innertext")
		strSalesInfo_Email = Browser("NGQ").Page("Quote - Opportunity and Quote Info").WebElement("Contact Email").GetROProperty("innertext")
	End Sub
	
	Private Sub GetLineItems()
		Dim intProdNumCol : intProdNumCol = 0
		Dim intProdDescCol : intProdDescCol = 0
		Dim intQuantityCol : intQuantityCol = 0
		Dim intExtNetValCol : intExtNetValCol = 0
	
		'Get number of products
		CountProducts
		GetHeaderCols intProdNumCol, intProdDescCol, intQuantityCol, intExtNetValCol
		
		'Resize the product and price array
		Redim strProductNum(intProductCount)
		Redim strProductDesc(intProductCount)
		ReDim intQuantity(intProductCount)
		Redim dblExtendedNetVal(intProductCount)
		
		'Get the products from the table
		Dim intIterator
		intSubTotal = 0.00
		For intIterator = 0 To intProductCount - 1 Step 1
			strProductNum(intIterator) = getProductNum(intProdNumCol, intIterator)
			strProductDesc(intIterator) = getProductDesc(intProdDescCol, intIterator)
			intQuantity(intIterator) = getProductQuantity(intQuantityCol, intIterator)
			dblExtendedNetVal(intIterator) = getExtendedNetVal(intExtNetValCol, intIterator)
			intSubTotal = intSubTotal + dblExtendedNetVal(intIterator)
		Next
	End Sub
	
	Private Sub GetGrandTotal()
		dblGrandTotal = Browser("NGQ").Page("Quote").WebElement("GrandTotal").GetROProperty("innertext")
	End Sub
	
	Private Sub GetExternalComment()
		Dim strSelectedTab : strSelectedTab = Browser("NGQ").Page("Quote").WebElement("Quote_CurrentlySelectedTab").GetROProperty("innertext")
		If strSelectedTab <> "Quote Output" Then
			Quote_QuoteOutputTab
		End If
		strExternalComment = Browser("NGQ").Page("Quote - Output Quote").WebEdit("External_Comment").GetROProperty("innertext")		
	End Sub
	
	Private Sub GetHeader()
		strHeader = DataTable("PdfExpectedHeader")
	End Sub
	
	Private Function CountProducts()
		dim myElement : Set myElement = Description.Create
		myElement("micclass").value = "WebElement"
		myElement("xpath").Value = "//div[@ui-grid-row='row']"
		dim rows : rows = Browser("NGQ").Page("Quote - Line Item Details").ChildObjects(myElement).Count
		rows = rows / 2
		If rows = 0 Then
			Reporter.ReportEvent micFail, "Invalid number of Line Items", "You must have at least one line item to produce preview"
		Else
			Reporter.ReportEvent micPass, "Valid number of Line Items", intProductCount & " Items in Line Items Details Table"
		End If
	End Function
	
	Sub GetHeaderCols(intProdNumCol, intProdDescCol, intQuantityCol, intExtNetValCol)
		Dim oDesc, colColumns, intIterator
		Dim blnProdNumColFound : blnProdNumColFound = False
		Dim blnProdDescColFound : blnProdDescColFound = False
		Dim blnQuantityColFound : blnQuantityColFound = False
		Dim blnExtNetValColFound : blnExtNetValColFound = False
		Dim intFoundCount : intFoundCount = 0
		Dim strChildInnerHtml

		'Regular expressions
		Dim regExProdNum
		Set regExProdNum = New RegExp
		regExProdNum.Pattern = ".*Product Number.*"
		regExProdNum.IgnoreCase = True
	
		Dim regExProdDesc
		Set regExProdDesc = New RegExp
		regExProdDesc.Pattern = ".*Product Description.*"
		regExProdDesc.IgnoreCase = True
		
		Dim regExQuantity
		Set regExQuantity = New RegExp
		regExQuantity.Pattern = ".*Quantity.*"
		regExQuantity.IgnoreCase = True
		
		Dim regExExtNetVal
		Set regExExtNetVal = New RegExp
		regExExtNetVal.Pattern = ".*Extended Net Value.*"
		regExExtNetVal.IgnoreCase = True

		Set oDesc = Description.Create
		oDesc("micclass").value = "WebElement"
		oDesc("html tag").value = "SPAN"
		oDesc("class").value = "ui-grid-header-cell-label ng-binding"
		
		Set colColumns = Browser("NGQ").Page("Quote - Line Item Details").ChildObjects(oDesc)

		For intIterator = 0 To colColumns.Count - 1 Step 1
			strChildInnerHtml = colColumns(intIterator).GetROProperty("innertext")
			
			If intFoundCount = 4 Then
				Exit For
			End If
			
			If Not blnProdNumColFound And regExProdNum.Test(strChildInnerHtml) Then
				intProdNumCol = intIterator
				blnProdNumColFound = True
				intFoundCount = intFoundCount + 1
			ElseIf Not blnProdDescColFound And regExProdDesc.Test(strChildInnerHtml) Then
				intProdDescCol = intIterator
				blnProdDescColFound = True
				intFoundCount = intFoundCount + 1
			ElseIf Not blnQuantityColFound And regExQuantity.Test(strChildInnerHtml) Then
				intQuantityCol = intIterator
				blnQuantityColFound = True
				intFoundCount = intFoundCount + 1
			ElseIf Not blnExtNetValColFound And regExExtNetVal.Test(strChildInnerHtml) Then
				intExtNetValCol = intIterator
				blnExtNetValColFound = True
				intFoundCount = intFoundCount + 1
			End If			
		Next
	End Sub
	
	Function getProductNum(intCol, intRow)
		Dim xpath : xpath = "//div[@class='ui-grid-canvas']/div["&intRow+1&"]//div[contains(@class,'ui-grid-cell')]["&intCol+1&"]//span/span"
		getProductNum = Browser("NGQ").Page("Quote").WebElement("xpath:="&xpath).GetROProperty("innertext")		
	End Function
	
	Function getProductDesc(intCol, intRow)
		Dim xpath : xpath = "//div[@class='ui-grid-canvas']/div["&intRow+1&"]//div[contains(@class,'ui-grid-cell')]["&intCol+1&"]//div"
		getProductDesc = Browser("NGQ").Page("Quote").WebElement("xpath:="&xpath).GetROProperty("innertext")
	End Function
	
	Function getProductQuantity(intCol, intRow)
		Dim xpath : xpath = "//div[@class='ui-grid-canvas']/div["&intRow+1&"]//div[contains(@class,'ui-grid-cell')]["&intCol+1&"]/span[1]"
		getProductQuantity = Browser("NGQ").Page("Quote").WebElement("xpath:="&xpath).GetROProperty("innertext")
	End Function
	
	Function getExtendedNetVal(intCol, intRow)
		Dim strTemp
		Dim xpath : xpath = "//div[@class='ui-grid-canvas']/div["&intRow+1&"]//div[contains(@class,'ui-grid-cell')]["&intCol+1&"]//span/span"
		strTemp = Browser("NGQ").Page("Quote").WebElement("xpath:="&xpath).GetROProperty("innertext")
		 getExtendedNetVal = CDbl(strTemp)
	End Function
	
	Public Sub Compare(pathToPDF)
		Dim pdfObj : Set pdfObj = NewPdfParser(pathToPDF)

		PdfCompareQuoteNumber pdfObj
		
		If blnPdfSoldTo Then
			PdfCompareSoldTo pdfObj
		End If

		If blnPdfShipTo Then
			PdfCompareShipTo pdfObj
		End If
		
		If blnPdfSalesContact Then
			PdfCompareSalesContact pdfObj
		End If
				
		If blnPdfLineItem Then
			PdfCompareLineItems pdfObj
		End If
		
		If blnPdfGrandTotal Then
			PdfCompareGrandTotal pdfObj
		End If
		
		If blnPdfComment Then
			PdfCompareComment pdfObj 
		End If
		
		If blnPdfHeader Then
			PdfCompareHeader pdfObj
		End If
		
		Set pdfObj = Nothing
	End Sub
	
	Private Sub PdfCompareQuoteNumber(ByRef pdfObj)
		If pdfObj.compareQuoteNumber(strQuoteNumber) Then
			Reporter.ReportEvent micPass, "PDF Quote Number", "Quote number verified in pdf." + vbCrLf + _
										  strQuoteNumber
		Else
			Reporter.ReportEvent micFail, "PDF Quote Number", "Quote number is incorrect in pdf." + vbCrLf + _
										  "Expected: " + strQuoteNumber + vbCrLf + "Actual: " + pdfObj.getQuoteNumber
		End If		
	End Sub
	
	Private Sub PdfCompareSoldTo(ByRef pdfObj)
		Dim strAppendedSoldTo
		strAppendedSoldTo = strSoldTo_CompanyName + " " + strSoldTo_StAddress + " " + strSoldTo_City + ", " + _
							strSoldTo_State + " " + strSoldTo_PostalCode + " " + strSoldTo_Country
							
		If pdfObj.compareSoldToAddress(strAppendedSoldTo) Then
			Reporter.ReportEvent micPass, "PDF Quote Sold To Address", "Quote sold to address verified in pdf." + vbCrLf + _
										  strAppendedSoldTo
		Else
			Reporter.ReportEvent micFail, "PDF Quote Sold To Address", "Quote sold to address is incorrect in pdf." + vbCrLf + _
										  "Expected: " + strAppendedSoldTo + vbCrLf + "Actual: " + pdfObj.getSoldToAddress
		End If
	End Sub
	
	Private Sub PdfCompareShipTo(ByRef pdfObj)
		Dim strAppendedShipTo
		strAppendedShipTo = strShipTo_CompanyName + " " + strShipTo_StAddress + " " + strShipTo_City + ", " + _
							strShipTo_State + " " + strShipTo_PostalCode + " " + strShipTo_Country
		
		If pdfObj.compareShipToAddress(strAppendedShipTo) Then
			Reporter.ReportEvent micPass, "PDF Quote Ship To Address", "Quote ship to address verified in pdf." + vbCrLf + _
										  strAppendedShipTo
		Else
			Reporter.ReportEvent micFail, "PDF Quote Ship To Address", "Quote ship to address is incorrect in pdf." + vbCrLf + _
										  "Expected: " + strAppendedShipTo + vbCrLf + "Actual: " + pdfObj.getShipToAddress
			End If
	End Sub
	
	Private Sub PdfCompareSalesContact(ByRef pdfObj)
		Dim strAppendedSalesContact
		strAppendedSalesContact = strSalesInfo_Name + " " + strSalesInfo_Phone + " " + strSalesInfo_Email
		
		If pdfObj.compareSalesContact(strAppendedSalesContact) Then
			Reporter.ReportEvent micPass, "PDF Quote Sales Contact", "Quote sales contact verified in pdf." + vbCrLf + _
										   strAppendedSalesContact
		Else
			Reporter.ReportEvent micFail, "PDF Quote Sales Contact", "Quote sales contact is incorrect in pdf." + vbCrLf + _
										  "Expected: " + strAppendedSalesContact + vbCrLf + "Actual: " + pdfObj.getSalesContact
		End If
	End Sub
	
	Private Sub PdfCompareLineItems(ByRef pdfObj)
		Dim intIter
		Dim blnRowMatches

		'Todo Jesus: Talk to Josh about getting table count
'		If intProductCount = (pdfObj.productTable.Count() - 1) Then
'			Reporter.ReportEvent micPass, "PDF Quote Items", "Same number of items in PDF and NGQ" & vbCrLf & _
'									      intProductCount
'		Else 
'			Reporter.ReportEvent micFail, "PDF Quote Items", "Item count in NGQ is not the same as in PDF." & vbCrLf & _
'										  "NGQ: " & intProductCount & Chr(9) & "PDF: " & (pdfObj.productTable.Count() - 1)
'		End If

		For intIter = 0 To intProductCount-1 Step 1
			blnRowMatches = pdfObj.compareProductsTableProductsOnly(intIter + 1, intQuantity(intIter), strProductNum(intIter), strProductDesc(intIter))

			If blnRowMatches Then
				Reporter.ReportEvent micPass, "PDF Quote Item: " & (intIter+1), "Line item " & (intIter+1) & " matches in NGQ and pdf." & vbCrLf & _
											  "Qty: " & intQuantity(intIter) & Chr(9) & "Number: " & strProductNum(intIter) & Chr(9) & _
											  "Description: " & strProductDesc(intIter)
			Else
				Reporter.ReportEvent micFail, "PDF Quote Item: " & (intIter+1), "Line item " & (intIter+1) & " does not match in NGQ and pdf." & vbCrLf & _
											  "Expected: Qty: " & intQuantity(intIter) & Chr(9) & "Number: " & strProductNum(intIter) & Chr(9) & _
											  "Description: " & strProductDesc(intIter) & vbCrLf & _
											  "Actual: Qty: " & pdfObj.getProductsQty(intIter+1) & Chr(9) & "Number: " & pdfObj.getProductsProduct(intIter+1) & Chr(9) & _
											  "Description: " & pdfObj.getProductsDescription(intIter+1)
			End If
		Next
	End Sub
	
	Private Sub PdfCompareGrandTotal(ByRef pdfObj)
		If pdfObj.compareTotalsGrandTotal(dblGrandTotal) Then
			Reporter.ReportEvent micPass, "PDF Quote Grand Total", "Quote grand total successfully verified in pdf" + vbCrLf + _
										  dblGrandTotal
		Else
			Reporter.ReportEvent micFail, "PDF Quote Grand Total", "Quote grand total is incorrect in pdf." + vbCrLf + _
										  "Expected: " + dblGrandTotal + Chr(9) + "Actual: " + pdfObj.getTotalsGrandTotal
		End If
	End Sub
	
	Private Sub PdfCompareComment(ByRef pdfObj)
		If pdfObj.compareCommentsBlock(strExternalComment) Then
			Reporter.ReportEvent micPass, "PDF Quote Comment", "Quote comment successfully verified in pdf" + vbCrLf + _
										  strExternalComment
		Else
			Reporter.ReportEvent micFail, "PDF Quote Comment", "Quote comment is incorrect in pdf." + vbCrLf + _
										  "Expected: " + strExternalComment + Chr(9) + "Actual: " + pdfObj.getCommentsBlock
		End If
	End Sub
	
	Private Sub PdfCompareHeader(ByRef pdfObj)
		If pdfObj.compareQuoteHeader(strHeader) Then
			Reporter.ReportEvent micPass, "PDF Quote Header", "Quote header successfully verified in pdf" + vbCrLf + _
										  strHeader
		Else
			Reporter.ReportEvent micFail, "PDF Quote Header", "Quote header is incorrect in pdf." + vbCrLf + _
										  "Expected: " + strHeader + Chr(9) + "Actual: " + pdfObj.getQuoteHeader
		End If
	End Sub
End Class 'End PdfInfo

Function NewPdfInfo(blnSoldTo, blnShipTo, blnSalesContact, blnLineItem, blnGrandTotal, blnComment, blnHeader)
	Set NewPdfInfo = New PdfInfo
	NewPdfInfo.Init blnSoldTo, blnShipTo, blnSalesContact, blnLineItem, blnGrandTotal, blnComment, blnHeader
End Function


'*****************************************************************************************************
' PDF Parsing Class
'*****************************************************************************************************

Class pdfParserObj
	public pdfObj
	
	Public Function Init(pathToPdf)
		Dim strPdfLibPath : strPdfLibPath = Environment.Value("TestDir") & "\..\..\libs\pdfbox.jar"
    	SystemUtil.Run "cmd", "/c java -jar " + strPdfLibPath + " " + pathToPDF,""
    	Wait 10
		dim strDLLPath : strDllPath = Environment.Value("TestDir") & "\..\..\libs\" & "pdfParserWrapper.dll"
		Dim wrapper : Set wrapper = Dotnetfactory.CreateInstance("pdfParserWrapper.pdfParserWrapper", strDLLPath)
		wrapper.deserializeObject()
		Set pdfObj = wrapper.getpdfObj()
		'Set Init = Me
 	End Function
 	
 	Public Function getSoldToAddress()
 		Dim strTemp : strTemp = pdfObj.soldToAddress
 		strTemp = Replace(strTemp, vbCrLf, " ")
 		getSoldToAddress = strTemp
 	End Function
 	
 	Public Function compareSoldToAddress(strSoldAddress)
 		If Instr(strSoldAddress, getSoldTOAddress) <> 0 Or Instr(getSoldTOAddress, strSoldAddress) <> 0 then
 			compareSoldToAddress = True
 		else
 			compareSoldToAddress = False
 		End if
 	End Function
 	
 	Public Function getShipToAddress()
 		Dim strTemp : strTemp = pdfObj.shipToAddress
 		strTemp = Replace(strTemp, vbCrLf, " ")
 		getShipToAddress = strTemp
 	End Function
 	
 	Public Function compareShipToAddress(strShipAddress)
 		If Instr(strShipAddress, getShipTOAddress) <> 0 Or Instr(getShipTOAddress, strShipAddress) <> 0 then
 			compareShipToAddress = True
 		else
 			compareShipToAddress = False
 		End if
 	End Function 	
 	
 	Public Function getQuoteExpire()
 		getQuoteExpire = pdfObj.quoteExpire
 	End Function
 	
 	Public Function compareQuoteExpire(strQuoteExpire)
 		If Instr(strQuoteExpire, getQuoteExpire) <> 0 Or Instr(getQuoteExpire, strQuoteExpire) <> 0 then
 			compareQuoteExpire = True
 		else
 			compareQuoteExpire = False
 		End if
 	End Function 	
 	
 	Public Function getQuoteNumber()
 		getQuoteNumber = pdfObj.quoteNum
 	End Function
 	
 	Public Function compareQuoteNumber(strQuoteNum)
 		If Instr(strQuoteNum, getQuoteNumber) <> 0 Or Instr(getQuoteNumber, strQuoteNum) <> 0 then
 			compareQuoteNumber = True
 		else
 			compareQuoteNumber = False
 		End if
 	End Function 	
 	
 	Public Function getSalesContact()
 		Dim strTemp : strTemp = pdfObj.salesContact
 		Dim arrTemp
 		arrTemp = Split(strTemp, vbCrLf)
 		arrTemp(2) = Replace(arrTemp(2), "Phone:", " ")
 		arrTemp(3) = Replace(arrTemp(3), "Email:", " ")

		strTemp = Trim(arrTemp(1)) + " " + Trim(arrTemp(2)) + " " + Trim(arrTemp(3))
 		getSalesContact = strTemp
 	End Function
 	
 	Public Function compareSalesContact(strSalesContact)
 		If Instr(strSalesContact, getSalesContact) <> 0 Or Instr(getSalesContact, strSalesContact) <> 0 then
 			compareSalesContact = True
 		else
 			compareSalesContact = False
 		End if
 	End Function 	
 	
 	Public Function getCommentsBlock()
 		getCommentsBlock = pdfObj.CommentsBlock
 	End Function
 	
 	Public Function compareCommentsBlock(strCommentsBlock)
 		If Instr(strCommentsBlock, getCommentsBlock) <> 0 Or Instr(getCommentsBlock, strCommentsBlock) <> 0 then
 			compareCommentsBlock = True
 		else
 			compareCommentsBlock = False
 		End if
 	End Function 
 	
 	Public Function getSubTotal()
 		getSubTotal = pdfObj.subTotal
 	End Function
 	
 	Public Function compareSubTotal(strSubTotal)
 		If Instr(strSubTotal, getSubTotal) <> 0 Or Instr(getSubTotal, strSubTotal) <> 0 then
 			compareSubTotal = True
 		else
 			compareSubTotal = False
 		End if
 	End Function
 	
 	Public Function getQuoteCreate()
 		getQuoteCreate = pdfObj.quoteCreate
 	End Function
 	
 	Public Function compareQuoteCreate(strQuoteCreate)
 		If Instr(strQuoteCreate, getQuoteCreate) <> 0 Or Instr(getQuoteCreate, strQuoteCreate) <> 0 then
 			compareQuoteCreate = True
 		else
 			compareQuoteCreate = False
 		End if
 	End Function
 	
 	Public Function getQuoteHeader()
 		getQuoteHeader = pdfObj.quoteHeader
 	End Function
 	
 	Public Function compareQuoteHeader(strQuoteHeader)
 		If Instr(strQuoteHeader, getQuoteHeader) <> 0 Or Instr(getQuoteHeader, strQuoteHeader) <> 0 then
 			compareQuoteHeader = True
 		else
 			compareQuoteHeader = False
 		End if
 	End Function
 	
 	Public Function getTotalsGrandTotal()
 		getTotalsGrandTotal = pdfObj.TotalsTable.Item(0).Grand_total
 	End Function
 	
 	Public Function compareTotalsGrandTotal(strGrandTotal)
 		If Instr(strGrandTotal, getTotalsGrandTotal) <> 0 Or Instr(getTotalsGrandTotal, strGrandTotal) <> 0 then
 			compareTotalsGrandTotal = True
 		else
 			compareTotalsGrandTotal = False
 		End if
 	End Function
 	
 	Public Function getTotalsSubTotal()
 		getTotalsSubTotal = pdfObj.TotalsTable.Item(0).Sub_Total
 	End Function
 	
 	Public Function getTotalsOther()
 		getTotalsOther = pdfObj.TotalsTable.Item(0).Other
 	End Function
 	
 	Public Function compareTotalsTable(strGrandTotal, strSubTotal, strOther)
 		Dim boolGrandTable, boolSubTotal, boolOther
 		If Instr(strGrandTotal, getTotalsGrandTotal) <> 0 Or Instr(getTotalsGrandTotal, strGrandTotal) <> 0  Or (Len(strGrandTotal) = 0 And Len(getTotalsGrandTotal) = 0) then
 			boolGrandTable = True
 		else
 			boolGrandTable = False
 		End if
 		If Instr(strSubTotal, getTotalsSubTotal) <> 0 Or Instr(getTotalsSubTotal, strSubTotal) <> 0 Or (Len(strSubTotal) = 0 And Len(getTotalsSubTotal) = 0) then
 			boolSubTotal = True
 		else
 			boolSubTotal = False
 		End if
 		If Instr(strOther, getTotalsOther) <> 0 Or Instr(getTotalsOther, strOther) <> 0 Or (Len(strOther) = 0 And Len(getTotalsOther) = 0) then
 			boolOther = True
 		else
 			boolOther = False
 		End if
 		compareTotalsTable = boolGrandTable And boolSubTotal And boolOther
 	End Function
 	
 	Public Function getProductsNo(intRowNum)
 		getProductsNo = pdfObj.ProductTable.Item(intRowNum-1).No
 	End Function
 	
 	Public Function getProductsDescription(intRowNum)
 		getProductsDescription = pdfObj.ProductTable.Item(intRowNum-1).productDescription
 	End Function
 	
 	Public Function getProductsEDT(intRowNum)
 		getProductsEDT = pdfObj.ProductTable.Item(intRowNum-1).EDT
 	End Function
 	
 	Public Function getProductsQty(intRowNum)
 		getProductsQty = pdfObj.ProductTable.Item(intRowNum-1).Qty
 	End Function
 	
 	Public Function getProductsProduct(intRowNum)
 		getProductsProduct = pdfObj.ProductTable.Item(intRowNum-1).Product
 	End Function
 	
 	Public Function getProductsExtNetPrice(intRowNum)
 		getProductsExtNetPrice = pdfObj.ProductTable.Item(intRowNum-1).ExtNetPrice
 	End Function
 	
 	Public Function compareProductsTableAll(intRowNum, strNo, strQty, strProduct, strDesc, strExt, strEDT)
 		Dim boolNo, boolQty, boolProduct, boolDesc, boolExt, boolEDT
 		If Instr(strNo, getProductsNo(intRowNum)) <> 0 Or Instr(getProductsNo(intRowNum), strNo) <> 0 Or (Len(strNo) = 0 And Len(getProductsNo(intRowNum)) = 0) then
 			boolNo = True
 		else
 			boolNo = False
 		End if
 		If Instr(strQty, getProductsQty(intRowNum)) <> 0 Or Instr(getProductsQty(intRowNum), strQty) <> 0 Or (Len(strQty) = 0 And Len(getProductsQty(intRowNum)) = 0) then
 			boolQty = True
 		else
 			boolQty = False
 		End if
 		If Instr(strProduct, getProductsProduct(intRowNum)) <> 0 Or Instr(getProductsProduct(intRowNum), strProduct) <> 0 Or (Len(strProduct) = 0 And Len(getProductsProduct(intRowNum)) = 0) then
 			boolProduct = True
 		else
 			boolProduct = False
 		End if
 		If Instr(strDesc, getProductsDescription(intRowNum)) <> 0 Or Instr(getProductsDescription(intRowNum), strDesc) <> 0 Or (Len(strDesc) = 0 And Len(getProductsDescription(intRowNum)) = 0) then
 			boolDesc = True
 		else
 			boolDesc = False
 		End if
 		If Instr(strExt, getProductsExtNetPrice(intRowNum)) <> 0 Or Instr(getProductsExtNetPrice(intRowNum), strExt) <> 0 Or (Len(strExt) = 0 And Len(getProductsExtNetPrice(intRowNum)) = 0) then
 			boolExt = True
 		else
 			boolExt = False
 		End if
 		If Instr(strEDT, getProductsEDT(intRowNum)) <> 0 Or Instr(getProductsEDT(intRowNum), strEDT) <> 0 Or (Len(strEDT) = 0 And Len(getProductsEDT(intRowNum)) = 0) then
 			boolEDT = True
 		else
 			boolEDT = False
 		End if
 		compareProductsTableAll = boolNo And boolQty And boolProduct And boolDesc And boolExt And boolEDT
 	End Function
 	
 	Public Function compareProductsTableProductsOnly(intRowNum, strQty, strProduct, strDesc)
 		Dim boolQty, boolProduct, boolDesc

 		If Instr(strQty, getProductsQty(intRowNum)) <> 0 Or Instr(getProductsQty(intRowNum), strQty) <> 0 Or (Len(strQty) = 0 And Len(getProductsQty(intRowNum)) = 0) then
 			boolQty = True
 		else
 			boolQty = False
 		End if
 		
 		If Instr(strProduct, getProductsProduct(intRowNum)) <> 0 Or Instr(getProductsProduct(intRowNum), strProduct) <> 0 Or (Len(strProduct) = 0 And Len(getProductsProduct(intRowNum)) = 0) then
 			boolProduct = True
 		else
 			boolProduct = False
 		End if
 		
 		If Instr(strDesc, getProductsDescription(intRowNum)) <> 0 Or Instr(getProductsDescription(intRowNum), strDesc) <> 0 Or (Len(strDesc) = 0 And Len(getProductsDescription(intRowNum)) = 0) then
 			boolDesc = True
 		else
 			boolDesc = False
 		End if
 		
 		compareProductsTableProductsOnly = boolQty And boolProduct And boolDesc
 	End Function
 	
 	Public Function verifyProductsTable_bundlePricing()
 	Dim intRowNum: intRowNum = 1
 	Dim tempPriceCheck
 		Do While(VerifyProductsTable_ExtNetPriceIndex(intRowNum) = true)
 			tempPriceCheck = getProductsExtNetPrice(intRowNum)
 			If intRowNum = 1 Then
 				If CDbl(tempPriceCheck) > 0.00 Then
 					Reporter.ReportEvent micPass, "Verify Bundle Pricing contained in Bundle ID", "The full pricing for this quote is contained in the Bundle ID product"
 				else
 					Reporter.ReportEvent micPass, "Verify Bundle Pricing contained in Bundle ID", "The full pricing for this quote is not contained in the Bundle ID product"
 				End If
			else
				If (Len(tempPriceCheck) = 0) Then 
					Reporter.ReportEvent micPass, "Verify Products inside Bundle do not contain Pricing", "Product Pricing Inside Bundle is equal to 0."
				ElseIf CDbl(tempPriceCheck) = 0.00 Then
					Reporter.ReportEvent micPass, "Verify Products inside Bundle do not contain Pricing", "Product Pricing Inside Bundle is equal to 0."
 				else
 					Reporter.ReportEvent micPass, "Verify Products inside Bundle do not contain Pricing", "Product Pricing Inside Bundle was not equal to 0"
				End If
 			End If
 			intRowNum = intRowNum + 1
 		Loop	
 	End Function
 	Public Function VerifyProductsTable_ExtNetPriceIndex(intRowNum)
 		On error resume next
 		Err.Clear
 		dim temp : temp = pdfObj.ProductTable.Item(intRowNum-1).ExtNetPrice
 		If Err.Number <> 0 Then
 			Err.Clear
 			VerifyProductsTable_ExtNetPriceIndex = false
 		else
 			VerifyProductsTable_ExtNetPriceIndex = true
 		End If
 	End Function

	' Checking instances where product number may be in quantity due to template used and verifying against 0D1
 	Public Function verifyProductsTable_quantityProduct0D1()
 	Dim intRowNum: intRowNum = 1
 	Dim tempQuantity
 		Do While(VerifyProductsTable_QuantityIndex(intRowNum) = true)
 			tempQuantity = getProductsQty(intRowNum)
			If (Len(tempQuantity) = 0) Then 
				Reporter.ReportEvent micPass, "Verify 0D1 suppressed in PDF", "No Product Number for this row...skipping..."
			ElseIf instr(tempQuantity, "#0D1") = 0 Then
				Reporter.ReportEvent micPass, "Verify 0D1 suppressed in PDF", "0D1 suppressed for this line item"
			else
				Reporter.ReportEvent micFail, "Verify 0D1 suppressed in PDF", "0D1 not suppressed for this line item"
			End If
 			intRowNum = intRowNum + 1
 		Loop	
 	End Function
 	Public Function VerifyProductsTable_QuantityIndex(intRowNum)
 		On error resume next
 		Err.Clear
 		dim temp : temp = pdfObj.ProductTable.Item(intRowNum-1).Qty
 		If Err.Number <> 0 Then
 			Err.Clear
 			VerifyProductsTable_QuantityIndex = false
 		else
 			VerifyProductsTable_QuantityIndex = true
 		End If
 	End Function
End Class

Function NewPdfParser(strPdfPath)
	Set NewPdfParser = New pdfParserObj
	NewPdfParser.Init strPdfPath
End Function
