option explicit
'=================================================================
' OrCore UFT Framework v2.3.0 ALPHA
' or-core.qfl (requires core-functions.qfl and OrCore.Common.dll)
' Written by Richard Barrett (rbarrett@hpe.com)
' © Copyright 2012-2016 Hewlett Packard Enterprise Development LP
'=================================================================

'====================================================================================================
'CONSTANTS

const cnstNoScreen = 0
const cnstScreen = 1
const cnstDesktopScreen = 2

'micPass = 0
'micFail = 1
'micDone = 2
'micWarning = 3
'micInfo = 4 'undocumented. Information type, with "i" icon where tick/cross/exclamation appear
const micScriptError = 20
const micPassWithoutScreen = 21
const micPassWithScreen = 22
const micPassWithDesktopScreen = 23
const micFailWithoutScreen = 24
const micFailWithScreen = 25
const micFailWithDesktopScreen = 26
const micDoneWithoutScreen = 27
const micDoneWithScreen = 28
const micDoneWithDesktopScreen = 29
const micWarningWithoutScreen = 30
const micWarningWithScreen = 31
const micWarningWithDesktopScreen = 32
const micPageTimeout = 33 'Web apps
const micJavascriptError = 34 'Web apps

class [Static|OrCore]
	private m_acceptableSyncTime
	private m_advancedWebSyncRedirectDelay
	private m_isAdvancedWebSyncEnabled
	private m_isStandardWebSyncEnabled
	private m_isGlobalSyncEnabled
	private m_isAjaxSyncEnabled
	private m_ajaxSyncJs
	private m_onBrowserSyncMethod
	private m_onErrorMethod
	private m_showSetSecureValueInReport
	private m_wscriptShell

	private sub Class_Initialize
		SetOnBrowserSyncMethodName null
		SetOnErrorMethodName "ExitTest"
		m_acceptableSyncTime = 10
		m_advancedWebSyncRedirectDelay = 0
		m_isAdvancedWebSyncEnabled = true
		m_isStandardWebSyncEnabled = true
		m_isGlobalSyncEnabled = true
		m_isAjaxSyncEnabled = true
		'm_ajaxSyncJs = "(function(){var newGuid=function(){return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c=='x'?r:(r&0x3|0x8);return v.toString(16);});};var proxiedXhr=XMLHttpRequest.prototype.open;XMLHttpRequest.prototype.open=function(){this.addEventListener('readystatechange',function(){console.log('UFT:XHR readyState='+this.readyState);switch(this.readyState){case 1:if(this.uftId!=undefined){console.log('UFT:XHR already opened');break;}var id=newGuid();this.uftId=id;console.log('UFT:inserting div for '+id);var d=document.createElement('div');d.style.display='none';d.setAttribute('id',id);d.setAttribute('class','uftAjaxTracker');var body=document.getElementsByTagName('body')[0];if(body.firstChild){body.insertBefore(d,body.firstChild);}else{body.appendChild(d);}break;case 4:if(this.uftId===null){console.log('UFT:XHR already complete');break;}console.log('UFT:removing div for '+this.uftId);var d=document.getElementById(this.uftId);d.parentNode.removeChild(d);this.uftId=null;break;}},false);return proxiedXhr.apply(this,[].slice.call(arguments));};})();"
		m_ajaxSyncJs = "(function(){var newGuid=function(){return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c==='x'?r:(r&0x3|0x8);return v.toString(16);});};console.log('UFT-OrCore:initializing uftAjaxTracker');window.document.uftAjaxTracker=0;var proxiedXhr=XMLHttpRequest.prototype.open;XMLHttpRequest.prototype.open=function(){this.addEventListener('readystatechange',function(){console.log('UFT-OrCore:readyStateChange='+this.readyState);switch(this.readyState){case 1:if(this.uftId!=undefined){console.log('UFT-OrCore:XHR '+id+' already opened');break;}var id=newGuid();window.document.uftAjaxTracker++;console.log('UFT-OrCore:tracking new XHR '+id);this.uftId=id;break;case 4:if(this.uftId===null){console.log('UFT-OrCore:XHR already completed');break;}console.log('UFT-OrCore:XHR '+this.uftId+' complete');if(window.document.uftAjaxTracker!=0){window.document.uftAjaxTracker--;}this.uftId=null;break;}},false);return proxiedXhr.apply(this,[].slice.call(arguments));};})();"
		set m_wscriptShell = CreateObject("WScript.Shell")
		m_showSetSecureValueInReport = false
	end sub
	
	public property get AcceptableSyncTime
		AcceptableSyncTime = m_acceptableSyncTime
	end property
	
	public property let AcceptableSyncTime(intSeconds)
		if not IsInt16Or32(intSeconds) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.AcceptableSyncTime) intSeconds is invalid. Must be an Integer or Long."
			ExitTest
		elseif intSeconds < 0 then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.AcceptableSyncTime) intSeconds is invalid. Must be >= 0."
			ExitTest
		end if
		m_acceptableSyncTime = intSeconds
	end property
	
	public property get AdvancedWebSyncRedirectDelay
		AdvancedWebSyncRedirectDelay = m_advancedWebSyncRedirectDelay
	end property
	
	public property let AdvancedWebSyncRedirectDelay(intMilliseconds)
		if not IsInt16Or32(intMilliseconds) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.AdvancedWebSyncRedirectDelay) intMilliseconds is invalid. Must be an Integer or Long."
			ExitTest
		elseif intMilliseconds < 0 then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.AdvancedWebSyncRedirectDelay) intMilliseconds is invalid. Must be >= 0."
			ExitTest
		end if
		m_advancedWebSyncRedirectDelay = intMilliseconds
	end property
	
	public property get HasExternalDriver 'v2.3
		on error resume next : Err.Clear
		dim driver : driver = Environment("ExternalDriver")
		if err.number <> 0 then
			driver = false
		end if
		HasExternalDriver = driver
		on error goto 0
	end property
	
	'public property get SapCaptureDllPath
	'	SapCaptureDllPath = Environment("ProductDir") & "\bin\WinAppScreenCapture.dll"
	'end property
	
	public property get IsAdvancedWebSyncEnabled
		IsAdvancedWebSyncEnabled = m_isAdvancedWebSyncEnabled
	end property
	
	public property let IsAdvancedWebSyncEnabled(blnEnabled)
		if not IsBool(blnEnabled) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.IsAdvancedWebSyncEnabled) blnEnabled is invalid. Must be a Boolean."
			ExitTest
		end if
		m_isAdvancedWebSyncEnabled = blnEnabled
	end property
	
	public property get IsStandardWebSyncEnabled
		IsStandardWebSyncEnabled = m_isStandardWebSyncEnabled
	end property
	
	public property let IsStandardWebSyncEnabled(blnEnabled)
		if not IsBool(blnEnabled) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.IsStandardWebSyncEnabled) blnEnabled is invalid. Must be a Boolean."
			ExitTest
		end if
		m_isStandardWebSyncEnabled = blnEnabled
	end property
	
	public property get IsGlobalSyncEnabled
		IsGlobalSyncEnabled = m_isGlobalSyncEnabled
	end property
	
	public property let IsGlobalSyncEnabled(blnEnabled)
		if not IsBool(blnEnabled) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.IsGlobalSyncEnabled) blnEnabled is invalid. Must be a Boolean."
			ExitTest
		end if
		m_isGlobalSyncEnabled = blnEnabled
	end property
	
	public property get IsAjaxSyncEnabled
		IsAjaxSyncEnabled = m_isAjaxSyncEnabled
	end property
	
	public property let IsAjaxSyncEnabled(blnEnabled)
		if not IsBool(blnEnabled) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.IsAjaxSyncEnabled) blnEnabled is invalid. Must be a Boolean."
			ExitTest
		end if
		m_isAjaxSyncEnabled = blnEnabled
	end property
	
	public property get AjaxSyncJS
		AjaxSyncJS = m_ajaxSyncJs
	end property
	
	public sub OnBrowserSync(objSender, intElapsedTimeMs)
		if not isnull(m_onBrowserSyncMethod) then
			m_onBrowserSyncMethod objSender, intElapsedTimeMs
		end if
	end sub
	
	public sub OnError
		on error goto 0
		m_onErrorMethod
	end sub
	
	public sub SetOnBrowserSyncMethodName(strMethodName)
		if IsNull(strMethodName) then
			m_onBrowserSyncMethod = null
			exit sub
		end if
		on error resume next : Err.Clear
			dim func : set func = GetRef(strMethodName)
			if Err.Number <> 0 then
				Reporter.Filter = rfEnableAll
				Reporter.ReportEvent micFail, "ScriptError", "(OrCore.SetOnBrowserSyncMethodName) Specified method '" & strMethodName & "' not found."
				ExitTest
			end if
			set m_onBrowserSyncMethod = func
		on error goto 0 : Err.Clear
	end sub
	
	public sub SetOnErrorMethodName(strMethodName)
		select case strMethodName
		case "ExitAction"
			strMethodName = "Internal" & strMethodName
		case "ExitActionIteration"
			strMethodName = "Internal" & strMethodName
		case "ExitComponent"
			strMethodName = "Internal" & strMethodName
		case "ExitComponentIteration"
			strMethodName = "Internal" & strMethodName
		case "ExitTest"
			strMethodName = "Internal" & strMethodName
		case "ExitTestIteration"
			strMethodName = "Internal" & strMethodName
		end select
		on error resume next : Err.Clear
			dim func : set func = GetRef(strMethodName)
			if Err.Number <> 0 then
				Reporter.Filter = rfEnableAll
				Reporter.ReportEvent micFail, "ScriptError", "(OrCore.SetOnErrorMethodName) Specified method '" & strMethodName & "' not found."
				ExitTest
			end if
			set m_onErrorMethod = func
		on error goto 0 : Err.Clear
	end sub
	
	public property get ShowSetSecureValueInReport
		ShowSetSecureValueInReport = m_showSetSecureValueInReport
	end property
	
	public property let ShowSetSecureValueInReport(blnEnabled)
		if not IsBool(blnEnabled) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(OrCore.ShowSetSecureValueInReport) blnEnabled is invalid. Must be a Boolean."
			ExitTest
		end if
		m_showSetSecureValueInReport = blnEnabled
	end property
	
	public property get WScriptShell 'v2.3
		set WScriptShell = m_wscriptShell
	end property
end class
dim OrCore : set OrCore = new [Static|OrCore]

'This wrapper exists because GetRef does not work on UFT utility statements.
sub InternalExitAction
	ExitAction
end sub

'This wrapper exists because GetRef does not work on UFT utility statements.
sub InternalExitActionIteration
	ExitActionIteration
end sub

'This wrapper exists because GetRef does not work on UFT utility statements.
sub InternalExitComponent
	ExitComponent
end sub

'This wrapper exists because GetRef does not work on UFT utility statements.
sub InternalExitComponentIteration
	ExitComponentIteration
end sub

'This wrapper exists because GetRef does not work on UFT utility statements.
sub InternalExitTest
	ExitTest
end sub

'This wrapper exists because GetRef does not work on UFT utility statements.
sub InternalExitTestIteration
	ExitTestIteration
end sub

'END OF CONSTANTS
'====================================================================================================
'LOGGING STRUCTURES/METHODS

class [Static|Icon]
'201 - the Run Error red/white cross icon
'202 - the info sign
'203 - yellow/black warning triangle/exclamation
'204 - yellow/white warning triangle/stop hand
'205 - red/white E sign thing
'206 - the standard white doc with tick and cross next to it
'210 - white page with blue arrow
'213 - puzzle piece
'214-217 - ALM test lab icons

	private sub Class_Initialize
	end sub

	public property get BlueArrow
		BlueArrow = 210
	end property
	
	public property get Info
		Info = 202
	end property
	
	public property get PuzzlePiece
		PuzzlePiece = 213
	end property
	
	public property get RedWhiteCross
		RedWhiteCross = 201
	end property
	
	public property get RedWhiteE
		RedWhiteE = 205
	end property
	
	public property get Report
		Report = 206
	end property
	
	public property get StopHand
		StopHand = 204
	end property
	
	public property get WarningTriangle
		WarningTriangle = 203
	end property
end class
dim Icon : set Icon = new [Static|Icon]

class ReportCodeRepository
'FOR INTERNAL FRAMEWORK USE ONLY.
	private m_codes

	private sub Class_Initialize()
		set m_codes = CreateObject("Scripting.Dictionary")

		'Add required framework codes.
		AddCode NewReportCode(micPass, micPass, cnstScreen, "") 'micPass
		AddCode NewReportCode(micFail, micFail, cnstScreen, "") 'micFail
		AddCode NewReportCode(micDone, micDone, cnstNoScreen, "") 'micDone
		AddCode NewReportCode(micWarning, micWarning, cnstScreen, "") 'micWarning
		AddCode NewReportCode(micInfo, micInfo, cnstNoScreen, "") 'micInfo	
		AddCode NewReportCode(micScriptError, micFail, cnstNoScreen, "UFT_ERROR") 'micScriptError
		AddCode NewReportCode(micPassWithoutScreen, micPass, cnstNoScreen, "") 'micPassWithoutScreen
		AddCode NewReportCode(micPassWithScreen, micPass, cnstScreen, "") 'micPassWithScreen
		AddCode NewReportCode(micPassWithDesktopScreen, micPass, cnstDesktopScreen, "") 'micPassWithDesktopScreen
		AddCode NewReportCode(micFailWithoutScreen, micFail, cnstNoScreen, "") 'micFailWithoutScreen
		AddCode NewReportCode(micFailWithScreen, micFail, cnstScreen, "") 'micFailWithScreen
		AddCode NewReportCode(micFailWithDesktopScreen, micFail, cnstDesktopScreen, "") 'micFailWithDesktopScreen
		AddCode NewReportCode(micDoneWithoutScreen, micDone, cnstNoScreen, "") 'micDoneWithoutScreen
		AddCode NewReportCode(micDoneWithScreen, micDone, cnstScreen, "") 'micDoneWithScreen
		AddCode NewReportCode(micDoneWithDesktopScreen, micDone, cnstDesktopScreen, "") 'micDoneWithDesktopScreen
		AddCode NewReportCode(micWarningWithoutScreen, micWarning, cnstNoScreen, "") 'micWarningWithoutScreen
		AddCode NewReportCode(micWarningWithScreen, micWarning, cnstScreen, "") 'micWarningWithScreen
		AddCode NewReportCode(micWarningWithDesktopScreen, micWarning, cnstDesktopScreen, "") 'micWarningWithDesktopScreen
		AddCode NewReportCode(micPageTimeout, micWarning, cnstDesktopScreen, "PAGE_TIMEOUT") 'micPageTimeout
		AddCode NewReportCode(micJavascriptError, micWarning, cnstDesktopScreen, "JAVASCRIPT_ERROR") 'micJavascriptError
	end sub

	public sub AddCode(objReportCode)
		'Check input types.
		if not UCase(TypeName(objReportCode)) = UCase("ReportCode") then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCodeRepository.AddCode) objReportCode has unexpected type: '" & TypeName(objReportCode) & "'. Expected type: 'ReportCode'."
			ExitTest
		end if
		if not IsInt16Or32(objReportCode.Code) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCodeRepository.AddCode) objReportCode.Code is invalid. Must be an Integer or Long."
			ExitTest
		end if
		if not IsInt16Or32(objReportCode.TranslatedCode) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCodeRepository.AddCode) objReportCode.TranslatedCode is invalid. Accepted Integer or Long values: 0 - micPass. 1 - micFail. 2 - micDone. 3 - micWarning. 4 - micInfo."
			ExitTest
		elseif objReportCode.TranslatedCode < 0 or (objReportCode.TranslatedCode > 4) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCodeRepository.AddCode) objReportCode.TranslatedCode is invalid. Accepted Integer or Long values: 0 - micPass. 1 - micFail. 2 - micDone. 3 - micWarning. 4 - micInfo."
			ExitTest
		end if
		if not IsInt16Or32(objReportCode.ScreenshotType) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCodeRepository.AddCode) objReportCode.ScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		elseif (objReportCode.ScreenshotType < 0) or (objReportCode.ScreenshotType > 2) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCodeRepository.AddCode) objReportCode.ScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		end if
		if not IsString(objReportCode.CodeText) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCodeRepository.AddCode) objReportCode.CodeText is not a String"
			ExitTest
		end if

		if not m_codes.Exists(objReportCode.Code) then
			m_codes.Add objReportCode.Code, objReportCode
		end if
	end sub

	public property get Codes
		set Codes = m_codes
	end property
	
	private sub RemoveCode(intCode)
		if m_codes.Exists(intCode) then
			m_codes.Remove(intCode)
		end if
	end sub
	
	public sub UpdateCode(objReportCode)
		'Check input types.
		if not UCase(TypeName(objReportCode)) = UCase("ReportCode") then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "ScriptError", "(ReportCodeRepository.UpdateCode) objReportCode has unexpected type: '" & TypeName(objReportCode) & "'. Expected type: 'ReportCode'."
			ExitTest
		end if
		
		if not m_codes.Exists(objReportCode.Code) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCodeRepository.UpdateCode) Report code with value '" & CStr(objReportCode.Code) & "' not found, and cannot be updated."
			ExitTest
		end if
		
		RemoveCode objReportCode.Code
		AddCode objReportCode
	end sub
end class

class ReportCode
'FOR INTERNAL FRAMEWORK USE ONLY.
	private m_code
	private m_translatedCode
	private m_screenshotType
	private m_codeText

	private sub Class_Initialize()
	end sub

	public sub Init(lngCustomCode, intTranslatedCode, intScreenshotType, strCodeText)
	   'Check input types.
		if not IsInt16Or32(lngCustomCode) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCode.Init) intCustomCode is invalid. Must be an Integer or Long."
			ExitTest
		end if
		if not IsInt16Or32(intTranslatedCode) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCode.Init) intTranslatedCode is invalid. Must be an Integer or Long."
			ExitTest
		end if
		if not IsInt16Or32(intScreenshotType) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCode.Init) intScreenshotType is invalid. Must be an Integer or Long."
			ExitTest
		end if
		if not IsString(strCodeText) then
			'Using standard Reporter here to avoid bi-directional dependency on Logger during Logger initialization.
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(ReportCode.Init) strCodeText is not a String"
			ExitTest
		end if

		m_code = CLng(lngCustomCode)
		m_translatedCode = CInt(intTranslatedCode)
		m_screenshotType = CInt(intScreenshotType)
		m_codeText = strCodeText
	end sub

	public property get CodeText
		CodeText = m_codeText
	end property

	public property get Code
		Code = m_code
	end property

	public property get ScreenshotType
		ScreenshotType = m_screenshotType
	end property

	public property get TranslatedCode
		TranslatedCode = m_translatedCode
	end property
end class

function NewReportCode(lngCustomCode, intTranslatedCode, intScreenshotType, strCodeText)
'FOR INTERNAL FRAMEWORK USE ONLY.
	dim newCode : set newCode = new ReportCode
	newCode.Init lngCustomCode, intTranslatedCode, intScreenshotType, strCodeText
	set NewReportCode = newCode
end function

class [Static|Logger]
	private m_arrContext
	private m_isDebugEnabled
	private m_modifyScreenshotMethod
	private m_reportCodeRepository
	
	private sub Class_Initialize
		set m_reportCodeRepository = new ReportCodeRepository
		m_isDebugEnabled = false
	end sub
	
	public function AutoIndent(strParentName, strParentDescription)
		'ResetReporterContextIndent 'Moved to the start of GetContextStack.
		set AutoIndent = NewLoggerAutoIndent
		Indent strParentName, strParentDescription
	end function
	
	private property get CurrentContext
		if IsEmpty(m_arrContext) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.CurrentContext) The Logger context has not been initialized. Please check that a new ActionLifetime has been created at the start of each Action."
			ExitTest
		end if
		
		'Reset the QTP report context everytime we call our custom report.
		ResetReporterContextIndent
		SetContextStack m_arrContext
		CurrentContext = m_arrContext(UBound(m_arrContext))
	end property
	
	public sub Debug(strMessage)
		if IsDebugEnabled then
			dim dt : set dt = CsDateTimeOffset.Now
			print dt.ToStringFormatted("s") & " " & strMessage
		end if
	end sub
	
	public property get DoneScreenshotType
		DoneScreenshotType = m_reportCodeRepository.Codes(micDone).ScreenshotType
	end property
	
	public property let DoneScreenshotType(intScreenshotType)
		if not IsInt16Or32(intScreenshotType) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.DoneScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		elseif (intScreenshotType < 0) or (intScreenshotType > 2) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.DoneScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		end if
		dim oldCode : set oldCode = m_reportCodeRepository.Codes.Item(micDone)
		m_reportCodeRepository.UpdateCode NewReportCode(micDone, micDone, intScreenshotType, oldCode.CodeText)
	end property
	
	public sub ExitAction
		'Resolve any outstanding nesting from raw UFT report statements.
		ResetReporterContextIndent
	end sub
	
	public function GetContextStack
		ResetReporterContextIndent
		dim arr() : redim arr(-1)
		on error resume next
			dim context
			context = Reporter.GetContext
			redim preserve arr(UBound(arr)+1)
			arr(UBound(arr)) = context
				
			do while true
				context = Reporter.UnSetContext
				if Err.Number <> 0 then
					exit do
				end if
				redim preserve arr(UBound(arr)+1)
				arr(UBound(arr)) = context
			loop
		on error goto 0
		ReverseOriginalArray arr
		'To read the full context stack it must be unset. It must be restacked afterwards to return it to its original state..
		SetContextStack arr
		GetContextStack = arr
	end function
	
	public property get FailScreenshotType
		FailScreenshotType = m_reportCodeRepository.Codes(micFail).ScreenshotType
	end property
	
	public property let FailScreenshotType(intScreenshotType)
		if not IsInt16Or32(intScreenshotType) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.FailScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		elseif (intScreenshotType < 0) or (intScreenshotType > 2) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.FailScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		end if
		dim oldCode : set oldCode = m_reportCodeRepository.Codes.Item(micFail)
		m_reportCodeRepository.UpdateCode NewReportCode(micFail, micFail, intScreenshotType, oldCode.CodeText)
	end property
	
	public function FrameworkReport(intEventStatus, strStepName, strStepDescription)
		FrameworkReport = FrameworkReportEx(intEventStatus, strStepName, strStepDescription, null, null, null)
	end function
	
	public function FrameworkReportEx(intEventStatus, strStepName, strStepDescription, objSender, intContext, intIcon)
		dim intTranslatedEventStatus
		dim intScreenshotType
		dim strCodeText : strCodeText = ""
		
		dim reportCodes : set reportCodes = m_reportCodeRepository.Codes
		
		if not reportCodes.Exists(intEventStatus) then
			'We ignore the report filter in this instance as this is a script error.
			'Replace the requested report with failure details.
			ReportScriptError CsString.Format("({0}) An unknown status type was specified for the Report function: '{1}'. This must be corrected in the script.", Array(strStepName, intEventStatus))
			FrameworkReportEx = Reporter.GetContext
			exit function
		end if

		dim reportCode : set reportCode = reportCodes.Item(intEventStatus)
		intTranslatedEventStatus = reportCode.TranslatedCode
		strCodeText = reportCode.CodeText
		intScreenshotType = reportCode.ScreenshotType
		
		if not IsReportEnabled(intTranslatedEventStatus) then
			FrameworkReportEx = Reporter.GetContext
			exit function
		end if
		
		FrameworkReportEx = ReportBase(intTranslatedEventStatus, strStepName, strStepDescription, objSender, intContext, intIcon, strCodeText, intScreenshotType)
	end function
	
	public sub Indent(strParentName, strParentDescription)
		dim intNewContext
		intNewContext = CLng(ReportEx2(micDone, strParentName, strParentDescription, null, CurrentContext, 213)) 'Puzzle piece icon.
		if IsEmpty(m_arrContext) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.Indent) The Logger context has not been initialized. Please check that a new ActionLifetime has been created at the start of each Action."
			ExitTest
		end if
		if CLng(m_arrContext(UBound(m_arrContext))) <> intNewContext then
			redim preserve m_arrContext(UBound(m_arrContext)+1)
			 m_arrContext(UBound(m_arrContext)) = intNewContext
			SetContextStack m_arrContext
		end if
	end sub
	
	public property get IsDebugEnabled
		IsDebugEnabled = m_isDebugEnabled
	end property
	
	public property let IsDebugEnabled(blnEnabled)
		if not IsBool(blnEnabled) then
			ReportScriptError "(Logger.IsDebugEnabled) blnEnabled is invalid. Expected type: Boolean."
		end if
		m_isDebugEnabled = blnEnabled
	end property
	
	private function IsReportEnabled(intEventStatus)
		dim intFilterMode : intFilterMode = Reporter.Filter
		IsReportEnabled = true
		select case intFilterMode
		case rfEnableErrorsAndWarnings
			if ArrayContains(intEventStatus, Array(micPass, micDone, micInfo)) then
				IsReportEnabled = false
			end if
		case rfEnableErrorsOnly
			if ArrayContains(intEventStatus, Array(micPass, micDone, micInfo, micWarning)) then
				IsReportEnabled = false
			end if
		case rfDisableAll
			IsReportEnabled = false
		end select
	end function
	
	public property get InfoScreenshotType
		InfoScreenshotType = m_reportCodeRepository.Codes(micInfo).ScreenshotType
	end property
	
	public property let InfoScreenshotType(intScreenshotType)
		if not IsInt16Or32(intScreenshotType) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.InfoScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		elseif (intScreenshotType < 0) or (intScreenshotType > 2) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.InfoScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		end if
		dim oldCode : set oldCode = m_reportCodeRepository.Codes.Item(micInfo)
		m_reportCodeRepository.UpdateCode NewReportCode(micInfo, micInfo, intScreenshotType, oldCode.CodeText)
	end property
	
	public property get PassScreenshotType
		PassScreenshotType = m_reportCodeRepository.Codes(micPass).ScreenshotType
	end property
	
	public property let PassScreenshotType(intScreenshotType)
		if not IsInt16Or32(intScreenshotType) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.PassScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		elseif (intScreenshotType < 0) or (intScreenshotType > 2) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.PassScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		end if
		'dim codes : set codes = m_reportCodeRepository.Codes
		dim oldCode : set oldCode = m_reportCodeRepository.Codes.Item(micPass)
		m_reportCodeRepository.UpdateCode NewReportCode(micPass, micPass, intScreenshotType, oldCode.CodeText)
	end property
	
	public sub RegisterCustomReportCode(intCustomCode, intTranslatedCode, intScreenshotType, strCodeText)
		'NOTE: Numbers 1-100 are reserved for UFT constants and OrCore codes. Start with 101.
		m_reportCodeRepository.AddCode NewReportCode(intCustomCode, intTranslatedCode, intScreenshotType, strCodeText)
	end sub
	
	public function Report(intEventStatus, strStepName, strStepDescription)
		Report = ReportEx2(intEventStatus, strStepName, strStepDescription, null, null, null)
	end function
	
	public function ReportEx(intEventStatus, strStepName, strStepDescription, objSender)
		ReportEx = ReportEx2(intEventStatus, strStepName, strStepDescription, objSender, null, null)
	end function
	
	public function ReportEx2(intEventStatus, strStepName, strStepDescription, objSender, intContext, intIcon)
		dim intTranslatedEventStatus
		dim intScreenshotType
		dim strCodeText : strCodeText = ""
		
		dim reportCodes : set reportCodes = m_reportCodeRepository.Codes
		dim reportCode : set reportCode = reportCodes.Item(intEventStatus)
		intTranslatedEventStatus = reportCode.TranslatedCode
		strCodeText = reportCode.CodeText
		intScreenshotType = reportCode.ScreenshotType
		
		ReportEx2 = ReportBase(intTranslatedEventStatus, strStepName, strStepDescription, objSender, intContext, intIcon, strCodeText, intScreenshotType)
	end function
	
	private function ReportBase(intEventStatus, strStepName, strStepDescription, objSender, intContext, intIcon, strCodeText, intScreenshotType)
		'ReportBase ignores any filtering.
		'intEventStatus is the translated event status. I.e. One of the standard UFT event status codes.
		' Choose default icon if none specified.
		if IsNull(intIcon) then
			select case intEventStatus
			case micPass
				intIcon = 206
			case micFail
				intIcon = 206
			case micWarning
				intIcon = 206
			case micDone
				intIcon = 206
			case micInfo
				intIcon = 202
			end select
		end if
		
		dim sb : set sb = NewStringBuilder()
	
		'Code text.
		if not (strCodeText = "") then
			sb.Append "<!--TEST4MONKEY_CODE#" & strCodeText & "#-->"
		end if

		'Step description.
		sb.AppendLine strStepDescription
	
		'Screenshot.
		if intScreenshotType > 0 then
			'Create screenshot filename.
			dim resultCode
			select case intEventStatus
				case micPass
					resultCode = "P"
				case micWarning
					resultCode = "W"
				case micFail
					resultCode = "F"
				case micDone
					resultCode = "D"
				case micInfo
					resultCode = "I"
			end select
			dim filename : filename = UFT.ScriptID & "_" & resultCode & "_" & GetTimestamp & ".png"
			dim screenshotPath : screenshotPath = Reporter.ReportPath & "\" & filename
			'Take screenshot.
			
			if IsNull(objSender) and not (intScreenshotType = cnstNoScreen) then
				intScreenshotType = cnstDesktopScreen
			end if
			
			on error resume next : Err.Clear
				dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
				dim parentWindow : set parentWindow = OrCore_GetParentWindow(objSender)
				'parentWindow will be Nothing if objSender is null. screenshotType has already been set to cnstDesktopScreen.
				select case intScreenshotType
				case cnstScreen
					select case parentWindow.Type
					case "Browser"
						dim objBrowser : set objBrowser = parentWindow.Object
						if not objBrowser.Exist(1) then
							Desktop.CaptureBitmap screenshotPath
						elseif objBrowser.Dialog("micclass:=Dialog", "index:=0").Exist(1) then
							Desktop.CaptureBitmap screenshotPath
						else
							'Browser_CaptureFullPage objBrowser, screenshotPath
							'Richard v2.3 commenting this out until we can fix full page screenshots
							Desktop.CaptureBitmap screenshotPath
						end if
					case else
						Desktop.CaptureBitmap screenshotPath 'TODO: add support for better SAP shots
					end select
				case cnstDesktopScreen
					Desktop.CaptureBitmap screenshotPath
				end select
				Logger.SetReporterFilter oldFilter
			on error goto 0
			
			screenshotPath = "file:///" & screenshotPath 'Firefox and Chrome require the img url to have this prefix for locally stored images.
			if not IsEmpty(m_modifyScreenshotMethod) then
				screenshotPath = m_modifyScreenshotMethod(objSender, screenshotPath)
			end if
	
			'Embed screenshot in report.
			if OrCore.HasExternalDriver then
				'If we are being driven by an external tool, assumption is that it will generate reports based on results.xml.
				'We hide the image as a span so it does not load unless explicitly converted to an img element.
				sb.Append "<br/><span data-src=""" & screenshotPath & """ class=""screenshot"" style=""display:none;""></span>"
			else
				sb.Append "<br/><img src=""" & screenshotPath & """ class=""screenshot"" />"
			end if
		end if
	
		dim meta : set meta = CreateObject("Scripting.Dictionary")
		meta("Status") = intEventStatus
		meta("PlainTextNodeName") = strStepName
		meta("StepHtmlInfo") = sb.ToString()
		meta("DllIconIndex") = intIcon
		meta("DllIconSelIndex") = meta("DllIconIndex")
		meta("DllPAth") = Environment("ProductDir") & "\bin\ContextManager.dll"
		
		' Choose default context if none specified.
		if IsNull(intContext) then
			intContext = CurrentContext
		end if
		
		on error resume next : Err.Clear
		oldFilter = Logger.SetReporterFilter(rfEnableAll)
		ReportBase = Reporter.LogEvent("User", meta, intContext)
		Logger.SetReporterFilter oldFilter
		on error goto 0
	end function
	
	public sub ReportScriptError(strStepDescription)
		Reporter.Filter = rfEnableAll
		ReportBase micFail, "Script Error", strStepDescription, null, CurrentContext, 201, "UFT_ERROR", cnstNoScreen 'Red circle/white cross icon.
		ExitTest
	end sub
		
	private sub ResetReporterContextIndent
		'The Reporter.ReportEvent statement (hidden or otherwise) triggers the context reset following nested original UFT reports. E.g. WebTable.GetCellData.
		'Otherwise we can reach the end of the Action and the report context stack will pop 2 levels *after* we reset the context to its original value at the start of the Action.
		'This is a cheeky fix or a nasty hack, depending on how generous you are feeling.
		dim originalFilter : originalFilter = SetReporterFilter(rfDisableAll)
		Reporter.ReportEvent micInfo, "Reset context", "Resetting the reporter context using hidden Reporter.ReportEvent"
		Reporter.Filter = originalFilter
	end sub
	
	public sub SetContextStack(arrContext)
		m_arrContext = arrContext
		on error resume next
		'Clear the existing context stack.
		do
			Reporter.UnSetContext
		loop while Err.Number = 0
		dim i
		for i = 0 to UBound(arrContext) step 1
			Reporter.SetContext arrContext(i)
		next
		on error goto 0
	end sub
	
	public sub SetModifyScreenshotMethodName(strMethodName)
		on error resume next : Err.Clear
			dim func : set func = GetRef(strMethodName)
			if Err.Number <> 0 then
				Reporter.Filter = rfEnableAll
				Reporter.ReportEvent micFail, "ScriptError", CsString.Format("(Logger.SetModifyScreenshotMethodName) Specified method '{0}' not found.", Array(strMethodName))
				ExitTest
			end if
			set m_modifyScreenshotMethod = func
		on error goto 0 : Err.Clear
	end sub
	
	public function SetReporterFilter(intFilterMode)
		'Returns the previous Reporter.Filter mode.
		SetReporterFilter = Reporter.Filter
		Reporter.Filter = intFilterMode
	end function
	
	public sub Unindent
		if IsEmpty(m_arrContext) then
			ReportScriptError "(Logger.Unindent) The Logger context has not been initialized. Please check that a new ActionLifetime has been created at the start of each Action."
		end if
		redim preserve m_arrContext(UBound(m_arrContext)-1)
		SetContextStack m_arrContext
	end sub
	
	public property get WarnScreenshotType
		WarnScreenshotType = m_reportCodeRepository.Codes(micWarn).ScreenshotType
	end property
	
	public property let WarnScreenshotType(intScreenshotType)
		if not IsInt16Or32(intScreenshotType) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.WarnScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		elseif (intScreenshotType < 0) or (intScreenshotType > 2) then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "Script Error", "(Logger.WarnScreenshotType) intScreenshotType is invalid. Accepted Integer or Long values: 0 - No screenshot. 1 - Scrolling screenshot (where applicable). 2 - Desktop screenshot."
			ExitTest
		end if
		dim oldCode : set oldCode = m_reportCodeRepository.Codes.Item(micWarning)
		m_reportCodeRepository.UpdateCode NewReportCode(micWarning, micWarning, intScreenshotType, oldCode.CodeText)
	end property
end class
dim Logger : set Logger = new [Static|Logger]

class LoggerAutoIndent
	private m_arrOriginalContext

	private sub Class_Initialize
		m_arrOriginalContext = Logger.GetContextStack
	end sub
	
	private sub Class_Terminate
		Logger.SetContextStack m_arrOriginalContext
	end sub
end class
function NewLoggerAutoIndent
	set NewLoggerAutoIndent = new LoggerAutoIndent
end function

class ClassEvent
	private arrHandlers()
	
	private sub Class_Initialize
		redim arrHandlers(-1)
	end sub
	
	private sub Class_Termimate
		erase arrHandlers
	end sub
	
	public sub AddHandler(strMethodName)
		on error resume next : Err.Clear
		dim func : set func = GetRef(strMethodName)
		if Err.Number <> 0 then
			Reporter.Filter = rfEnableAll
			Reporter.ReportEvent micFail, "ScriptError", "(ClassEvent.AddHandler) Specified error method '" & strMethodName & "' not found."
			ExitTest
		end if
		redim preserve arrHandlers(UBound(arrHandlers) + 1)
		set arrHandlers(UBound(arrHandlers)) = func
		on error goto 0 : Err.Clear
	end sub
	
	public sub Fire
		dim handler
		for each handler in arrHandlers
			handler
		next
	end sub
end class
function NewClassEvent
	set NewClassEvent = new ClassEvent
end function

class [Static|ActionLifetimeManager]
	private m_onLoad
	private m_onUnload
	
	private sub Class_Initialize
		set m_onLoad = NewClassEvent
		set m_onUnload = NewClassEvent
	end sub
	
	public sub Load
		m_onLoad.Fire
	end sub
	
	public property get OnLoad
		set OnLoad = m_onLoad
	end property
	
	public property get OnUnload
		set OnUnload = m_onUnload
	end property
	
	public sub Unload
		m_onUnload.Fire
	end sub
end class
dim ActionLifetimeManager : set ActionLifetimeManager = new [Static|ActionLifetimeManager]
'ActionLifetimeManager.OnLoad.AddHandler "DoSomething"
'ActionLifetimeManager.OnUnload.AddHandler "DoSomethingElse"

class ActionLifetime
	private m_arrOriginalContext

	private sub Class_Initialize
		m_arrOriginalContext = Logger.GetContextStack
		if Logger.IsDebugEnabled then
			print "Action: " & Environment("ActionName")
			dim i
			for i = 0 To UBound(m_arrOriginalContext) step 1
				print m_arrOriginalContext(i)
			Next
		end if
		ActionLifetimeManager.Load
	end sub
	
	private sub Class_Terminate
		ActionLifetimeManager.Unload
		Logger.ExitAction
		Logger.SetContextStack m_arrOriginalContext
	end sub
end class
function NewActionLifetime
	set NewActionLifetime = new ActionLifetime
end function

'==============================================================
'= Legacy Report wrapper functions                            =
'=                                                            =
'= NOTE: These methods exist only for backwards compatibility =
'= with OrCore v1 and should not be used in any new scripts.  =
'==============================================================
' Deprecated.
sub OrCore_ReportScriptError(strStepDescription)
	Logger.ReportScriptError strStepDescription
end sub

' Deprecated.
sub OrCore_Report(intEventStatus, strStepName, strStepDescription)
	Logger.Report intEventStatus, strStepName, strStepDescription
end sub

' Deprecated.
sub OrCore_ReportEx(intEventStatus, strStepName, strStepDescription, objSender)
	Logger.ReportEx intEventStatus, strStepName, strStepDescription, objSender, null, null
end sub

'END LOGGER
'====================================================================================================

'====================================================================================================
'BROWSER STRUCTURES/METHODS

class [Static|BrowserStore]
	'private m_ajaxTrackerJs
	private m_browsers
	private m_browserFamilyCode
	private m_currentBrowserName
	private m_orBrowser 'A reference to Browser("Current")
	
	private sub Class_Initialize
		m_currentBrowserName = empty
		set m_browsers = CreateObject("Scripting.Dictionary")
	end sub

	public property get OrBrowser
		set OrBrowser = m_orBrowser
	end property
	public property set OrBrowser(objBrowser)
		if TypeName(objBrowser) <> "CoBrowser" then
			Logger.ReportScriptError "(BrowserStore.OrBrowser) Invalid type assigned to OrBrowser: " & TypeName(objBrowser) & ". A Browser object must be assigned to BrowserStore.OrBrowser."
		end if
		set m_orBrowser = objBrowser
	end property

	public property get CurrentBrowserName
		CurrentBrowserName = m_currentBrowserName
	end property

	public sub SetCurrentBrowser(strBrowserName)
		on error resume next
		if not m_browsers.Exists(strBrowserName) then
			Logger.ReportScriptError "(BrowserStore.SetCurrentBrowser) Error setting browser '" & strBrowserName & "' as current browser. No browser of that name exists in the BrowserStore dictionary."
		end if
		m_currentBrowserName = strBrowserName
		m_orBrowser.SetTOProperty "openurl", m_browsers(strBrowserName)
		on error goto 0
	end sub

'	public function GetBrowser(strBrowserName)
'		if TypeName(strBrowserName) <> "String" then
'			Logger.ReportScriptError "(BrowserStore.GetBrowser) Invalid type passed in for parameter strBrowserName: " & TypeName(strBrowserName) & ". A 'String' is required."
'		end if
'		if not m_browsers.Exists(strBrowserName) then
'			Logger.ReportScriptError "(BrowserStore.GetBrowser) Error getting browser '" & strBrowserName & "'. No browser of that name exists in the BrowserStore dictionary."
'		end if
'		set GetBrowser = m_browsers(strBrowserName)
'	end function
	
	public property get FamilyCode
		FamilyCode = m_browserFamilyCode
	end property
	public property let FamilyCode(strFamilyCode)
		if TypeName(strFamilyCode) <> "String" then
			Logger.ReportScriptError "(BrowserStore.FamilyCode) Invalid type specified for BrowserType: " & TypeName(strFamilyCode) & ". Supported string values: ""CH"" - Chrome, ""FF"" - Firefox, ""IE"" - Internet Explorer."
		end if
		m_browserFamilyCode = strFamilyCode
	end property

	public function AddExistingBrowser(browserName, browserDescription)
		on error resume next : Err.Clear

		if IsEmpty(browserDescription) then
			set browserDescription = Description.Create
		end if

		dim descType : descType = TypeName(browserDescription)

		if descType <> "DispPropertyCollection" then
			Logger.ReportScriptError CsString.Format("(BrowserStore.AddExistingBrowser) Browser '{0}' has invalid description object type: {1}. It must be of type DispPropertyCollection (a QTP Description object).", Array(browserName, descType))
			exit function
		end if

		if Err.Number <> 0 then
			Logger.FrameworkReport micFail, "Add existing browser", CsString.Format("Error adding existing browser '{0}' of type '{1}'. {2}.", Array(browserName, m_browserFamilyCode, Err.Description))
			OrCore.OnError
			exit function
		end if
		
		dim existingBrowser : set existingBrowser = Browser(browserDescription)

		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		dim existingBrowserExists : existingBrowserExists = existingBrowser.Exist(1)
		dim openurl : openurl = existingBrowser.GetROProperty("openurl")
		Logger.SetReporterFilter oldFilter
		if not existingBrowserExists then
			Logger.FrameworkReport micFail, "Add existing browser", CsString.Format("Error adding existing browser '{0}' of type '{1}'. Browser matching the provided description cannot be found.", Array(browserName, m_browserFamilyCode))
			OrCore.OnError
			exit function
		end if
		
		if Err.Number <> 0 then
			Logger.FrameworkReport micFail, "Add existing browser", CsString.Format("Error adding existing browser '{0}' of type '{1}'. {2}.", Array(browserName, m_browserFamilyCode, Err.Description))
			OrCore.OnError
			exit function
		end if
		
		oldFilter = Logger.SetReporterFilter(rfDisableAll)
		if OrCore.IsAjaxSyncEnabled then
			Logger.Debug "(BrowserStore.AddExistingBrowser) Embedding AJAX sync javascript"
			existingBrowser.EmbedScript OrCore.AjaxSyncJS
		end if
		if Err.Number <> 0 then
			Logger.FrameworkReport micFail, "Add existing browser", CsString.Format("Error embedding AJAX sync javascript. {0}.", Array(Err.Description))
			OrCore.OnError
			exit function
		end if
		
		Logger.SetReporterFilter oldFilter
		
		if m_browsers.Exists(browserName) then
			Logger.ReportScriptError "A browser with the name '" & browserName & "' already exists. Please choose a different name for the existing browser to be added."
			exit function
		end if
		
		m_browsers.Add browserName, openUrl
		if Err.Number <> 0 then
			Logger.ReportScriptError CsString.Format("Error adding existing browser '{0}' of type '{1}' to the BrowserStore dictionary. {2}.", Array(browserName, m_browserFamilyCode, Err.Description))
			exit function
		end if

		Logger.FrameworkReport micDone, "Add existing browser", CsString.Format("Added existing browser '{0}' of type '{1}' to the BrowserStore dictionary.", Array(browserName, m_browserFamilyCode))
		on error goto 0
		
		set AddExistingBrowser = existingBrowser
	end function
	
	public function AddNewBrowser(browserName)
		on error resume next : Err.Clear
		dim newBrowser
		select case m_browserFamilyCode
			case "IE"
				set newBrowser = OpenBrowserExe("iexplore.exe")
			case "FF"
				set newBrowser = OpenBrowserExe("firefox.exe")
			case "CH"
				set newBrowser = OpenBrowserExe("chrome.exe")
		end select

		dim versionNumber : versionNumber = Browser_GetVersionNumber(newBrowser)

		if Err.Number <> 0 then
			Logger.FrameworkReport micFail, CsString.Format("Open new {0} browser", Array(m_browserFamilyCode)), CsString.Format("Error opening and adding new browser '{0}' of type '{1} {2}'. {3}.", Array(browserName, m_browserFamilyCode, versionNumber, Err.Description))
			ExitScript
			exit function
		end if

		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		dim newBrowserExists : newBrowserExists = newBrowser.Exist(1)
		Logger.SetReporterFilter oldFilter
		if not newBrowserExists then
			Logger.FrameworkReport micFail, CsString.Format("Open new {0} browser", Array(m_browserFamilyCode)), CsString.Format("Error adding new browser '{0}' of type '{1}'. Browser matching the provided description cannot be found.", Array(browserName, m_browserFamilyCode))
			ExitScript
			exit function
		end if
		
		oldFilter = Logger.SetReporterFilter(rfDisableAll)
		if OrCore.IsAjaxSyncEnabled then
			Logger.Debug "(BrowserStore.AddNewBrowser) Embedding AJAX sync javascript"
			newBrowser.EmbedScript OrCore.AjaxSyncJS
		end if
		if Err.Number <> 0 then
			Logger.ReportScriptError CsString.Format("(BrowserStore.AddNewBrowser) Error embedding AJAX sync javascript. {0}.", Array(Err.Description))
			exit function
		end if
		
		Logger.SetReporterFilter oldFilter
		
		if m_browsers.Exists(browserName) then
			Logger.ReportScriptError "(BrowserStore.AddNewBrowser) A browser with the name '" & browserName & "' already exists. Please choose a different name for the new browser."
			exit function
		end if
		
		dim openUrl : openUrl = OrCore_GetOpenUrl(newBrowser)
		
		m_browsers.Add browserName, openUrl
		if Err.Number <> 0 then
			Logger.ReportScriptError CsString.Format("(BrowserStore.AddNewBrowser) Error adding new browser '{0}' of type '{1}' to the BrowserStore dictionary. {2}.", Array(browserName, m_browserFamilyCode, Err.Description))
			exit function
		end if

		Logger.FrameworkReport micDone, CsString.Format("Open new {0} browser", Array(m_browserFamilyCode)), CsString.Format("Opened and added new browser '{0}' of type '{1}' to the BrowserStore dictionary.", Array(browserName, m_browserFamilyCode))
		on error goto 0
		
		set AddNewBrowser = newBrowser
	end function
	
	private function CreateOrCoreHtmlFile
		'const WINDOWS_DIR = 0
		'const SYSTEM_DIR = 1
		const TEMP_DIR = 2
		
		on error resume next : Err.Clear
		dim fso : set fso = CreateObject("Scripting.FileSystemObject")
		dim tempFolder : tempFolder = fso.GetSpecialFolder(TEMP_DIR)
		dim path : path = tempFolder & "\" & "orcore.html"
		Logger.Debug "Creating temp file at " & path
		dim tempFile : set tempFile = fso.CreateTextFile(path, true)
		tempFile.WriteLine "<html><head><title>OrCore</title></head><body><h1>OrCore</h1><div>OrCore has just opened a new browser.</div></body></html>"
		tempFile.Close
		
		if Err.Number <> 0 then
			Logger.Report micFailWithoutScreen, "Unable to create temp OrCore file", "Unable to create temp OrCore file. OrCore attempted to create a temporary HTML file at '" & path & "' but failed. This is usually done to help with BrowserStore.AddNewBrowser. The test will attempt to continue..."
		end if
		Err.Clear : on error goto 0
		
		CreateOrCoreHtmlFile = path
	end function

	private function OpenBrowserExe(strExeName)
		on error resume next : Err.Clear
		dim url, identifier
		dim guid : guid = LCase(GenerateGuid)
		dim browserDesc : set browserDesc = Description.Create
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		
		url = CreateOrCoreHtmlFile
		url = Replace(url, " ", "%20")
		url = Replace(url, "\", "/")
		url = "file:///" & url & "?" & guid
		Logger.Debug "Opening " & strExeName & " with url " & url
		SystemUtil.Run strExeName, url
		browserDesc("openurl").Value = ".*\?" & guid
		browserDesc("openurl").RegularExpression = true
		
		select case strExeName
			case "chrome.exe"
			case "firefox.exe"
			case "iexplore.exe"
			case else
				Logger.ReportScriptError CsString.Format("(BrowserStore.OpenBrowserExe) Unsupported browser exe: {0}", Array(strExeName))
				Logger.SetReporterFilter oldFilter
				exit function
		end select
		Browser(browserDesc).Exist 15
		
		Logger.Debug "Waiting to detect orcore.html has loaded"
		Browser(browserDesc).Page("micclass:=Page").WebElement("html tag:=h1", "innertext:=OrCore").Exist 15
		Browser(browserDesc).Sync
		Logger.Debug "orcore.html has loaded or timed-out"
		
		'UFT seems we have to wait a little while for the plugin to be properly responsive.
		Wait 3
		
		Logger.SetReporterFilter oldFilter
		dim newBrowser : set newBrowser = Browser(browserDesc)
		set OpenBrowserExe = newBrowser
		on error goto 0
	end function
	
	public sub RemoveAndCloseBrowser(browserName)
		on error resume next : Err.Clear
		if not m_browsers.Exists(browserName) then
			Logger.FrameworkReport micFail, "Close Browser", "A browser with the name '" & browserName & "' does not exist in the BrowserStore dictionary."
			exit sub
		end if

		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		
		dim openUrl : openUrl = m_browsers.Item(browserName)
		dim desc : set desc = Description.Create
		desc("micclass").Value = "Browser"
		desc("openurl").Value = openUrl
		desc("openurl").RegularExpression = false
		if Browser(desc).Exist(1) then
			Browser(desc).Close
			dim intWaitCount
			for intWaitCount = 0 to 10 step 1
				if not(Browser(desc).Exist(1)) then
					Logger.Debug "(BrowserStore.RemoveAndCloseBrowser) Browser closed after " & intWaitCount & " waits"
					exit for
				end if
				Logger.Debug "(BrowserStore.RemoveAndCloseBrowser) Browser not closed, waiting"
			next
		end if
		
		Logger.SetReporterFilter oldFilter
		m_browsers.Remove browserName

		Logger.FrameworkReport micDone, "Close Browser", CsString.Format("Closed browser '{0}' of type '{1}'.", Array(browserName, m_browserFamilyCode))
		on error goto 0
	end sub
	
	public sub RemoveAndCloseAllBrowsers()
		dim k : k = m_browsers.Keys
		dim index
		for index = UBound(k) to 0 step -1
			RemoveAndCloseBrowser k(index)
		next
	end sub
end class
dim BrowserStore : set BrowserStore = new [Static|BrowserStore]

class GenericDialog
	private m_browser
	private m_browserFamilyCode
	private m_browserVersionNumber

	private sub Class_Initialize()
	end sub
	
	public sub Init(objBrowser)
		set m_browser = objBrowser
		m_browserFamilyCode = Browser_GetFamilyCode(objBrowser)
		m_browserVersionNumber = Browser_GetVersionNumber(objBrowser)
	end sub

	public sub ClickCancel
		select case m_browserFamilyCode
		case "CH"
			m_browser.Window("nativeclass:=Chrome_WidgetWin_1", "windowstyle:=-1765277568", "index:=0").ClickOnText("Cancel")
		case "FF"
			m_browser.HandleDialog micCancel
		case "IE"
			m_browser.Dialog("nativeclass:=#32770", "index:=0").WinButton("text:=Cancel").Click
		end select
	end sub

	public sub ClickOK
		select case m_browserFamilyCode
		case "CH"
			m_browser.Window("nativeclass:=Chrome_WidgetWin_1", "windowstyle:=-1765277568", "index:=0").ClickOnText("OK")
		case "FF"
			m_browser.HandleDialog micOK
		case "IE"
			m_browser.Dialog("nativeclass:=#32770", "index:=0").WinButton("text:=OK").Click
		end select
	end sub
	
	public function Exist(lngTimeout)
		select case m_browserFamilyCode
		case "CH"
			Exist = m_browser.Window("nativeclass:=Chrome_WidgetWin_1", "windowstyle:=-1765277568").Exist(lngTimeout)
		case "FF"
			on error resume next : Err.Clear
				dim text, elapsed
				Exist = false
				for elapsed = 0 to lngTimeout step 1
					dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
					text = m_browser.GetDialogText
					Logger.SetReporterFilter oldFilter
					if Err.Number = 0 and not IsEmpty(text) then
						Exist = true
						exit for
					end if
					Err.Clear
					elapsed = elapsed + 1
					Wait 1
				next
			Err.Clear : on error goto 0
		case "IE"
			Exist = m_browser.Dialog("nativeclass:=#32770", "index:=0").Exist(lngTimeout)
		end select
	end function
	
	public function GetText
		select case m_browserFamilyCode
		case "CH"
			'TODO: Coming in v2.3.0.
			 'dim hwnd : hwnd = m_browser.Window("nativeclass:=Chrome_WidgetWin_1", "windowstyle:=-1765277568").Hwnd
			'then find UIA_TextControlTypeId and get Name property
			Logger.ReportScriptError "GenericDialog.GetText is not supported for Chrome. Coming in v.2.3."
		case "FF"
			GetText = m_browser.GetDialogText
		case "IE"
			GetText = m_browser.Dialog("nativeclass:=#32770", "index:=0").Static("windowstyle:=1342316672").Text
		end select
	end function
end class
function NewGenericDialog(objBrowser)
	dim gd : set gd = new GenericDialog
	gd.Init objBrowser
	set NewGenericDialog = gd
end function

function Browser_GetGenericDialog(objSender)
	set Browser_GetGenericDialog = NewGenericDialog(objSender)
end function
RegisterUserFunc "Browser", "GenericDialog", "Browser_GetGenericDialog"

function Browser_HandleDialog(objSender, lngButtonCode)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim buttonCodeName
	select case lngButtonCode
	case micOK
		buttonCodeName = "OK"
	case micCancel
		buttonCodeName = "Cancel"
	case else
		buttonCodeName = CStr(lngButtonCode)
	end select

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.HandleDialog lngButtonCode
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if success then
		Logger.FrameworkReport micDone, _
			CsString.Format("Click on '{0}' in '{1}'", Array(buttonCodeName, childRepoName)), _
			CsString.Format("Click on '{0}' in '{1}'. '{2}'", Array(buttonCodeName, fullQtpName, GetReportBody(objSender, null, null)))
	else
		Logger.FrameworkReport micFail, _
			CsString.Format("Click on '{0}' in '{1}'", Array(buttonCodeName, childRepoName)), _
			CsString.Format("Failed to click on '{0}' in '{1}'. '{2}'", Array(buttonCodeName, fullQtpName, GetReportBody(objSender, null, errorMsg)))
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end function
RegisterUserFunc "Browser", "HandleDialog", "Browser_HandleDialog"

function Browser_GetDomParent(objBrowser)
	dim domParent
	if Browser_GetFamilyCode(objBrowser) = "IE" then
		if Browser_GetVersionNumber(objBrowser) > 8 then
			set domParent = objBrowser.Page("micclass:=Page")
		else
			set domParent = objBrowser
		end if
	else
		set domParent = objBrowser.Page("micclass:=Page")
	end if
	set Browser_GetDomParent = domParent
end function

class ParentWindow
	private m_windowObject
	private m_windowType
	
	public sub Init(objWindow)
		set m_windowObject = objWindow
		m_windowType = objWindow.GetTOProperty("Class Name")
	end sub

	public property get [Object]
		set [Object] = m_windowObject
	end property

	public property get [Type]
		[Type] = m_windowType
	end property
end class

function NewParentWindow(objWindow)
	dim pw :set pw = new ParentWindow
	pw.Init objWindow
	set NewParentWindow = pw
end function

'END OF BROWSER STRUCTURES/METHODS
'====================================================================================================
'==================
'= Global functions =
'==================
function GetObjectType(objSender)
   	if IsNull(objSender) then
		GetObjectType = null
		exit function
	end if

	GetObjectType = objSender.GetTOProperty("Class Name")
end function

function OrCore_GetParentWindow(objSender)
	if IsNull(objSender) then
		set OrCore_GetParentWindow = Nothing
		exit function
	end if
	
	on error resume next : Err.Clear
	
	dim objParent : set objParent = objSender
	do while true
		if IsEmpty(objParent.GetTOProperty("parent")) or objParent.GetTOProperty("Class Name") = "SAPGuiWindow" then
			exit do
		end if
		set objParent = objParent.GetTOProperty("parent")
	loop
	
	if Err.Number <> 0 then
		set OrCore_GetParentWindow = Nothing
		exit function
	end if
	
	dim pw : set pw = NewParentWindow(objParent)
	set OrCore_GetParentWindow = pw
end function

sub OrCore_GlobalSync(objSender)
	if not OrCore.IsGlobalSyncEnabled then
		exit sub
	end if
	
	dim objParent : set objParent = OrCore_GetParentWindow(objSender)
	if IsNothing(objParent) then
		exit sub
	end if

	select case objParent.Type
		case "Browser"
			Browser_SyncEx objSender
		case "SapGuiSession"
			SapGuiWindow_SyncEx objParent.Object	
	end select
end sub

sub OrCore_TypeKeys(strText)
	if not IsString(strText) then
		Logger.ReportScriptError "(OrCore_TypeKeys) strText is invalid. Must be a String."
		ExitTest
	end if
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		dim i
		for i = 1 to Len(strText)
			OrCore.WScriptShell.SendKeys Mid(strText, i, 1)
			Wait 0, 100
		next
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.Report micDone, CsString.Format("Type keys '{0}'", Array(strText)), CsString.Format("Typed keys for string '{0}'.", Array(strText))
	else
		Logger.Report micFail, CsString.Format("Type keys '{0}'", Array(strText)), CsString.Format("Error typing keys for string '{0}'. {1}", Array(strText, errorMsg))
		OrCore.OnError
	end if
end sub

sub OrCore_SendKeys(objSender, strText)
	OrCore_Click objSender
	OrCore_TypeKeys strText
end sub
RegisterUserFunc "WebEdit", "SendKeys", "OrCore_SendKeys"
RegisterUserFunc "WinEdit", "SendKeys", "OrCore_SendKeys"

'==================
'= SAP functions =
'==================

sub SapGuiWindow_SyncEx(qtpSapWindow)
	if IsNothing(qtpSapWindow) then
		exit sub
	end if

	dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
	if not qtpSapWindow.Exist(1) then
		Logger.SetReporterFilter oldFilter
		Exit Sub
	end if
	qtpSapWindow.sync
	qtpSapWindow.RefreshObject
	Logger.SetReporterFilter oldFilter
	on error goto 0 : Err.Clear	
end sub
RegisterUserFunc "SAPGuiStatusBar", "Sync", "SapGuiWindow_SyncEx"
RegisterUserFunc "SapGuiSession", "Sync", "SapGuiWindow_SyncEx"

'==================
'= HTML functions =
'==================

function GetHtmlTable(arrRows, htmlId, htmlClass, dataLabel, hasHeader, sanitize)
	dim sb : set sb = NewStringBuilder()
	
	sb.Append "<br/><table cellspacing=""0"""
	if not IsNull(htmlId) then
		sb.Append " id=""" & htmlId & """"
	end if

	if not IsNull(htmlClass) then
		sb.Append " class=""" & htmlclass & """"
	else
		'Default style.
		sb.Append " class=""base"""
	end if
	
	if not IsNull(dataLabel) then
		sb.Append " data-label=""" & dataLabel & """"
	end if
	sb.Append ">"
   	
	dim rowIndex
	for rowIndex = 0 to UBound(arrRows)
		if (rowIndex = 0) and hasHeader then
			sb.Append "<thead>"
			AddHtmlRow sb, arrRows(rowIndex), "th", sanitize
			sb.Append "</thead>"
		else
			if ((rowIndex = 0) and not hasHeader) or ((rowIndex = 1) and hasHeader) then
				sb.Append "<tbody>"
			end if
			AddHtmlRow sb, arrRows(rowIndex), "td", sanitize
		end if
	next	
	
	sb.Append "</tbody>"
	sb.Append "</table>"
	GetHtmlTable = sb.ToString()
end function

sub AddHtmlRow(byref objStringBuilder, arrCells, cellType, sanitize)
	dim sb : set sb = objStringBuilder
	
	sb.Append "<tr>"

	dim cellIndex
	for cellIndex = 0 to UBound(arrCells)
		sb.Append "<" & cellType & ">"
		if not IsNull(arrCells(cellIndex)) then
			if sanitize then
				sb.Append HtmlEncode(CStr(arrCells(cellIndex)))
			else
				sb.Append CStr(arrCells(cellIndex))
			end if
		end if
		sb.Append "</" & cellType & ">"
	next

	sb.Append "</tr>"
end sub

function HtmlEncode(byval data)
	dim rgx : set rgx = new RegExp
	rgx.Pattern = "[^ a-zA-Z0-9]"
	rgx.IgnoreCase = false 
	rgx.Global = true 
	HtmlEncode = rgx.Replace(data , GetRef("HtmlEncodeReplace")) 
end function

function HtmlEncodeReplace(char, pos, text)
	HtmlEncodeReplace = "&#" & AscW(char) & ";"
end function

function Browser_GetFamilyCode(objSender)
	dim family : family = OrCore_GetVersion(objSender)
	dim version
	if CsString.StartsWith(family, "internet explorer", false) then
		Browser_GetFamilyCode = "IE"
	elseif CsString.StartsWith(family, "Mozilla Firefox", false) then
		Browser_GetFamilyCode = "FF"
	elseif CsString.StartsWith(family, "Chrome", false) then
		Browser_GetFamilyCode = "CH"
	else
		Logger.ReportScriptError "(Browser_GetVersion) Unknown browser type: " & family
	end if
end function
RegisterUserFunc "Browser", "FamilyCode", "Browser_GetFamilyCode"

function Browser_GetVersionNumber(objSender)
	dim family : family = OrCore_GetVersion(objSender)
	dim familyCode : familyCode = Browser_GetFamilyCode(objSender)
	select case familyCode
	case "IE"
		Browser_GetVersionNumber = CDbl(Mid(family, Len("internet explorer") + 2))
	case "FF"
		'Firefox version numbers in later versions come with Major.Minor.Revision format.
		dim ffVersionString : ffVersionString = Mid(family, Len("Mozilla Firefox") + 2)
		dim dotIndex1 : dotIndex1 = Instr(1, ffVersionString, ".", 1)
		dim dotIndex2 : dotIndex2 = InStr(dotIndex1 + 1, ffVersionString, ".", 1)
		if dotIndex2 = 0 Then
			Browser_GetVersionNumber = CDbl(ffVersionString)
		else
			Browser_GetVersionNumber = CDbl(Left(ffVersionString, dotIndex2 - 1))
		end if
	case "CH"
		Browser_GetVersionNumber = CDbl(Mid(family, Len("Chrome") + 2))
	case else
		Logger.ReportScriptError "Unknown browser type: " & family
	end select
end function
RegisterUserFunc "Browser", "VersionNumber", "Browser_GetVersionNumber"

function Browser_GetDomProperty(objBrowser, strDomProperty)
	dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
	Browser_ExecuteJS objBrowser, "s=document.body.appendChild(document.createElement('div'));s.id='OrCore_GetDomProperty';s.textContent=" & strDomProperty & ";"
	Browser_GetDomProperty = objBrowser.Page("micclass:=Page").WebElement("micclass:=WebElement", "html id:=OrCore_GetDomProperty", "html tag:=div").GetRoProperty("innerhtml")
	Browser_ExecuteJS objBrowser, "s=document.body.removeChild(document.getElementById('OrCore_GetDomProperty'));"
	Logger.SetReporterFilter oldFilter
end function
RegisterUserFunc "Browser", "GetDomProperty", "Browser_GetDomProperty"

sub Browser_SyncEx(objSender)
	if IsNothing(objSender) then
		Logger.Debug "(Browser_SyncEx) Empty objSender, exiting sync"
		exit sub
	end if
	
	dim objBrowser : set objBrowser = OrCore_GetParentWindow(objSender).Object
	if IsNothing(objBrowser) then
		Logger.Debug "(Browser_SyncEx) Empty objBrowser, exiting sync"
		exit sub
	end if

	dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
	if not objBrowser.Exist(1) then
		Logger.Debug "(Browser_SyncEx) Browser does not exist, exiting sync"
		Logger.SetReporterFilter oldFilter
		exit sub
	end if
	
	on error resume next : Err.Clear
	
	dim syncTime : syncTime = UFT.BrowserNavigationTimeout
	MercuryTimers("SyncTimer").Reset
	MercuryTimers("SyncTimer").Start
	
	if OrCore.IsStandardWebSyncEnabled then
		Logger.Debug "(Browser_SyncEx) Standard web sync is enabled"
		dim domParent
		if Browser_GetFamilyCode(objBrowser) = "IE" then
			if Browser_GetVersionNumber(objBrowser) > 8 then
				set domParent = objBrowser.Page("micclass:=Page")
			else
				set domParent = objBrowser
			end if
		else
			set domParent = objBrowser.Page("micclass:=Page")
		end if
	
		do while MercuryTimers("SyncTimer").ElapsedTime < syncTime
			UnRegisterUserFunc "Browser", "Sync" 'Prevent double sync in some scenarios.
			objBrowser.Sync
			RegisterUserFunc "Browser", "Sync", "Browser_SyncEx"
			Logger.Debug "(Browser_SyncEx) afterSync: " & MercuryTimers("SyncTimer").ElapsedTime
			
			' Only use original UFT Browser.Sync method.
			if not OrCore.IsAdvancedWebSyncEnabled then
				Logger.Debug "(Browser_SyncEx) Advanced web sync is disabled"
				exit do
			end if
			Logger.Debug "(Browser_SyncEx) Advanced web sync is enabled"
			
			dim readyState : readyState = domParent.object.readyState
			do while not ((readyState = "complete") or (readyState = "4"))
				Logger.Debug "(Browser_SyncEx) readyState: " & readyState
				if MercuryTimers("SyncTimer").ElapsedTime > syncTime then
					exit do
				end if
	
				if Browser_GetGenericDialog(objBrowser).Exist(0) then
					Logger.Debug "(Browser_SyncEx) Dialog detected, exiting sync"
					Logger.SetReporterFilter oldFilter
					exit Sub
				end if
	
				Wait 0, 300
				readyState = domParent.object.readyState
			loop
			
			Logger.Debug "499"
			
			if OrCore.AdvancedWebSyncRedirectDelay > 0 then
				Wait 0, OrCore.AdvancedWebSyncRedirectDelay
			end if
			
			'if OrCore.AdvancedWebSyncRedirectDelay > 0 then
			'	Wait 0, OrCore.AdvancedWebSyncRedirectDelay
			'end if
			Logger.Debug "500"
			
			readyState = domParent.object.readyState
			if ((readyState = "complete") or (readyState = "4")) then
				if not OrCore.IsAjaxSyncEnabled then
					Logger.Debug "(Browser_SyncEx) AJAX sync is disabled"
					exit do
				end if
				Logger.Debug "(Browser_SyncEx) AJAX sync is enabled"
				
				dim ajaxCount
				do
					if MercuryTimers("SyncTimer").ElapsedTime > syncTime then
						'Reset count so long-running XHRs are ignored if syncing again on same page without refresh.
						objBrowser.Page("micclass:=Page").RunScript "console.log('UFT-OrCore:Resetting uftAjaxTracker to 0');window.document.uftAjaxTracker=0;"
						exit do
					end if
					ajaxCount = domParent.object.uftAjaxTracker
					Logger.Debug "(Browser_SyncEx) AJAX activity count: " & ajaxCount
					
					if ajaxCount > 0 then
						Wait 0, 200
					end if
				loop while ajaxCount > 0
				exit do
			end if
		loop
		
		MercuryTimers("SyncTimer").Stop
		Logger.SetReporterFilter oldFilter
	
		Logger.Debug "(Browser_SyncEx) afterReadyState: " & MercuryTimers("SyncTimer").ElapsedTime
		Logger.Debug "(Browser_SyncEx) syncTime: " & syncTime
		Logger.Debug "(Browser_SyncEx) acceptable: " & (OrCore.AcceptableSyncTime * 1000)
	
		if MercuryTimers("SyncTimer").ElapsedTime > syncTime then
			'If browser no longer exists here, do not report an error.
			oldFilter = Logger.SetReporterFilter(rfDisableAll)
			if not objBrowser.Exist(0) then
				Logger.Debug "(Browser_SyncEx) Browser no longer exists, exiting sync"
				Logger.SetReporterFilter oldFilter
				Exit Sub
			end if
			Logger.SetReporterFilter oldFilter
			Logger.Debug "(Browser_SyncEx) Timeout"
			Logger.FrameworkReportEx micPageTimeout, "Timeout", CsString.Format("Browser Sync Failure - the page failed to finish loading after {0} seconds. Continuing script.", Array(UFT.BrowserNavigationTimeout / 1000)), objBrowser, null, null
		elseif MercuryTimers("SyncTimer").ElapsedTime > (OrCore.AcceptableSyncTime * 1000) then
			dim sngSyncTimeSeconds
			sngSyncTimeSeconds = CSng(MercuryTimers("SyncTimer").ElapsedTime) / CSng(1000)
			Logger.Debug "(Browser_SyncEx) Slow page load"
			Logger.FrameworkReportEx micInfo, CsString.Format("Slow Page Load - {0} secs", Array(sngSyncTimeSeconds)), CsString.Format("Slow page load - the page took {0} seconds to load. Acceptable page load time is set at {1} seconds.", Array(sngSyncTimeSeconds, OrCore.AcceptableSyncTime)), objBrowser, null, null
		end if
	else
		Logger.Debug "(Browser_SyncEx) Standard web sync is disabled"
		MercuryTimers("SyncTimer").Stop
		Logger.SetReporterFilter oldFilter
	end if
	
	OrCore.OnBrowserSync objSender, MercuryTimers("SyncTimer").ElapsedTime
	
	on error goto 0 : Err.Clear
end sub
RegisterUserFunc "Browser", "Sync", "Browser_SyncEx"

sub Page_SyncEx(objSender)
	Browser_SyncEx objSender.GetTOProperty("parent")
End sub
RegisterUserFunc "Page", "Sync", "Page_SyncEx"

sub DataTable_ImportDataSheet(strPath, strSheetName)
	on error resume next : Err.Clear
		Logger.Debug "(DataTable_ImportDataSheet) Creating list of existing DataSheet names"
		dim sheetNames : set sheetNames = CreateObject("Scripting.Dictionary")
		dim i
		for i = DataTable.GetSheetCount To 1 Step -1
			sheetNames.Add DataTable.GetSheet(i).Name, ""
		Next
		if Err.Number <> 0 then
			Logger.Report micFailWithoutScreen, "Import DataSheet", _
				CsString.Format("Error creating list of current DataSheets. {0}", Array(Err.Description))
			on error goto 0 : Err.Clear
			OrCore.OnError
		end if
		
		if not sheetNames.Exists(strSheetName) then
			Logger.Debug "(DataTable_ImportDataSheet) Creating sheet '" & strSheetName & "'"
			DataTable.AddSheet strSheetName
			if Err.Number <> 0 then
				Logger.Report micFailWithoutScreen, "Import DataSheet", _
					CsString.Format("Error creating new DataSheet '{0}'. {1}", Array(strSheetName, Err.Description))
				on error goto 0 : Err.Clear					
				OrCore.OnError
			end if
		end if
		
		Logger.Debug "(DataTable_ImportDataSheet) Importing sheet '" & strSheetName & "' from '" & strPath & "'"
		DataTable.ImportSheet strPath, strSheetName, strSheetName
		if Err.Number <> 0 then
			Logger.Report micFailWithoutScreen, "Import DataSheet", _
				CsString.Format("Error importing DataSheet '{0}' from file '{1}'. {2}", Array(strSheetName, strPath, Err.Description))
			on error goto 0 : Err.Clear
			OrCore.OnError
		end if
	Err.Clear
	on error goto 0
end sub

'====================================
'= Object repository name functions =
'====================================

function GetClassName(obj)
	GetClassName = obj.GetTOProperty("class Name")
end function

function GetFullQtpName(obj)
	dim fullQtpName	: fullQtpName = MakeQtpName(obj)
	dim objCurrent : set objCurrent = obj

	do while not IsEmpty(objCurrent.GetTOProperty("parent"))
		set objCurrent = objCurrent.GetTOProperty("parent")
		fullQtpName = MakeQtpName(objCurrent) & "." & fullQtpName
	loop
	
	GetFullQtpName = fullQtpName
end function

function GetObjectExistenceHtml(obj)
	dim arr()
	dim numObjects : numObjects = 0
	dim objCurrent : set objCurrent = obj

	dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
	do
		numObjects = numObjects + 1
		redim preserve arr(numObjects-1)
		arr(numObjects-1) = MakeQtpName(objCurrent)
	
		if not(IsEmpty(objCurrent.GetTOProperty("parent"))) then
			set objCurrent = objCurrent.GetTOProperty("parent")
		else
			objCurrent = null
		end if
	loop until IsNull(objCurrent)

	ReverseOriginalArray arr

	dim i
	dim arrHtml : redim arrHtml(UBound(arr))
	dim objectCode : objectCode = ""

	for i = 0 to UBound(arr)
		if (i > 0) then
			objectCode = objectCode & "." & arr(i)
		else
			objectCode = arr(i)
		end if
		dim objectExists
		
		on error resume next
			'For objects defined via descriptive programming, the object name will appear as Dialog("[Dialog]") instead of its descriptive properties.
			'The object cannot therefore be located and will cause an error.
			'As a temporary fix we abort producing the html in this scenario.
			Execute("objectExists = " & objectCode & ".Exist(1)")
			if Err.Number <> 0 then
				GetObjectExistenceHtml = ""
				Logger.SetReporterFilter oldFilter
				Err.Clear
				on error goto 0
				exit function
			end if
		Err.Clear
		on error goto 0
		if objectExists then
			arrHtml(i) = "<span class=""objectExists"">" & arr(i) & "</span>"
		else
			arrHtml(i) = "<span class=""objectDoesNotExist"">" & arr(i) & "</span>"
		end if
	next
	
	Logger.SetReporterFilter oldFilter
	GetObjectExistenceHtml = join(arrHtml, ".")
end function

function GetObjectPropertyListHtml(obj)
	dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)

	on error resume next
		dim orProperties : set orProperties = obj.GetTOProperties
		dim propertyArray(), index
		dim ordinalCreationTime : ordinalCreationTime = obj.GetTOProperty("creationtime")
		dim ordinalIndex : ordinalIndex = obj.GetTOProperty("index")
		dim ordinalLocation : ordinalLocation = obj.GetTOProperty("location")
		if (ordinalCreationTime = "") and (ordinalIndex = "") and (ordinalLocation = "") then
			redim propertyArray(orProperties.Count)
		else
			redim propertyArray(orProperties.Count+1)
		end if
		propertyArray(0) = Array("Name", "Value", "Regex")
		for index = 0 to orProperties.Count - 1
			propertyArray(index+1) = Array(orProperties(index).Name, orProperties(index).Value, orProperties(index).RegularExpression)
		next
		Logger.SetReporterFilter oldFilter
	on error goto 0
	if not ordinalCreationTime = "" then
		propertyArray(UBound(propertyArray)) = Array("creationtime", ordinalCreationTime, "False")
	elseif not ordinalIndex = "" then
		propertyArray(UBound(propertyArray)) = Array("index", ordinalIndex, "False")
	elseif not ordinalLocation = "" then
		propertyArray(UBound(propertyArray)) = Array("location", ordinalLocation, "False")
	end if
	GetObjectPropertyListHtml = GetHtmlTable(propertyArray, null, "base stepData", "object identifiers", true, false)
end function

function GetRepoName(obj)
	GetRepoName = obj.GetTOProperty("TestObjName")
end function

function GetTONameProperty(obj)
	GetTONameProperty = obj.GetTOProperty("name")
end function

function MakeQtpName(obj)
	MakeQtpName = GetClassName(obj) & "(""" & GetRepoName(obj) & """)"
end function

function GetReportBody(objSender, dictParams, strErrorMsg)
	'Expensive operation? TODO: add a flag so we can enable/disable adding this to the report.
	dim orPropertyHtml : orPropertyHtml = GetObjectPropertyListHtml(objSender)
	
	dim objectExistenceHtml
	if IsNull(strErrorMsg) then
		objectExistenceHtml = ""
	else
		objectExistenceHtml = GetObjectExistenceHtml(objSender)
	end if
	strErrorMsg = IIF(IsNull(strErrorMsg), "", strErrorMsg & "")
	
	dim paramHtml
	if IsNull(dictParams) then
		paramHtml = ""
	else
		'Copy the params to new array with header.
		dim arrParams() : redim arrParams(dictParams.Count)
		arrParams(0) = Array("Name", "Value")
		dim index
		dim keys : keys = dictParams.Keys
		for index = 1 to dictParams.Count step 1
			arrParams(index) = Array(keys(index-1), dictParams.Item(keys(index-1)))
		next
		paramHtml = GetHtmlTable(arrParams, null, "base stepData", "step parameters", true, true)
	end if

	GetReportBody = CsString.Format("{0}{1}{2}{3}", Array(strErrorMsg, objectExistenceHtml, paramHtml, orPropertyHtml))
end function


'======================
'= Screenshot classes =
'======================

sub Browser_CaptureFullPage(objSender, strFilename)
	dim wpc : set wpc = NewWebPageCapturer(objSender)
	wpc.CapturePage strFilename
end sub
RegisterUserFunc "Browser", "CaptureFullPage", "Browser_CaptureFullPage"

class WebPageCapturer
	private m_browser
	private m_browserFamily
	private m_browserVersion
	private m_isStrictMode

	private sub Class_Initialize()
	end sub
	
	public sub Init(objBrowser)
		set m_browser = objBrowser
		m_browserFamily = Browser_GetFamilyCode(objBrowser)
		m_browserVersion = Browser_GetVersionNumber(objBrowser)
	end sub

	' Instance methods.
	
	public sub CapturePage(filename)
		Browser_SyncEx m_browser
		' Update strictMode every time we capture a screenshot.
		m_isStrictMode = IsStrictMode
	
		dim hwnd, url
		hwnd = CLng(OrCore_GetROProperty(m_browser.Page("micclass:=Page"), "HWND")) 'IMPORTANT - needs to be the hwnd of the page
		' NOTE: hwnd of Browser and Page are the same for FF versions 4+, hence the offset calculations below.
		url = OrCore_GetROProperty(m_browser, "url")
		
		dim scrollWidth, scrollHeight
		scrollWidth = GetScrollWidth()
		scrollHeight = GetScrollHeight()
		
		dim clientAreaWidth, clientAreaHeight
		clientAreaWidth = GetClientWidth()
		clientAreaHeight = GetClientHeight()
		
		' Get page count.
		dim hPageCount, vPageCount
		hPageCount = RoundUp(CDbl(scrollWidth) / CDbl(clientAreaWidth))
		vPageCount = RoundUp(CDbl(scrollHeight) / CDbl(clientAreaHeight))

		' An explanation of hTrim, vTrim, clientAreaOffsetX, and clientAreaOffsetY:
		'
		' The WebPageCapturer class works by painting the contents of a given window into an image buffer in slices.
		' Different versions of IE and Firefox include various bits of the surrounding chrome when painting the image,
		' and this results in extra black space or repeated strips of extra colour in various places in the final
		' stitched-together image. hTrim and vTrim are used to trim off part of the left or top of the final image.
		'
		' clientAreaOffsetX and clientAreaOffsetY are used to shift the area to be copied to the image buffer for each
		' slice by a certain number of X and Y pixels from the top-left of the screen.
		'
		' For example: If clientAreaOffsetY is not used with Firefox (set it to 0 to try), each slice of the image will
		' contain the entire browser header (since a Firefox tab and its header/chrome/controls are painted in a single
		' window), and so from the 2nd slice onwards part of the image gets overwritten by a repeat of the browser header.
		' This is because the detected client area size does not match the image size for that browser's hwnd.
		
		dim hTrim, vTrim
		select case m_browserFamily
		case "IE"
			hTrim = 2
			vTrim = 0
		case "FF"
			if m_browserVersion >= 4.0 Then
				hTrim = 5
				vTrim = 0
			else
				hTrim = 0
				vTrim = 0
			end if
		case "CH"
			hTrim = 0
			vTrim = 3
		end select
		
		dim browserWindowObject : set browserWindowObject = Window("hwnd:=" & hwnd)
		dim sourceWindowWidth, sourceWindowHeight
		sourceWindowWidth = CLng(OrCore_GetROProperty(browserWindowObject, "width"))
		sourceWindowHeight = CLng(OrCore_GetROProperty(browserWindowObject, "height"))
		
		dim clientAreaOffsetX, clientAreaOffsetY
		select case m_browserFamily
		case "IE"
			clientAreaOffsetX = 0
			clientAreaOffsetY = 0
		case "FF"
			if m_browserVersion >= 13.0 then
				clientAreaOffsetX = 0
				' Not entirely sure after which Firefox version this changed. It was OrCore_GetROProperty(m_browser, "abs_y")
				' between at least 3.6 and 12.0, and detected in 20.0. We need to trim 3 extra pixels of chrome at the top of
				' each slice.
				clientAreaOffsetY = OrCore_GetROProperty(m_browser, "abs_y") + 3
			elseif m_browserVersion >= 4.0 then
				clientAreaOffsetX = 0
				clientAreaOffsetY = OrCore_GetROProperty(m_browser, "abs_y")
			else
				clientAreaOffsetX = 0
				clientAreaOffsetY = 0
			End If
		case "CH"
			clientAreaOffsetX = OrCore_GetROProperty(m_browser.Page("micclass:=Page"), "abs_x") - OrCore_GetROProperty(m_browser, "abs_x")
			clientAreaOffsetY = OrCore_GetROProperty(m_browser.Page("micclass:=Page"), "abs_y") - OrCore_GetROProperty(m_browser, "abs_y")
		end select

		' Use the .NET DLL to take the screenshot.
		dim factory
		set factory = DotNetFactory.CreateInstance("OrCore.Common.PageCapturerFactory", UFT.DotNetExtensionDllPath)

		dim capturer
		set capturer = factory.Create(hwnd, scrollwidth, scrollheight, sourceWindowWidth, sourceWindowHeight, clientAreaWidth, clientAreaHeight, hTrim, vTrim, clientAreaOffsetX, clientAreaOffsetY, url)

		set factory = nothing
		
		dim i, j
		dim scrollLeft, scrollTop
		for i = hPageCount to 0 step -1
			SetScrollLeft (clientAreaWidth - 5) * i
			scrollLeft = GetScrollLeft()
		
			for j = vPageCount to 0 step -1
				SetScrollTop (clientAreaHeight - 5) * j
				scrollTop = GetScrollTop()
				capturer.AddScreenslice scrollLeft, scrollTop
			next
		next
		
		capturer.Save filename, false
		capturer.DisposeScreenshot
		set capturer = nothing
	end sub
	
	private function GetClientHeight()
		select case m_browserFamily
		case "IE"
			if m_isStrictMode then
				GetClientHeight = CLng(m_browser.Object.Document.documentElement.clientHeight)
			else
				GetClientHeight = CLng(m_browser.Object.Document.body.clientHeight)
			end if
		case else
			GetClientHeight = CLng(Browser_GetDomProperty(m_browser, "window.innerHeight"))
		end select
	end function

	private function GetClientWidth()
		select case m_browserFamily
		case "IE"
			if m_isStrictMode then
				GetClientWidth = CLng(m_browser.Object.Document.documentElement.clientWidth)
			else
				GetClientWidth = CLng(m_browser.Object.Document.body.clientWidth)
			end if
		case else
			GetClientWidth = CLng(Browser_GetDomProperty(m_browser, "window.innerWidth"))
		end select
	end function
	
	private function GetScrollHeight()
		select case m_browserFamily
		case "IE"
			if m_isStrictMode then
				GetScrollHeight = CLng(m_browser.Object.Document.documentElement.scrollHeight)
			else
				GetScrollHeight = CLng(m_browser.Object.Document.body.scrollHeight)
			end if
		case "FF"
			GetScrollHeight = CLng(Browser_GetDomProperty(m_browser, "document.documentElement.scrollHeight"))
		case "CH"
			GetScrollHeight = CLng(Browser_GetDomProperty(m_browser, "document.body.scrollHeight"))
		end select
	end function
	
	private function GetScrollLeft()
		select case m_browserFamily
		case "IE"
			if m_isStrictMode then
				GetScrollLeft = CLng(m_browser.Object.Document.documentElement.scrollLeft)
			else
				GetScrollLeft = CLng(m_browser.Object.Document.body.scrollLeft)
			end if
		case "FF"
			if m_isStrictMode then
				GetScrollLeft = CLng(Browser_GetDomProperty(m_browser, "document.documentElement.scrollLeft"))
			else
				GetScrollLeft = CLng(Browser_GetDomProperty(m_browser, "document.body.scrollLeft"))
			end if
		case "CH"
			GetScrollLeft = CLng(Browser_GetDomProperty(m_browser, "document.body.scrollLeft"))
		end select
	end function
	
	private function GetScrollTop()
		select case m_browserFamily
		case "IE"
			if m_isStrictMode then
				GetScrollTop = CLng(m_browser.Object.Document.documentElement.scrollTop)
			else
				GetScrollTop = CLng(m_browser.Object.Document.body.scrollTop)
			end if
		case "FF"
			if m_isStrictMode then
				GetScrollTop = CLng(Browser_GetDomProperty(m_browser, "document.documentElement.scrollTop"))
			else
				GetScrollTop = CLng(Browser_GetDomProperty(m_browser, "document.body.scrollTop"))
			end if
		case "CH"
			GetScrollTop = CLng(Browser_GetDomProperty(m_browser, "document.body.scrollTop"))
		end select
	end function
	
	private function GetScrollWidth()
		select case m_browserFamily
		case "IE"
			if m_isStrictMode then
				GetScrollWidth = CLng(m_browser.Object.Document.documentElement.scrollWidth)
			else
				GetScrollWidth = CLng(m_browser.Object.Document.body.scrollWidth)
			end if
		case "FF"
			GetScrollWidth = CLng(Browser_GetDomProperty(m_browser, "document.documentElement.scrollWidth"))
		case "CH"
			GetScrollWidth = CLng(Browser_GetDomProperty(m_browser, "document.body.scrollWidth"))
		end select
	end function
	
	private sub SetScrollLeft(scrollLeft)
		select case m_browserFamily
		case "IE"
			if m_isStrictMode then
				m_browser.Object.Document.documentElement.scrollLeft = scrollLeft
			else
				m_browser.Object.Document.body.scrollLeft = scrollLeft
			end if
		case "FF"
			if m_isStrictMode then
				Browser_ExecuteJS m_browser, "document.documentElement.scrollLeft=" & scrollLeft & ";"
			else
				Browser_ExecuteJS m_browser, "document.body.scrollLeft=" & scrollLeft & ";"
			end if
		case "CH"
			Browser_ExecuteJS m_browser, "document.body.scrollLeft=" & scrollLeft & ";"
		end select
	end sub
	
	private sub SetScrollTop(scrollTop)
		select case m_browserFamily
		case "IE"
			if m_isStrictMode then
				m_browser.Object.Document.documentElement.scrollTop = scrollTop
			else
				m_browser.Object.Document.body.scrollTop = scrollTop
			end if
		case "FF"
			if m_isStrictMode then
				Browser_ExecuteJS m_browser, "document.documentElement.scrollTop=" & scrollTop & ";"
			else
				Browser_ExecuteJS m_browser, "document.body.scrollTop=" & scrollTop & ";"
			end if
		case "CH"
			Browser_ExecuteJS m_browser, "document.body.scrollTop=" & scrollTop & ";"
		end select
	end sub
	
	' Properties.
	
	private property get IsStrictMode
		select case m_browserFamily
		case "IE"
			if m_browser.Object.Document.documentElement.clientHeight > 0 then
				IsStrictMode = true
			else
				IsStrictMode = false
			end if
		case else
			dim windowHeight, clientHeight
			windowHeight = Browser_GetDomProperty(m_browser, "window.innerHeight")
			clientHeight = Browser_GetDomProperty(m_browser, "document.documentElement.clientHeight")
			if windowHeight = clientHeight then
				IsStrictMode = true
			else
				IsStrictMode = false
			end if
		end select
	end property
end class
function NewWebPageCapturer(objBrowser)
	set NewWebPageCapturer = new WebPageCapturer
	NewWebPageCapturer.Init objBrowser
end function

'SAP Window capture. 
'If no SAP window, Print the current active window instead.
'function activeWindowsCapturer(localFilePath)
'	dim oScreenCapture: set oScreenCapture =  DotNetFactory.CreateInstance("WinAppScreenCapture.ScreenCapture", OrCore.SapCaptureDllPath)	
'	oScreenCapture.FullScreenCapture  localFilePath	
'	set oScreenCapture = nothing
'end function

'function windowsCapturer(objSender, localFilePath)
'	dim oScreenCapture: set oScreenCapture =  DotNetFactory.CreateInstance("WinAppScreenCapture.ScreenCapture", OrCore.SapCaptureDllPath)
'	dim hwnd, pwObject
'
'	set pwObject = OrCore_GetParentWindow(objSender).object
'	on error resume next : Err.Clear
'		Reporter.Filter  = rfDisableAll
'		pwObject.Activate
'		hwnd = pwObject.GetROProperty("handle")
'		Reporter.Filter  = rfEnableAll 
'		success = (Err.Number = 0)
'	Err.Clear
'	on error goto 0
'
'	
'	if CLng(hwnd) <> 0 then
'		oScreenCapture.WinScreenCapture hwnd, localFilePath
'	else
'		call activeWindowsCapturer(localFilePath)
'	end if
'	set oScreenCapture = nothing
'end function

function SapTranslateKeyCode(lngKey)
	dim dic : set dic = CreateObject("Scripting.Dictionary")
	dic.Add 0, "ENTER"
	dic.Add 1, "F1"
	dic.Add 2, "F2"
	dic.Add 3, "F3"
	dic.Add 4, "F4"
	dic.Add 5, "F5"
	dic.Add 6, "F6"
	dic.Add 7, "F7"
	dic.Add 8, "F8"
	dic.Add 9, "F9"
	dic.Add 10, "F10"
	dic.Add 11, "F11"
	dic.Add 12, "ESC"
	dic.Add 13, "SHIFT_F1"
	dic.Add 14, "SHIFT_F2"
	dic.Add 15, "SHIFT_F3"
	dic.Add 16, "SHIFT_F4"
	dic.Add 17, "SHIFT_F5"
	dic.Add 18, "SHIFT_F6"
	dic.Add 19, "SHIFT_F7"
	dic.Add 20, "SHIFT_F8"
	dic.Add 21, "SHIFT_F9"
	dic.Add 22, "SHIFT_F10"
	dic.Add 23, "SHIFT_F11"
	dic.Add 24, "SHIFT_F12"
	dic.Add 25, "CTRL_F1"
	dic.Add 26, "CTRL_F2"
	dic.Add 27, "CTRL_F3"
	dic.Add 28, "CTRL_F4"
	dic.Add 29, "CTRL_F5"
	dic.Add 30, "CTRL_F6"
	dic.Add 31, "CTRL_F7"
	dic.Add 32, "CTRL_F8"
	dic.Add 33, "CTRL_F9"
	dic.Add 34, "CTRL_F10"
	dic.Add 35, "CTRL_F11"
	dic.Add 36, "CTRL_F12"
	dic.Add 37, "CTRL_SHIFT_F1"
	dic.Add 38, "CTRL_SHIFT_F2"
	dic.Add 39, "CTRL_SHIFT_F3"
	dic.Add 40, "CTRL_SHIFT_F4"
	dic.Add 41, "CTRL_SHIFT_F5"
	dic.Add 42, "CTRL_SHIFT_F6"
	dic.Add 43, "CTRL_SHIFT_F7"
	dic.Add 44, "CTRL_SHIFT_F8"
	dic.Add 45, "CTRL_SHIFT_F9"
	dic.Add 46, "CTRL_SHIFT_F10"
	dic.Add 47, "CTRL_SHIFT_F11"
	dic.Add 48, "CTRL_SHIFT_F12"
	dic.Add 71, "CTRL_F"
	dic.Add 80, "CTRL_PAGEUP"
	dic.Add 81, "PAGEUP"
	dic.Add 82, "PAGEDOWN"
	dic.Add 83, "CTRL_PAGEDOWN"
	dic.Add 84, "CTRL_G"
	dic.Add 86, "CTRL_P"
	if dic.Exists(lngKey) then
		SapTranslateKeyCode = dic.Item(lngKey)
	else
		SapTranslateKeyCode = null
	end if
end function

function SapTranslateButtonName(strObjName)
	dim dic : set dic = NewVbsDictionary
	dic.Add "btn\[0\]", "Enter"
	dic.Add "btn\[1\]", "Help"
	dic.Add "btn\[3\]", "Back"
	dic.Add "btn\[11\]", "Save"
	dic.Add "btn\[12\]", "Cancel"
	dic.Add "btn\[15\]", "Exit"
	dic.Add "btn\[71\]", "Find"
	dic.Add "btn\[80\]", "First_Page"
	dic.Add "btn\[81\]", "Previous_Page"
	dic.Add "btn\[82\]", "Next_Page"
	dic.Add "btn\[83\]", "Last_Page"
	dic.Add "btn\[84\]", "Find_Next"
	dic.Add "btn\[86\]", "Print "
	dic.Add "btn\[418\]", "Generates_Shortcut"
	if dic.Exists(strObjName) then
		SapTranslateButtonName = dic.Item(strObjName)
	else
		SapTranslateButtonName = null
	end if
end function

'======================================
'= Override QTP core object functions =
'======================================

function OrCore_AssertExists(objSender, blnExpectedResult, blnQuitOnFail)
	OrCore_AssertExists = OrCore_AssertExistsEx(objSender, blnExpectedResult, blnQuitOnFail, true, false)
end function
RegisterUserFunc "Browser", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "Dialog", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "Frame", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "Image", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "Link", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "Page", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "Static", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebArea", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebButton", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebCheckBox", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebEdit", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebElement", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebFile", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebList", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebNumber", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebRadioGroup", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebTable", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WebXML", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WinButton", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "Window", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WinEdit", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "WinObject", "AssertExists", "OrCore_AssertExists"

function OrCore_AssertExistsEx(objSender, blnExpectedResult, blnQuitOnFail, blnReportOnPass, blnScreenshotOnPass)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	OrCore_GlobalSync objSender

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		dim objectExists : objectExists = objSender.Exist(1)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if success then
		dim arrResult(1)
		arrResult(0) = Array("Expected", "Actual")
		arrResult(1) = Array(blnExpectedResult, objectExists)
		dim resultHtml : resultHtml = GetHtmlTable(arrResult, null, "base", null, true, false)

		if not (objectExists xor blnExpectedResult) then
			if blnReportOnPass then
				dim reportCode : reportCode = IIF(blnScreenshotOnPass, micPassWithScreen, micPassWithoutScreen)
				Logger.FrameworkReportEx reportCode, _
					CsString.Format("Assert '{0}' exists", Array(childRepoName)), _
					CsString.Format("Assert '{0}' exists.{1}{2}", Array(fullQtpName, resultHtml, GetReportBody(objSender, null, null))), _
					objSender, null, null
			end if
			OrCore_AssertExistsEx = true
		else
			'Empty string for errorMsg in call to GetReportBody forces object existence HTML to be generated.
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Assert '{0}' exists", Array(childRepoName)), _
				CsString.Format("Assert '{0}' exists.{1}{2}", Array(fullQtpName, resultHtml, GetReportBody(objSender, null, ""))), _
				objSender, null, null
			OrCore_AssertExistsEx = false
			if blnQuitOnFail then
				OrCore.OnError
			end if
		end if
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Assert '{0}' exists", Array(childRepoName)), _
			CsString.Format("Failed to assert whether '{0}' exists.{1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "Browser", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "Dialog", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "Frame", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "Image", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "Link", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "Page", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "Static", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebArea", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebButton", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebCheckBox", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebEdit", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebElement", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebFile", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebList", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebNumber", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebRadioGroup", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebTable", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WebXML", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WinButton", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "Window", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WinEdit", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "WinObject", "AssertExistsEx", "OrCore_AssertExistsEx"
RegisterUserFunc "SAPGuiWindow", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiButton", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiEdit", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiMenuBar", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiStatusBar", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiTable", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiTabStrip", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiLabel", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiCheckBox", "AssertExists", "OrCore_AssertExists"
RegisterUserFunc "SAPGuiTree", "AssertExists", "OrCore_AssertExists"

function OrCore_Check(objSender, objCheckPoint)'Wrapping QTP checkpoint
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		dim checkPointName : checkPointName = objCheckPoint.GetProperty("TestObjName")
		Logger.SetReporterFilter oldFilter
		OrCore_Check = objSender.Check(objCheckPoint)
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	'NOTE: at the moment both QTP and custom reporting are performed for checkpoints. QTP has more details.
	if success then
		if OrCore_Check then
			Logger.FrameworkReportEx micPass, _
				CsString.Format("CheckPoint '{0}' for '{1}'", Array(checkPointName, childRepoName)), _
				CsString.Format("CheckPoint '{0}' for '{1}' passed.{2}", Array(checkPointName, fullQtpName, GetReportBody(objSender, null, null))), _
				objSender, null, null
		else
			Logger.FrameworkReportEx micFail, _
				CsString.Format("CheckPoint '{0}' for '{1}'", Array(checkPointName, childRepoName)), _
				CsString.Format("CheckPoint '{0}' for '{1}' failed.{2}", Array(checkPointName, fullQtpName, GetReportBody(objSender, null, null))), _
				objSender, null, null
		end if
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("CheckPoint '{0}' for '{1}'", Array(checkPointName, childRepoName)), _
			CsString.Format("Failed to perform CheckPoint '{0}' for '{1}'.{2}", Array(checkPointName, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "Browser", "Check", "OrCore_Check"
RegisterUserFunc "Dialog", "Check", "OrCore_Check"
RegisterUserFunc "Frame", "Check", "OrCore_Check"
RegisterUserFunc "Image", "Check", "OrCore_Check"
RegisterUserFunc "Link", "Check", "OrCore_Check"
RegisterUserFunc "Page", "Check", "OrCore_Check"
RegisterUserFunc "Static", "Check", "OrCore_Check"
RegisterUserFunc "WebArea", "Check", "OrCore_Check"
RegisterUserFunc "WebButton", "Check", "OrCore_Check"
RegisterUserFunc "WebCheckBox", "Check", "OrCore_Check"
RegisterUserFunc "WebEdit", "Check", "OrCore_Check"
RegisterUserFunc "WebElement", "Check", "OrCore_Check"
RegisterUserFunc "WebFile", "Check", "OrCore_Check"
RegisterUserFunc "WebList", "Check", "OrCore_Check"
RegisterUserFunc "WebNumber", "Check", "OrCore_Check"
RegisterUserFunc "WebRadioGroup", "Check", "OrCore_Check"
RegisterUserFunc "WebTable", "Check", "OrCore_Check"
RegisterUserFunc "WebXML", "Check", "OrCore_Check"
RegisterUserFunc "WinButton", "Check", "OrCore_Check"
RegisterUserFunc "Window", "Check", "OrCore_Check"
RegisterUserFunc "WinEdit", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiButton", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiCheckBox", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiComboBox", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiEdit", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiLabel", "Check", "OrCore_Check"
RegisterUserFunc "WebEdit", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiMenubar", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiRadioButton", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiStatusBar", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiTable", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiToolbar", "Check", "OrCore_Check"
RegisterUserFunc "SAPGuiTree", "Check", "OrCore_Check"

sub OrCore_CheckBox(objSender)
	OrCore_Set objSender, "On"
end sub
RegisterUserFunc "WebCheckBox", "CheckBox", "OrCore_CheckBox"
RegisterUserFunc "SAPGuiCheckBox", "CheckBox", "OrCore_CheckBox"

sub OrCore_UncheckBox(objSender)
	OrCore_Set objSender, "Off"
end sub
RegisterUserFunc "WebCheckBox", "UncheckBox", "OrCore_UncheckBox"
RegisterUserFunc "SAPGuiCheckBox", "UncheckBox", "OrCore_UncheckBox"

function OrCore_Toggle(objSender)
	dim checked : checked = OrCore_GetChecked(objSender)
	if checked then
		OrCore_UncheckBox objSender
		OrCore_Toggle = false
	else
		OrCore_CheckBox objSender
		OrCore_Toggle = true
	end if
end function
RegisterUserFunc "WebCheckBox", "Toggle", "OrCore_Toggle"
RegisterUserFunc "SAPGuiCheckBox", "Toggle", "OrCore_Toggle"

function OrCore_CheckProperty(objSender, strPropertyName, strPropertyValue)
	OrCore_CheckProperty = OrCore_CheckPropertyEx(objSender, strPropertyName, strPropertyValue, null)
end function
RegisterUserFunc "Browser", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "Dialog", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "Frame", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "Image", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "Link", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "Page", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "Static", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebArea", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebButton", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebCheckBox", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebEdit", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebElement", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebFile", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebList", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebNumber", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebRadioGroup", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebTable", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WebXML", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WinButton", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "Window", "CheckProperty", "OrCore_CheckProperty"
RegisterUserFunc "WinEdit", "CheckProperty", "OrCore_CheckProperty"

function OrCore_CheckPropertyEx(objSender, strPropertyName, strPropertyValue, lngTimeoutMilliseconds)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		if IsNull(lngTimeoutMilliseconds) then
			lngTimeoutMilliseconds = UFT.ObjectSyncTimeout
		end if
		OrCore_CheckPropertyEx = objSender.CheckProperty(strPropertyName, strPropertyValue, lngTimeoutMilliseconds)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim valueString
	if TypeName(strPropertyValue) = "ICompare" then
		valueString = strPropertyValue.ToString
	else
		valueString = CStr(strPropertyValue)
	end if
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Property Name", strPropertyName
	dictParams.Add "Expected Value", valueString
	dictParams.Add "Timeout (ms)", lngTimeoutMilliseconds

	if success then
		if OrCore_CheckPropertyEx then
			Logger.FrameworkReportEx micPass, _
				CsString.Format("Check property '{0}' for '{1}'", Array(strPropertyName, childRepoName)), _
				CsString.Format("Check property '{0}' for '{1}'.{2}", Array(strPropertyName, fullQtpName, GetReportBody(objSender, dictParams, null))), _
				objSender, null, null
		else
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Check property '{0}' for '{1}'", Array(strPropertyName, childRepoName)), _
				CsString.Format("Check property '{0}' for '{1}'.{2}", Array(strPropertyName, fullQtpName, GetReportBody(objSender, dictParams, null))), _
				objSender, null, null
		end if
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Check property '{0}' for '{1}'", Array(strPropertyName, childRepoName)), _
			CsString.Format("Failed: Check property '{0}' for '{1}'.{2}", Array(strPropertyName, fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "Browser", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "Dialog", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "Frame", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "Image", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "Link", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "Page", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "Static", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebArea", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebButton", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebCheckBox", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebEdit", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebElement", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebFile", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebList", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebNumber", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebRadioGroup", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebTable", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WebXML", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WinButton", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "Window", "CheckPropertyEx", "OrCore_CheckPropertyEx"
RegisterUserFunc "WinEdit", "CheckPropertyEx", "OrCore_CheckPropertyEx"

function OrCore_ChildItemCount(objSender, lngRow, lngColumn, strMicClass)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_ChildItemCount = objSender.ChildItemCount(lngRow, lngColumn, strMicClass)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		dim dictParams : set dictParams = NewVbsDictionary
		dictParams.Add "Row", lngRow
		dictParams.Add "Col", lngColumn
		dictParams.Add "MicClass", strMicClass
	
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get child item count from '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to get child item count from '{0}'. {2}", Array(fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end Function 
RegisterUserFunc "WebTable", "ChildItemCount", "OrCore_ChildItemCount"

function OrCore_ChildObjects(objSender, objChildDesc)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		set OrCore_ChildObjects = objSender.ChildObjects(objChildDesc)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	'NOTE: we don't report anything if it works.
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get child objects from '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to get child objects from '{0}. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "Browser", "ChildObjects", "OrCore_ChildObjects"
RegisterUserFunc "Frame", "ChildObjects", "OrCore_ChildObjects"
RegisterUserFunc "Page", "ChildObjects", "OrCore_ChildObjects"

sub OrCore_Clear(objSender)
	OrCore_Set objSender, ""
end sub
RegisterUserFunc "WebEdit", "Clear", "OrCore_Clear"
RegisterUserFunc "SAPGuiEdit", "Clear", "OrCore_Clear"

function MicMouseButtonToString(lngButton)
	select case lngButton
	case micLeftBtn
		MicMouseButtonToString = "Left Mouse Button"
	case micRightBtn
		MicMouseButtonToString = "Right Mouse Button"
	case micMiddleBtn
		MicMouseButtonToString = "Middle Mouse Button"
	case else
		MicMouseButtonToString = "Unknown Value"
	end select
end function

sub OrCore_Click(objSender)
	OrCore_ClickEx objSender, null, null, null
end sub
RegisterUserFunc "Dialog", "Click", "OrCore_Click"
RegisterUserFunc "Image", "Click", "OrCore_Click"
RegisterUserFunc "Link", "Click", "OrCore_Click"
RegisterUserFunc "Static", "Click", "OrCore_Click"
RegisterUserFunc "WebArea", "Click", "OrCore_Click"
RegisterUserFunc "WebButton", "Click", "OrCore_Click"
RegisterUserFunc "WebCheckBox", "Click", "OrCore_Click"
RegisterUserFunc "WebEdit", "Click", "OrCore_Click"
RegisterUserFunc "WebElement", "Click", "OrCore_Click"
RegisterUserFunc "WebFile", "Click", "OrCore_Click"
RegisterUserFunc "WebList", "Click", "OrCore_Click"
RegisterUserFunc "WebNumber", "Click", "OrCore_Click"
RegisterUserFunc "WebRadioGroup", "Click", "OrCore_Click"
RegisterUserFunc "WebTable", "Click", "OrCore_Click"
RegisterUserFunc "WinButton", "Click", "OrCore_Click"
RegisterUserFunc "Window", "Click", "OrCore_Click"
RegisterUserFunc "WinEdit", "Click", "OrCore_Click"

sub OrCore_ClickEx(objSender, intX, intY, lngButton)
	Logger.Debug "(OrCore_ClickEx) enter"
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	'Set parameter defaults.
	if IsNull(intX) then
		intX = micNoCoordinate
	end if
	if IsNull(intY) then
		intY = micNoCoordinate
	end if
	if IsNull(lngButton) then
		lngButton = micLeftBtn
	end if

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		Logger.Debug "(OrCore_ClickEx) begin click"
		objSender.Click intX, intY, lngButton
		Logger.Debug "(OrCore_ClickEx) end click"
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Coords", IIF(intX = micNoCoordinate, "[center]", intX) & "," & IIF(intY = micNoCoordinate, "[center]", intY)
	dictParams.Add "Button", MicMouseButtonToString(lngButton)
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Click on '{0}'", Array(childRepoName)), _
			CsString.Format("Clicked on '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.Debug "(OrCore_ClickEx) begin writing fail"
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Click on '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to click on '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		Logger.Debug "(OrCore_ClickEx) end writing fail"
		OrCore.OnError
	end if

	OrCore_GlobalSync objSender
	Logger.Debug "(OrCore_ClickEx) exit"
end sub
RegisterUserFunc "Dialog", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "Image", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "Link", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "Static", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebArea", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebButton", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebCheckBox", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebEdit", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebElement", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebFile", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebList", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebNumber", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebRadioGroup", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WebTable", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WinButton", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "Window", "ClickEx", "OrCore_ClickEx"
RegisterUserFunc "WinEdit", "ClickEx", "OrCore_ClickEx"

sub OrCore_ClickOnText(objSender, strText)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ClickOnText strText
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Click on text '{0}' in '{1}'", Array(childRepoName, strText)), _
			CsString.Format("Clicked on text '{0}' in '{1}'. {2}", Array(strText, fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Click on text '{0}' in '{1}'", Array(childRepoName, strText)), _
			CsString.Format("Failed to click on text '{0}' at '{1}'. {2}", Array(strText, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "Window", "ClickOnText", "OrCore_ClickOnText"

sub OrCore_SapClick(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim objectName : objectName = GetTONameProperty(objSender)
	objectName = SapTranslateButtonName(objectName)
	
	if IsNull(objectName) then
		objectName = childRepoName
	end if 
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Click
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Click on '{0}'", Array(objectName)), _
			CsString.Format("Clicked on '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Click on '{0}'", Array(objectName)), _
			CsString.Format("Failed to click on '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiButton", "Click", "OrCore_SapClick"

function OrCore_ColumnCount(objSender, lngRow)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_ColumnCount = objSender.ColumnCount(lngRow)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get column count from row '{0}' in '{1}'", Array(lngRow, childRepoName)), _
			CsString.Format("Failed to get column count from row '{0}' in '{1}'. {2}", Array(lngRow, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end Function 
RegisterUserFunc "WebTable", "ColumnCount", "OrCore_ColumnCount"

sub OrCore_DeleteCookies(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.DeleteCookies
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Delete cookies for '{0}'", Array(childRepoName)), _
			CsString.Format("Deleted cookies for '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Delete cookies for '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to delete cookies for '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "Browser", "DeleteCookies", "OrCore_DeleteCookies"

function OrCore_Exist(objSender, lngTimeoutSeconds)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_Exist = objSender.Exist(lngTimeoutSeconds)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get exist status from '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to get exist status from '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "Browser", "Exist", "OrCore_Exist"
RegisterUserFunc "Dialog", "Exist", "OrCore_Exist"
RegisterUserFunc "Frame", "Exist", "OrCore_Exist"
RegisterUserFunc "Image", "Exist", "OrCore_Exist"
RegisterUserFunc "Link", "Exist", "OrCore_Exist"
RegisterUserFunc "Page", "Exist", "OrCore_Exist"
RegisterUserFunc "Static", "Exist", "OrCore_Exist"
RegisterUserFunc "WebArea", "Exist", "OrCore_Exist"
RegisterUserFunc "WebButton", "Exist", "OrCore_Exist"
RegisterUserFunc "WebCheckBox", "Exist", "OrCore_Exist"
RegisterUserFunc "WebEdit", "Exist", "OrCore_Exist"
RegisterUserFunc "WebElement", "Exist", "OrCore_Exist"
RegisterUserFunc "WebFile", "Exist", "OrCore_Exist"
RegisterUserFunc "WebList", "Exist", "OrCore_Exist"
RegisterUserFunc "WebNumber", "Exist", "OrCore_Exist"
RegisterUserFunc "WebRadioGroup", "Exist", "OrCore_Exist"
RegisterUserFunc "WebTable", "Exist", "OrCore_Exist"
RegisterUserFunc "WebXML", "Exist", "OrCore_Exist"
RegisterUserFunc "WinButton", "Exist", "OrCore_Exist"
RegisterUserFunc "Window", "Exist", "OrCore_Exist"
RegisterUserFunc "WinEdit", "Exist", "OrCore_Exist"
RegisterUserFunc "WinObject", "Exist", "OrCore_Exist"
RegisterUserFunc "WinToolbar", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiButton", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiEdit", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiMenuBar", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiStatusBar", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiTable", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiCalendar", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiCheckBox", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiComboBox", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiElement", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiLabel", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiOKCode", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiRadioButton", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiSession", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiTabStrip", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiTextArea", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiToolbar", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiTree", "Exist", "OrCore_Exist"
RegisterUserFunc "SAPGuiWindow", "Exist", "OrCore_Exist"

function OrCore_OpenLinkInNewWindow(objSender) 'Returns the new window BrowserStore name.
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)

		dim url : url = OrCore_GetRoProperty(objSender, "href")
		dim newBrowserName : newBrowserName = GetTimestamp
		BrowserStore.AddNewBrowser newBrowserName
		dim originalBrowserName : originalBrowserName = BrowserStore.CurrentBrowserName
		BrowserStore.SetCurrentBrowser newBrowserName
		OrCore_Navigate BrowserStore.OrBrowser, url
		BrowserStore.SetCurrentBrowser originalBrowserName

		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Open '{0}' in new window", Array(childRepoName)), _
			CsString.Format("Opened '{0}' in new window (Hold left-shift key and click the link). {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Open '{0}' in new window", Array(childRepoName)), _
			CsString.Format("Failed to open '{0}' in new window (Hold left-shift key and click the link). {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	'OrCore_GlobalSync objSender
	OrCore_OpenLinkInNewWindow = newBrowserName
end function
RegisterUserFunc "Link", "OpenInNewWindow", "OrCore_OpenLinkInNewWindow"

function OrCore_GetCellData(objSender, row, column)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_GetCellData = objSender.GetCellData(row, column)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if not success then
		dim dictParams : set dictParams = NewVbsDictionary
		dictParams.Add "Row", row
		dictParams.Add "Col", column

		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get cell data from '{0}' at row '{1}' column '{2}'", Array(childRepoName, row, column)), _
			CsString.Format("Failed to get cell data from '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "WebTable", "GetCellData", "OrCore_GetCellData"

function OrCore_UpdateObject(objSender, arrParams)
	dim qtpName : qtpName = GetFullQtpName(objSender)
	on error resume next : Err.Clear
	dim func : set func = GetRef(qtpName & ".UpdateObject")
	if IsEmpty(func) then
		Logger.ReportScriptError "No UpdateObject override defined for '" & qtpName & "'."
	end if
	
	set OrCore_UpdateObject = func(objSender, arrParams)
	on error goto 0
end function
RegisterUserFunc "Browser", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "Dialog", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "Frame", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "Image", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "Link", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "Page", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "Static", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebArea", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebButton", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebCheckBox", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebEdit", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebElement", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebFile", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebList", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebNumber", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebRadioGroup", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebTable", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WebXML", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WinButton", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "Window", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "WinEdit", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiButton", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiEdit", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiMenuBar", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiStatusBar", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiTable", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiCalendar", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiCheckBox", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiComboBox", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiElement", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiLabel", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiOKCode", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiRadioButton", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiSession", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiTabStrip", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiTextArea", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiToolbar", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiTree", "UpdateObject", "OrCore_UpdateObject"
RegisterUserFunc "SAPGuiWindow", "UpdateObject", "OrCore_UpdateObject"

function OrCore_GetROProperty(objSender, strPropertyName)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_GetROProperty = objSender.GetROProperty(strPropertyName)
		
		'Empty WebEdits return 'Empty' instead of "".
		if IsEmpty(OrCore_GetROProperty) then
			if (GetClassName(objSender) = "WebEdit") and (strPropertyName = "value") then
				OrCore_GetROProperty = ""
			end if
		end if
		Logger.SetReporterFilter oldFilter
		
		success = (Err.Number = 0) and (not IsEmpty(OrCore_GetROProperty))
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	'NOTE: we don't report anything if it works.
	if not success then
		oldFilter = Logger.SetReporterFilter(rfDisableAll)
		dim objectExists : objectExists = objSender.Exist(1)
		Logger.SetReporterFilter oldFilter
		
		if (not objectExists) then
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Get runtime property '{0}' from '{1}'", Array(strPropertyName, childRepoName)), _
				CsString.Format("Failed to get runtime property '{0}' from '{1}'. '{2}' does not exist. {3}", Array(strPropertyName, fullQtpName, childRepoName, GetReportBody(objSender, null, errorMsg))), _
				objSender, null, null
		elseif (IsEmpty(OrCore_GetROProperty)) then
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Get runtime property '{0}' from '{1}'", Array(strPropertyName, childRepoName)), _
				CsString.Format("Get runtime property '{0}' from '{1}'. '{2}' exists, but property '{3}' either does not exist or is 'Empty'. {4}", Array(strPropertyName, fullQtpName, childRepoName, strPropertyName, GetReportBody(objSender, null, errorMsg))), _
				objSender, null, null
		else
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Get runtime property '{0}' from '{1}'", Array(strPropertyName, childRepoName)), _
				CsString.Format("Get runtime property '{0}' from '{1}'. '{2}' exists, but UFT is unable to retrieve property '{3}'. {4}", Array(strPropertyName, fullQtpName, childRepoName, strPropertyName, GetReportBody(objSender, null, errorMsg))), _
				objSender, null, null
		end if
		OrCore.OnError
	end if
end function
RegisterUserFunc "Browser", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "Dialog", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "Frame", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "Image", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "Link", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "Page", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "Static", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebArea", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebButton", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebCheckBox", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebEdit", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebElement", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebFile", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebList", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebNumber", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebRadioGroup", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebTable", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WebXML", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WinButton", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "WinEdit", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiButton", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiEdit", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiMenuBar", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiStatusBar", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiTable", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiCalendar", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiCheckBox", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiComboBox", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiElement", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiLabel", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiOKCode", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiRadioButton", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiSession", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiTabStrip", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiTextArea", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiToolbar", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiTree", "GetRuntimeProperty", "OrCore_GetROProperty"
RegisterUserFunc "SAPGuiWindow", "GetRuntimeProperty", "OrCore_GetROProperty"

'Used in the API property extension methods. E.g. OrCore_GetInnerText
function OrCore_GetRuntimePropertyOrOverride(objSender, strProperty, strApiPropertyName)
	dim qtpName : qtpName = GetFullQtpName(objSender)
	on error resume next : Err.Clear
		dim func : set func = GetRef(qtpName & "." & strApiPropertyName)
		if Err.Number = 0 then
			'Valid override present.
			OrCore_GetRuntimePropertyOrOverride = func(objSender)
			exit function
		end if
	on error goto 0 : Err.Clear
	OrCore_GetRuntimePropertyOrOverride = OrCore_GetRoProperty(objSender, strProperty)
end function

sub OrCore_MouseOver(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim absX : absX = OrCore_GetROProperty(objSender, "abs_x")
	dim absY : absY = OrCore_GetROProperty(objSender, "abs_y")
	dim width : width = OrCore_GetROProperty(objSender, "width")
	dim height : height = OrCore_GetROProperty(objSender, "height")
	dim x : x = (absX + (width / 2))
	dim y : y = (absY + (height / 2))
	dim deviceReplay : set deviceReplay = CreateObject("Mercury.DeviceReplay")
	deviceReplay.MouseMove x, y
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "X (screen coords)", x
	dictParams.Add "Y (screen coords)", y
	
	Logger.FrameworkReportEx micDone, _
		CsString.Format("Mouse over '{0}'", Array(childRepoName)), _
		CsString.Format("Mouse over '{0}'.{1}", Array(fullQtpName, GetReportBody(objSender, dictParams, null))), _
		objSender, null, null
end sub
RegisterUserFunc "Link", "MouseOver", "OrCore_MouseOver"
RegisterUserFunc "WebButton", "MouseOver", "OrCore_MouseOver"
RegisterUserFunc "WebElement", "MouseOver", "OrCore_MouseOver"

sub OrCore_Navigate(objSender, strUrl)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Navigate strUrl
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
	on error goto 0 : Err.Clear
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Navigate to {0}", Array(strUrl)), _
			CsString.Format("Navigate '{0}' to URL '{1}'. {2}", Array(fullQtpName, strUrl, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Navigate to {0}", Array(strUrl)), _
			CsString.Format("Failed to navigate '{0}' to URL '{1}'. {2}", Array(fullQtpName, strUrl, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "Browser", "Navigate", "OrCore_Navigate"

sub Browser_ExecuteJS(objSender, strJS)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Page("micclass:=Page").RunScript strJS
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
	on error goto 0 : Err.Clear
	
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Execute JS {0}", Array(strJS)), _
			CsString.Format("Failed to execute JS '{0}' in '{1}'. {2}", Array(strJS, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	'No sync here since page is not expected to reload.
end sub
RegisterUserFunc "Browser", "ExecuteJS", "Browser_ExecuteJS"

function OrCore_RowCount(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_RowCount = objSender.RowCount 
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get row count from '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to get row count from '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end Function 
RegisterUserFunc "SAPGuiGrid", "RowCount", "OrCore_RowCount"
RegisterUserFunc "SAPGuiTable", "RowCount", "OrCore_RowCount"
RegisterUserFunc "WebTable", "RowCount", "OrCore_RowCount"

sub OrCore_Select(objSender, strValue)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Select strValue
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select '{0}' in '{1}'", Array(strValue, childRepoName)), _
			CsString.Format("Select '{0}' in '{1}'. {2}", Array(strValue, fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select '{0}' in '{1}'", Array(strValue, childRepoName)), _
			CsString.Format("Failed to select '{0}' in '{1}'. {2}", Array(strValue, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "WebList", "Select", "OrCore_Select"
RegisterUserFunc "WebRadioGroup", "Select", "OrCore_Select"
RegisterUserFunc "WinMenu", "Select", "OrCore_Select"

sub OrCore_SelectByIndex(objSender, lngZeroBasedIndex)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	'Check input type + bound.
	if not IsInt16Or32(lngZeroBasedIndex) then
		Logger.ReportScriptError CsString("(OrCore_SelectByIndex) lngZeroBasedIndex has invalid type '{0}'. Expected: Integer or Long values >= 0.", Array(TypeName(lngZeroBasedIndex)))
	elseif lngZeroBasedIndex < 0 then
		Logger.ReportScriptError "(OrCore_SelectByIndex) Index out of bounds: lngZeroBasedIndex must be >= 0."
	end if

	dim success, errorMsg, selectedText
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Select "#" & CStr(lngZeroBasedIndex)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		else
			selectedText = OrCore_GetValue(objSender)
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select index '{0}' in '{1}'", Array(lngZeroBasedIndex, childRepoName)), _
			CsString.Format("Select index '{0}' ('{1}') in '{2}'. {3}", Array(lngZeroBasedIndex, selectedText, fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select index '{0}' in '{1}'", Array(lngZeroBasedIndex, childRepoName)), _
			CsString.Format("Failed: Tried to select index '{0}' in '{1}'. {2}", Array(lngZeroBasedIndex, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "WebList", "SelectByIndex", "OrCore_SelectByIndex"

sub OrCore_SelectByText(objSender, strText)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	'Check input type + bound.
	if not IsString(strText) then
		Logger.ReportScriptError CsString("(OrCore_SelectByText) strText has invalid type '{0}'. Expected: String.", Array(TypeName(strText)))
	end if

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Select strText
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select text '{0}' in '{1}'", Array(strText, childRepoName)), _
			CsString.Format("Select text '{0}' in '{1}'. {2}", Array(strText, fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select text '{0}' in '{1}'", Array(strText, childRepoName)), _
			CsString.Format("Failed: Tried to select text '{0}' in '{1}'. {2}", Array(strText, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "WebList", "SelectByText", "OrCore_SelectByText"

sub OrCore_SelectByValue(objSender, byval strValue)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	'Check input type + bound.
	if not IsString(strValue) then
		Logger.ReportScriptError CsString("(OrCore_SelectByValue) strValue has invalid type '{0}'. Expected: String.", Array(TypeName(strValue)))
	end if
	
	dim success : success = true
	dim errorMsg, selectedText
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		dim i, matchIndex, optVal
		matchIndex = -1
		for i = 0 to objSender.object.length - 1
			execute "optVal = objSender.object.item(" & i & ").value" 'This causes a "obj[FuncName] undefined" exception in code, but not when executed in the command window or with 'execute'. Still not sure why.
			if optVal =  strValue then
				matchIndex = i
				exit for
			end if
		next

		if matchIndex = -1 then
			success = false
			errorMsg = "The specified value was not found"
		else
			objSender.Select "#" & CStr(matchIndex)
			if Err.Number <> 0 then
				success = false
				errorMsg = Err.Description
			else
				selectedText = OrCore_GetValue(objSender)
			end if
		end if
		Logger.SetReporterFilter oldFilter
	Err.Clear : on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select value '{0}' in '{1}'", Array(strValue, childRepoName)), _
			CsString.Format("Select value '{0}' ('{1}') in '{2}'. {3}", Array(strValue, selectedText, fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select value '{0}' in '{1}'", Array(strValue, childRepoName)), _
			CsString.Format("Failed to select item with value '{0}' in '{1}'. {2}", Array(strValue, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
		
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "WebList", "SelectByValue", "OrCore_SelectByValue"

sub OrCore_Set(objSender, strValue)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Set strValue
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set '{0}' to '{1}'", Array(childRepoName, strValue)), _
			CsString.Format("Set '{0}' to '{1}'. {2}", Array(fullQtpName, strValue, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set '{0}' to '{1}'", Array(childRepoName, strValue)), _
			CsString.Format("Failed to set '{0}' to '{1}'. {2}", Array(fullQtpName, strValue, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "WebCheckBox", "Set", "OrCore_Set"
RegisterUserFunc "WebEdit", "Set", "OrCore_Set"
RegisterUserFunc "WebFile", "Set", "OrCore_Set"
RegisterUserFunc "WebNumber", "Set", "OrCore_Set"
RegisterUserFunc "WinEdit", "Set", "OrCore_Set"

sub OrCore_SetSecure(objSender, strValue)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SetSecure strValue
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	'Hide password in report.
	if not(OrCore.ShowSetSecureValueInReport) then
		strValue = "[password-not-shown]"
	end if

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set (secure) '{0}' to '{1}'", Array(childRepoName, strValue)), _
			CsString.Format("Set (secure) '{0}' to '{1}'. {2}", Array(fullQtpName, strValue, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set (secure) '{0}' to '{1}'", Array(childRepoName, strValue)), _
			CsString.Format("Failed to set (secure) '{0}' to '{1}'. {2}", Array(fullQtpName, strValue, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "WebCheckBox", "SetSecure", "OrCore_SetSecure"
RegisterUserFunc "WebEdit", "SetSecure", "OrCore_SetSecure"
RegisterUserFunc "WebFile", "SetSecure", "OrCore_SetSecure"
RegisterUserFunc "WinEdit", "SetSecure", "OrCore_SetSecure"

sub OrCore_Submit(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Submit
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Submit '{0}'", Array(childRepoName)), _
			CsString.Format("Submit '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Submit '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to submit '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "Image", "Submit", "OrCore_Submit"
RegisterUserFunc "Link", "Submit", "OrCore_Submit"
RegisterUserFunc "WebArea", "Submit", "OrCore_Submit"
RegisterUserFunc "WebButton", "Submit", "OrCore_Submit"
RegisterUserFunc "WebCheckBox", "Submit", "OrCore_Submit"
RegisterUserFunc "WebEdit", "Submit", "OrCore_Submit"
RegisterUserFunc "WebElement", "Submit", "OrCore_Submit"
RegisterUserFunc "WebFile", "Submit", "OrCore_Submit"
RegisterUserFunc "WebList", "Submit", "OrCore_Submit"
RegisterUserFunc "WebNumber", "Submit", "OrCore_Submit"
RegisterUserFunc "WebRadioGroup", "Submit", "OrCore_Submit"
RegisterUserFunc "WebTable", "Submit", "OrCore_Submit"

function OrCore_WaitProperty(objSender, strPropertyName, strPropertyValue)
	OrCore_WaitProperty = OrCore_WaitPropertyEx(objSender, strPropertyName, strPropertyValue, null)
end function
RegisterUserFunc "Browser", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "Dialog", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "Frame", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "Image", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "Link", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "Page", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "Static", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebArea", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebButton", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebCheckBox", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebEdit", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebElement", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebFile", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebList", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebNumber", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebRadioGroup", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebTable", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WebXML", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WinButton", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "WinEdit", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiButton", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiCheckBox", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiComboBox", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiEdit","WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiLabel", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiMenubar", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiRadioButton", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiStatusBar", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiTable", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiToolbar", "WaitProperty", "OrCore_WaitProperty"
RegisterUserFunc "SAPGuiTree", "WaitProperty", "OrCore_WaitProperty"

function OrCore_WaitPropertyEx(objSender, strPropertyName, strPropertyValue, lngTimeOutMilliseconds)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		if IsNull(lngTimeoutMilliseconds) then
			lngTimeoutMilliseconds = UFT.ObjectSyncTimeout
		end if
		OrCore_WaitPropertyEx = objSender.WaitProperty(strPropertyName, strPropertyValue, lngTimeOutMilliseconds)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		dim valueString
		if TypeName(strPropertyValue) = "ICompare" then
			valueString = strPropertyValue.ToString
		else
			valueString = CStr(strPropertyValue)
		end if
	
		dim dictParams : set dictParams = NewVbsDictionary
		dictParams.Add "Property Name", strPropertyName
		dictParams.Add "Expected Value", valueString
		dictParams.Add "Timeout (ms)", lngTimeoutMilliseconds
	
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Wait for property '{0}' from '{1}'", Array(strPropertyName, childRepoName)), _
			CsString.Format("Failed to wait for property '{0}' from '{1}'. {2}", Array(strPropertyName, fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function 
RegisterUserFunc "Browser", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "Dialog", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "Frame", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "Image", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "Link", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "Page", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "Static", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebArea", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebButton", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebCheckBox", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebEdit", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebElement", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebFile", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebList", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebNumber", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebRadioGroup", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebTable", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WebXML", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WinButton", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "WinEdit", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiButton", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiCheckBox", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiComboBox", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiEdit","WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiLabel", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiMenubar", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiRadioButton", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiStatusBar", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiTable", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiToolbar", "WaitPropertyEx", "OrCore_WaitPropertyEx"
RegisterUserFunc "SAPGuiTree", "WaitPropertyEx", "OrCore_WaitPropertyEx"

'==========================================================================
'SAP functions 
'===========================================================================

sub OrCore_SapActivate(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Activate
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("'{0}' : Activate", Array(childRepoName)),  _
			CsString.Format("Activated '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("'{0}' : Activate", Array(childRepoName)),  _
			CsString.Format("Failed to activate '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiWindow", "Activate", "OrCore_SapActivate"

sub OrCore_SapClose(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Close
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("'{0}' : Close", Array(childRepoName)), _
			CsString.Format("'{0}' closed. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("'{0}' : Close", Array(childRepoName)), _
			CsString.Format("Failed to close '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiSession", "Close", "OrCore_SapClose"
RegisterUserFunc "SAPGuiWindow", "Close", "OrCore_SapClose"

sub OrCore_SapSelect(objSender, strValue)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Select strValue
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select '{0}' : '{1}'", Array(childRepoName, strValue)), _
			CsString.Format("Select value '{0}' in '{1}'. {2}", Array(strValue, fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select '{0}' : '{1}'", Array(childRepoName, strValue)), _
			CsString.Format("Failed to select value '{0}' in '{1}'. {2}", Array(strValue, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTabStrip", "Select", "OrCore_SapSelect"
RegisterUserFunc "SAPGuiMenubar", "Select", "OrCore_SapSelect"
RegisterUserFunc "SAPGuiComboBox", "Select", "OrCore_SapSelect"

sub OrCore_SapSelectCell(objSender, lngRow, strCol)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectCell lngRow, strCol
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Row", lngRow
	dictParams.Add "Col", strCol

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select cell from '{0}' : Row '{1}' Column '{2}'", Array(childRepoName, lngRow, strCol)), _
			CsString.Format("Select cell at row '{0}' column '{1}' from object '{2}'. {3}", Array(lngRow, strCol, fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select cell from '{0}' : Row '{1}' Column '{2}'", Array(childRepoName, lngRow, strCol)), _
			CsString.Format("Failed to select cell at row '{0}' column '{1}' from object '{2}'. {3}", Array(lngRow, strCol, fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "SelectCell", "OrCore_SapSelectCell"

sub OrCore_SapSelectRow(objSender, lngRow)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectRow lngRow
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Row", lngRow
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select row from '{0}' : Row '{1}'", Array(childRepoName, lngRow)), _
			CsString.Format("Select row '{0}' from '{1}'. {2}", Array(lngRow, fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select row from '{0}' : Row '{1}'", Array(childRepoName, lngRow)), _
			CsString.Format("Failed select row '{0}' from '{1}'. {2}", Array(lngRow, fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "SelectRow", "OrCore_SapSelectRow"

sub OrCore_SapSendKey(objSender, lngKey)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	dim keyName : keyName = SapTranslateKeyCode(lngKey)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SendKey lngKey
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Key", keyName

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("SendKey to '{0}' : '{1}'", Array(childRepoName, keyName)), _
			CsString.Format("SendKey '{0}' to '{1}'. {2}", Array(keyName, fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("SendKey to '{0}' : '{1}'", Array(childRepoName, keyName)), _
			CsString.Format("Failed to send key '{0}' to '{1}'. {2}", Array(keyName, fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiWindow", "SendKey", "OrCore_SapSendKey"

sub OrCore_SapSet(objSender, strValue)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Set strValue
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set '{0}' : '{1}'", Array(childRepoName, strValue)), _
			CsString.Format("Set '{0}' to '{1}'. {2}", Array(fullQtpName, strValue, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set '{0}' : '{1}'", Array(childRepoName, strValue)), _
			CsString.Format("Failed to set '{0}' to '{1}'. {2}", Array(fullQtpName, strValue, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "SAPGuiOKCode", "Set", "OrCore_SapSet"
RegisterUserFunc "SAPGuiEdit", "Set", "OrCore_SapSet"
RegisterUserFunc "SAPGuiCheckBox", "Set", "OrCore_SapSet"
RegisterUserFunc "SAPGuiTextArea", "Set", "OrCore_SapSet"
RegisterUserFunc "SAPGuiTree", "Set", "OrCore_SapSet"

sub OrCore_SapSetRadioButton(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Set
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set '{0}'", Array(childRepoName)), _
			CsString.Format("Set '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to set '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_GlobalSync objSender
end sub
RegisterUserFunc "SAPGuiRadioButton", "Set", "OrCore_SapSetRadioButton"

sub OrCore_SapSetCaretPos(objSender, lngCaretPos)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SetCaretPos lngCaretPos
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Position", lngCaretPos

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set caret position in '{0}' : '{1}'", Array(childRepoName, lngCaretPos)), _
			CsString.Format("Set caret position to '{0}' in '{1}'. {2}", Array(lngCaretPos, fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set caret position in '{0}' : '{1}'", Array(childRepoName, lngCaretPos)), _
			CsString.Format("Failed to set caret position to '{0}' in '{1}'. {2}", Array(lngCaretPos, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiEdit", "SetCaretPos", "OrCore_SapSetCaretPos"
RegisterUserFunc "SAPGuiLabel", "SetCaretPos", "OrCore_SapSetCaretPos"

sub OrCore_SapSetCellData(objSender, lngRow, strcol, strData)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SetCellData lngRow, strCol, strData
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Row", lngRow
	dictParams.Add "Column", strCol
	dictParams.Add "Data", strData

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set cell data in '{0}' Row '{1}' Column '{2}' : Data '{3}'", Array(childRepoName, lngRow, strCol, strData)), _
			CsString.Format("Set cell data for '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set cell data in '{0}' Row '{1}' Column '{2}' : Data '{3}'", Array(childRepoName, lngRow, strCol, strData)), _
			CsString.Format("Failed to set cell data for '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	'OrCore_GlobalSync objSender
	'SAP sync?
end sub
RegisterUserFunc "SAPGuiTable", "SetCellData", "OrCore_SapSetCellData"
RegisterUserFunc "SAPGuiGrid", "SetCellData", "OrCore_SapSetCellData"

sub OrCore_SapSetFocus(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SetFocus
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set focus on '{0}'", Array(childRepoName)), _
			CsString.Format("Set focus on '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set focus on '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to set focus on '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	
	on error goto 0
end sub
RegisterUserFunc "SAPGuiButton", "SetFocus", "OrCore_SapSetFocus" 
RegisterUserFunc "SAPGuiCheckBox", "SetFocus", "OrCore_SapSetFocus" 
RegisterUserFunc "SAPGuiComboBox", "SetFocus", "OrCore_SapSetFocus" 
RegisterUserFunc "SAPGuiEdit", "SetFocus", "OrCore_SapSetFocus" 
RegisterUserFunc "SAPGuiLabel", "SetFocus", "OrCore_SapSetFocus" 
RegisterUserFunc "SAPGuiRadioButton", "SetFocus", "OrCore_SapSetFocus" 

sub OrCore_SapExpand(objSender, strPath)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Expand strPath
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Expand '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Expand '{0}' at path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Expand '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Failed to expand '{0}' at path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "Expand", "OrCore_SapExpand" 

function OrCore_SapToString(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_SapToString = objSender.ToString
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Call ToString on '{0}'", Array(childRepoName)), _
			CsString.Format("ToString failed for '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "SAPGuiButton", "ToString", "OrCore_SapToString" 
RegisterUserFunc "SAPGuiCheckBox", "ToString", "OrCore_SapToString" 
RegisterUserFunc "SAPGuiComboBox", "ToString", "OrCore_SapToString"
RegisterUserFunc "SAPGuiEdit", "ToString", "OrCore_SapToString"
RegisterUserFunc "SAPGuiLabel", "ToString", "OrCore_SapToString"
RegisterUserFunc "SAPGuiMenubar", "ToString", "OrCore_SapToString"
RegisterUserFunc "SAPGuiRadioButton", "ToString", "OrCore_SapToString"
RegisterUserFunc "SAPGuiStatusBar", "ToString", "OrCore_SapToString"
RegisterUserFunc "SAPGuiTable", "ToString", "OrCore_SapToString"
RegisterUserFunc "SAPGuiToolbar", "ToString", "OrCore_SapToString"
RegisterUserFunc "SAPGuiTree", "ToString", "OrCore_SapToString"

sub OrCore_SapInput(objSender, strDataSheet)
	'micPageDown is the default value.
	OrCore_SapInputEx objSender, strDataSheet, micPageDown 
end sub 
RegisterUserFunc "SAPGuiTable", "Input", "OrCore_SapInput"

sub OrCore_SapInputEx(objSender, strDataSheet, strScrollMethod)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.input strDataSheet, strScrollMethod
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Data Sheet", strDataSheet
	dictParams.Add "Scroll Method", strScrollMethod
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Input value to '{0}' : '{1}'", Array(childRepoName, strDataSheet)), _
			CsString.Format("Input value '{0}' to '{1}' using scroll method '{2}'. {3}", Array(strDataSheet, fullQtpName, strScrollMethod, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Input value to '{0}' : '{1}'", Array(childRepoName, strDataSheet)), _
			CsString.Format("Failed to input value '{0}' to '{1}' using scroll method '{2}'. {3}", Array(strDataSheet, fullQtpName, strScrollMethod, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub 
RegisterUserFunc "SAPGuiTable", "InputEx", "OrCore_SapInputEx"

sub OrCore_RefreshObject(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		ObjSender.RefreshObject
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Refresh '{0}'", Array(childRepoName)), _
			CsString.Format("Refresh '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Refresh '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to refresh '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiButton", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiCheckBox", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiComboBox", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiEdit", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiLabel", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiMenubar", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiRadioButton", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiStatusBar", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiTable", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiToolbar", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "SAPGuiTree", "RefreshObject", "OrCore_RefreshObject"
RegisterUserFunc "WebTable", "RefreshObject", "OrCore_RefreshObject"

function OrCore_SapCheckProperty(objSender, strPropertyName, strPropertyValue)
	OrCore_SapCheckProperty = OrCore_SapCheckPropertyEx(objSender, strPropertyName, strPropertyValue, null)
end function
RegisterUserFunc "SAPGuiButton", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiCheckBox", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiComboBox", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiEdit", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiLabel", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiMenubar", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiRadioButton", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiStatusBar", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiTable", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiToolbar", "CheckProperty", "OrCore_SapCheckProperty"
RegisterUserFunc "SAPGuiTree", "CheckProperty", "OrCore_SapCheckProperty"

function OrCore_SapCheckPropertyEx(objSender, strPropertyName, strPropertyValue, lngTimeoutMilliseconds)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		if IsNull(lngTimeoutMilliseconds) then
			lngTimeoutMilliseconds = UFT.ObjectSyncTimeout
		end if
		OrCore_SapCheckProperty = objSender.CheckProperty(strPropertyName, strPropertyValue, lngTimeoutMilliseconds)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim valueString
	if TypeName(strPropertyValue) = "ICompare" then
		valueString = strPropertyValue.ToString
	else
		valueString = CStr(strPropertyValue)
	end if
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Property Name", strPropertyName
	dictParams.Add "Expected Value", valueString
	dictParams.Add "Timeout (ms)", lngTimeoutMilliseconds

	if success then
		if OrCore_SapCheckProperty then
			Logger.FrameworkReportEx micPass, _
				CsString.Format("Check property for '{0}' Property name '{1}' Property value '{2}' : 'true'", Array(childRepoName, strPropertyName, valueString)), _
				CsString.Format("Check property '{0}' for value '{1}' in '{2}'. Values match (expected). {3}", Array(strPropertyName, valueString, fullQtpName, GetReportBody(objSender, dictParams, null))), _
				objSender, null, null
		else
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Check property for '{0}' Property name '{1}' Property value '{2}' : 'true'", Array(childRepoName, strPropertyName, valueString)), _
				CsString.Format("Check property '{0}' for value '{1}' in '{2}'. Values do NOT match (unexpected). {3}", Array(strPropertyName, valueString, fullQtpName, GetReportBody(objSender, dictParams, null))), _
				objSender, null, null
		end if
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Check property for '{0}' Property name '{1}' Property value '{2}' : 'true'", Array(childRepoName, strPropertyName, valueString)), _
				CsString.Format("Failed to check property '{0}' for value '{1}' in '{2}'. {3}", Array(strPropertyName, valueString, fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
	OrCore_SapCheckProperty = success
end function
RegisterUserFunc "SAPGuiButton", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiCheckBox", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiComboBox", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiEdit", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiLabel", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiMenubar", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiRadioButton", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiStatusBar", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiTable", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiToolbar", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"
RegisterUserFunc "SAPGuiTree", "CheckPropertyEx", "OrCore_SapCheckPropertyEx"

function OrCore_SapGetItem(objSender, index)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_SapGetItem  = objSender.GetItem(index)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get item from '{0}' with index '{1}' : '{2}'", Array(childRepoName, index, OrCore_SapGetItem)), _
			CsString.Format("Failed to get item at index '{0}' from '{1}'. {2}", Array(index, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "SAPGuiComboBox", "GetItem", "OrCore_SapGetItem"

sub OrCore_SapSelectKey(objSender,strKey)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectKey strKey
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select key '{0}' in '{1}'", Array(strKey, childRepoName)), _
			CsString.Format("Select key '{0}' in '{1}'. {2}", Array(strKey, fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select key '{0}' in '{1}'", Array(strKey, childRepoName)), _
			CsString.Format("Failed to select key '{0}' in '{1}'. {2}", Array(strKey, fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiComboBox", "SelectKey", "OrCore_SapSelectKey"

sub OrCore_SapOpenPossibleEntries(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.OpenPossibleEntries
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Open possible entries in '{0}'", Array(childRepoName)), _
			CsString.Format("Open possible entries in '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Open possible entries in '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to open possible entries in '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
	end if
end sub
RegisterUserFunc "SAPGuiEdit", "OpenPossibleEntries", "OrCore_SapOpenPossibleEntries"

sub OrCore_SapSetSecure(objSender, strEncryptedText)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SetSecure strEncryptedText
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set '{0}' to '{1}'", Array(childRepoName, strEncryptedText)), _
			CsString.Format("Set '{0}' to '{1}'. {2}", Array(fullQtpName, strEncryptedText, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set '{0}' to '{1}'", Array(childRepoName, strEncryptedText)), _
			CsString.Format("Failed to set '{0}' to '{1}'. {2}", Array(fullQtpName, strEncryptedText, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
	end if
end sub
RegisterUserFunc "SAPGuiEdit", "SetSecure", "OrCore_SapSetSecure"

sub OrCore_SapActivateCell(objSender, lngRow, strColumn)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ActivateCell lngRow, strColumn
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Row", lngRow
	dictParams.Add "Column", strColumn
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Activate cell '{0}' at row '{1}' column '{2}'", Array(childRepoName, lngRow, strColumn)), _
			CsString.Format("Activate cell '{0}' at row '{1}' column '{2}'. {3}", Array(fullQtpName, lngRow, strColumn, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Activate cell '{0}' at row '{1}' column '{2}'", Array(childRepoName, lngRow, strColumn)), _
			CsString.Format("Failed to activate cell '{0}' at row '{1}' column '{2}'. {3}", Array(fullQtpName, lngRow, strColumn, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiGrid", "ActivateCell", "OrCore_SapActivateCell"
RegisterUserFunc "SAPGuiTable", "ActivateCell", "OrCore_SapActivateCell"

sub OrCore_SapActivateColumn(objSender, strColumn)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ActivateColumn  strColumn
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Column", strColumn
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Activate column '{0}' in '{1}'", Array(childRepoName, strColumn)), _
			CsString.Format("Activate column '{0}' in '{1}'. {2}", Array(strColumn, fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Activate column '{0}' in '{1}'", Array(childRepoName, strColumn)), _
			CsString.Format("Failed to activate column '{0}' in '{1}'. {2}", Array(strColumn, fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiGrid", "ActivateColumn", "OrCore_SapActivateColumn"

sub OrCore_SapActivateItem(objSender, strPath, strItem)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ActivateItem  strPath, strItem
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	dictParams.Add "Item", strItem
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Activate '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Activate '{0}' at path '{1}' item '{2}'. {3}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Activate '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Failed to activate '{0}' at path '{1}' item '{2}'. {3}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "ActivateItem", "OrCore_SapActivateItem"

sub OrCore_SapActivateNode(objSender, strPath)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ActivateNode  strPath
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Activate node '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Activate node '{0}' at path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Activate node '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Failed to activate node '{0}' at path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "ActivateNode", "OrCore_SapActivateNode"

sub OrCore_SapActivateRow(objSender, lngRow)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ActivateRow lngRow
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Row", lngRow
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Activate '{0}' at row '{1}'", Array(childRepoName, lngRow)), _
			CsString.Format("Activate '{0}' at row '{1}'. {2}", Array(fullQtpName, lngRow, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Activate '{0}' at row '{1}'", Array(childRepoName, lngRow)), _
			CsString.Format("Failed to activate '{0}' at row '{1}'. {2}", Array(fullQtpName, lngRow, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiGrid", "ActivateRow", "OrCore_SapActivateRow"

sub OrCore_SapClickButton(objSender, strPath, strItem)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ClickButton strPath, strItem
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	dictParams.Add "Item", strItem
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Click button '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Click button '{0}' at path '{1}' item '{2}'. {3}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Click button '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Failed click button '{0}' at path '{1}' item '{2}'. {3}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "ClickButton", "OrCore_SapClickButton"

sub OrCore_SapClickCell(objSender, lngRow, strColumn)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ClickCell lngRow, strColumn
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Row", lngRow
	dictParams.Add "Column", strColumn
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Click cell '{0}' at row '{1}' column '{2}'", Array(childRepoName, lngRow, strColumn)), _
			CsString.Format("Click cell '{0}' at row '{1}' column '{2}'. {3}", Array(fullQtpName, lngRow, strColumn, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Click cell '{0}' at row '{1}' column '{2}'", Array(childRepoName, lngRow, strColumn)), _
			CsString.Format("Failed to click cell '{0}' at row '{1}' column '{2}'. {3}", Array(fullQtpName, lngRow, strColumn, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "ClickCell", "OrCore_SapClickCell"

sub OrCore_SapClickColumn(objSender, strColumn)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ClickColumn strColumn
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Column", strColumn
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Click '{0}' at column '{1}'", Array(childRepoName, strColumn)), _
			CsString.Format("Click '{0}' at column '{1}'. {2}", Array(fullQtpName, strColumn, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Click '{0}' at column '{1}'", Array(childRepoName, strColumn)), _
			CsString.Format("Failed to click '{0}' at column '{1}'. {2}", Array(fullQtpName, strColumn, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "ClickColumn", "OrCore_SapClickColumn"

sub OrCore_SapClickLink(objSender, strPath, strItem)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ClickLink  strPath, strItem
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	dictParams.Add "Item", strItem
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Click link '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Click link '{0}' at path '{1}' item '{2}'. {3}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Click link '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Failed to click link '{0}' at path '{1}' item '{2}'. {3}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "ClickLink", "OrCore_SapClickLink"

sub OrCore_SapCollapse(objSender, strPath)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.Collapse strPath
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Collapse '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Collapse '{0}' at path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Collapse '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Failed to collapse '{0}' at path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, null, null))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "Collapse", "OrCore_SapCollapse"

function OrCore_SapColumnCount(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_SapColumnCount = objSender.ColumnCount
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get column count for '{0}'", Array(childRepoName)), _
			CsString.Format("Get column count for '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "SAPGuiTable", "ColumnCount", "OrCore_SapColumnCount"

sub OrCore_SapDeselectColumn(objSender, strColumn)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.DeselectColumn strColumn
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Column", strColumn
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Deselect '{0}' at column '{1}'", Array(childRepoName, strColumn)), _
			CsString.Format("Deselect '{0}' at column '{1}'. {2}", Array(fullQtpName, strColumn, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Deselect '{0}' at column '{1}'", Array(childRepoName, strColumn)), _
			CsString.Format("Failed to deselect '{0}' at column '{1}'. {2}", Array(fullQtpName, strColumn, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "DeselectColumn", "OrCore_SapDeselectColumn"

sub OrCore_SapDeselectRow(objSender, lngRow)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.DeselectRow lngRow
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Row", lngRow
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Deselect '{0}' at row '{1}'", Array(childRepoName, lngRow)), _
			CsString.Format("Deselect '{0}' at row '{1}'. {2}", Array(fullQtpName, lngRow, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Deselect '{0}' at row '{1}'", Array(childRepoName, lngRow)), _
			CsString.Format("Failed to deselect '{0}' at row '{1}'. {2}", Array(fullQtpName, lngRow, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "DeselectRow", "OrCore_SapDeselectRow"

sub OrCore_SapDeselectRowsRange(objSender, lngStartRow, lngEndRow)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.DeselectRowsRange lngStartRow, lngEndRow
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Start Row", lngStartRow
	dictParams.Add "End Row", lngEndRow
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Deselect row range in '{0}' start row '{1}' end row '{2}'", Array(childRepoName, lngStartRow, lngEndRow)), _
			CsString.Format("Deselect row range in '{0}' start row '{1}' end row '{2}'. {3}", Array(fullQtpName, lngStartRow, lngEndRow, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Deselect row range in '{0}' start row '{1}' end row '{2}'", Array(childRepoName, lngStartRow, lngEndRow)), _
			CsString.Format("Failed to deselect row range in '{0}' start row '{1}' end row '{2}'. {3}", Array(fullQtpName, lngStartRow, lngEndRow, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "DeselectRowRange", "OrCore_SapDeselectRowsRange"

sub OrCore_SapExtendColumn(objSender, strColumn)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ExtendColumn strColumn
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Column", strColumn
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Extend column '{0}' in '{1}'", Array(strColumn, childRepoName)), _
			CsString.Format("Extend column '{0}' in '{1}'. {2}", Array(fullQtpName, strColumn, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Extend column '{0}' in '{1}'", Array(strColumn, childRepoName)), _
			CsString.Format("Failed to extend column '{0}' in '{1}'. {2}", Array(fullQtpName, strColumn, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "ExtendColumn", "OrCore_SapExtendColumn"

sub OrCore_SapExtendNode(objSender, strPath)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ExtendNode strPath
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Extend node '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Extend node '{0}' at path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Extend node '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Failed to extend node '{0}' at path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "ExtendNode", "OrCore_SapExtendNode"

sub OrCore_SapExtendRowsRange(objSender, lngStartRow, lngEndRow)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.ExtendRowsRange lngStartRow, lngEndRow
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Start Row", lngStartRow
	dictParams.Add "End Row", lngEndRow
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Extend row range in '{0}' start row '{1}' end row '{2}'", Array(childRepoName, lngStartRow, lngEndRow)), _
			CsString.Format("Extend row range in '{0}' start row '{1}' end row '{2}'. {3}", Array(fullQtpName, lngStartRow, lngEndRow, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Extend row range in '{0}' start row '{1}' end row '{2}'", Array(childRepoName, lngStartRow, lngEndRow)), _
			CsString.Format("Failed to extend row range in '{0}' start row '{1}' end row '{2}'. {3}", Array(fullQtpName, lngStartRow, lngEndRow, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "ExtendRowsRange", "OrCore_SapExtendRowsRange"

function OrCore_SapFindAllRowsByCellContent(objSender, strColumn, strCellText)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		set OrCore_SapFindAllRowsByCellContent = objSender.FindAllRowsByCellContent(strColumn, strCellText)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Column", strColumn
	dictParams.Add "Cell Text", strCellText
	
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Find all rows by cell content from '{0}' at column '{1}' with cell text '{2}'", Array(childRepoName, strColumn, strCellText)), _
			CsString.Format("Failed to find all rows by cell content from '{0}' at column '{1}' with cell text '{2}'. {3}", Array(fullQtpName, strColumn, strCellText, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "SAPGuiTable", "FindAllRowsByCellContent", "OrCore_SapFindAllRowsByCellContent"

function OrCore_SapFindRowByCellContent(objSender, strColumn, strCellText)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_SapFindRowByCellContent = objSender.FindRowByCellContent(strColumn, strCellText)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Column", strColumn
	dictParams.Add "Cell Text", strCellText
	
	if not success then
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Find row by cell content from '{0}' at column '{1}' with cell text '{2}'", Array(childRepoName, strColumn, strCellText)), _
			CsString.Format("Failed to find row by cell content from '{0}' at column '{1}' with cell text '{2}'. {3}", Array(fullQtpName, strColumn, strCellText, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "SAPGuiTable", "FindRowByCellContent", "OrCore_SapFindRowByCellContent"

function OrCore_SapGetCellData(objSender, lngRow, strCol)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_SapGetCellData = objSender.GetCellData(lngRow, strCol)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if not success then
		dim dictParams : set dictParams = NewVbsDictionary
		dictParams.Add "Row", lngRow
		dictParams.Add "Column", strCol
	
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get cell data from '{0}' at row '{1}' column '{2}'", Array(childRepoName, lngRow, strCol)), _
			CsString.Format("Failed to get cell data from '{0}' at row '{1}' column '{2}'. {3}", Array(fullQtpName, lngRow, srtCol, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "SAPGuiTable", "GetCellData", "OrCore_SapGetCellData"
RegisterUserFunc "SAPGuiGrid", "GetCellData", "OrCore_SapGetCellData"

function OrCore_SapGetCellLength(objSender, lngRow, strCol)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_SapGetCellLength = objSender.GetCellLength(lngRow, strCol)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		dim dictParams : set dictParams = NewVbsDictionary
		dictParams.Add "Row", lngRow
		dictParams.Add "Column", strCol
	
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get cell length from '{0}' at row '{1}' column '{2}'", Array(childRepoName, lngRow, strCol)), _
			CsString.Format("Failed to get cell length from '{0}' at row '{1}' column '{2}'. {3}", Array(fullQtpName, lngRow, srtCol, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end Function
RegisterUserFunc "SAPGuiTable", "GetCellLength", "OrCore_SapGetCellLength"

function OrCore_SapIsCellEditable(objSender, lngRow, strCol)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_SapIsCellEditable = objSender.IsCellEditable(lngRow, strCol)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		dim dictParams : set dictParams = NewVbsDictionary
		dictParams.Add "Row", lngRow
		dictParams.Add "Column", strCol
		
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Check if cell '{0}' is editable at row '{1}' column '{2}'", Array(childRepoName, lngRow, strCol)), _
			CsString.Format("Failed to check if cell '{0}' is editable at row '{1}' column '{2}'. {3}", Array(fullQtpName, lngRow, strCol, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if

end Function
RegisterUserFunc "SAPGuiTable", "IsCellEditable", "OrCore_SapIsCellEditable"

sub OrCore_SapOpenContextMenu(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.OpenContextMenu
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Open context menu for '{0}'", Array(childRepoName)), _
			CsString.Format("Open context menu for '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Open context menu for '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to open context menu for '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "OpenContextMenu", "OrCore_SapOpenContextMenu"

sub OrCore_SapOpenHeaderContextMenu(objSender, strColumn)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.OpenHeaderContextMenu strColumn
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Column", strColumn
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Open header context menu for '{0}' at column '{1}'", Array(childRepoName, strColumn)), _
			CsString.Format("Open header context menu for '{0}' at column '{1}'. {2}", Array(fullQtpName, strColumn, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Open header context menu for '{0}' at column '{1}'", Array(childRepoName, strColumn)), _
			CsString.Format("Failed to open header context menu for '{0}' at column '{1}'. {2}", Array(fullQtpName, strColumn, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "OpenHeaderContextMenu", "OrCore_SapOpenHeaderContextMenu"

sub OrCore_SapOpenItemContextMenu(objSender, strPath, strItem)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.OpenItemContextMenu strPath, strItem
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	dictParams.Add "Item", strItem
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Open item context menu for '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Open item context menu for '{0}' at path '{1}' item '{2}'. {3}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Open item context menu for '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Failed to open item context menu for '{0}' at path '{1}' item '{2}'. {3}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "OpenItemContextMenu", "OrCore_SapOpenItemContextMenu"

sub OrCore_SapOpenNodeContextMenu(objSender, strPath)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.OpenNodeContextMenu StrPath
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Open node context menu for '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Open node context menu for '{0}' at path '{1}'. {2}", Array(fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Open node context menu for '{0}' at path '{1}'", Array(childRepoName, strPath)), _
			CsString.Format("Failed to open node context menu for '{0}' at path '{1}'. {2}", Array(fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "OpenNodeContextMenu", "OrCore_SapOpenNodeContextMenu"

sub OrCore_SapPressButton(objSender, strButtonId)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.PressButton strButtonId
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Button ID", strButtonId
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Press button '{0}' with ID '{1}'", Array(childRepoName, strButtonId)), _
			CsString.Format("Press button '{0}' with ID '{1}'. {2}", Array(fullQtpName, strButtonId, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Press button '{0}' with ID '{1}'", Array(childRepoName, strButtonId)), _
			CsString.Format("Failed to press button '{0}' with ID '{1}'. {2}", Array(fullQtpName, strButtonId, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiToolbar", "PressButton", "OrCore_SapPressButton"

sub OrCore_SapPressContextButton(objSender, strButtonId)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.PressContextButton strButtonId
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Button ID", strButtonId
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Press context button '{0}' with ID '{1}'", Array(childRepoName, strButtonId)), _
			CsString.Format("Press context button '{0}' with ID '{1}'. {2}", Array(fullQtpName, strButtonId, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Press context button '{0}' with ID '{1}'", Array(childRepoName, strButtonId)), _
			CsString.Format("Failed to press context button '{0}' with ID '{1}'. {2}", Array(fullQtpName, strButtonId, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiToolbar", "PressContextButton", "OrCore_SapPressContextButton"

'TODO	A SelectNode or SelectItem statement followed by a PressEnter method is equivalent to an ActivateNode or ActivateItem statement. 
sub OrCore_SapPressEnter(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.PressEnter
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Press enter on '{0}'", Array(childRepoName)), _
			CsString.Format("Press enter on '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Press enter on '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to press enter on '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "PressEnter", "OrCore_SapPressEnter"

sub OrCore_SapPressSettingsButton(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.PressSettingsButton
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Press settings button '{0}'", Array(childRepoName)), _
			CsString.Format("Press settings button '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Press settings button '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to press settings button '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "PressSettingsButton", "OrCore_SapPressSettingsButton"

sub OrCore_SapReset(objSender)
	OrCore_SapResetEx objSender, null
end sub

sub OrCore_SapResetEx(objSender, strTransactionCode)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		if IsNull(strTransactionCode) then
			objSender.Reset
		else 
			objSender.Reset strTransactionCode
		end if
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if IsNull(strTransactionCode) then
		strTransactionCode = "/n"
	end if

	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Reset '{0}' with code '{1}'", Array(childRepoName, strTransactionCode)), _
			CsString.Format("Reset '{0}' with code '{1}'. {2}", Array(fullQtpName, strTransactionCode, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Reset '{0}' with code '{1}'", Array(childRepoName, strTransactionCode)), _
			CsString.Format("Failed to reset '{0}' with code '{1}'. {2}", Array(fullQtpName, strTransactionCode, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiSession", "Reset", "OrCore_SapReset"
RegisterUserFunc "SAPGuiSession", "ResetEx", "OrCore_SapResetEx"

sub OrCore_SapSelectAllColumns(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectAllColumns 
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
		
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select all columns in '{0}'", Array(childRepoName)), _
			CsString.Format("Select all columns in '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select all columns in '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to select all columns in '{0}'. {1}", Array(fullQtpName, GetReportBody(objSender, null, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "SelectAllColumns", "OrCore_SapSelectAllColumns"

sub OrCore_SapSelectColumn(objSender, strCol)
   	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectColumn strCol
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Column", strCol
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select column '{0}' in '{1}'", Array(strCol, childRepoName)), _
			CsString.Format("Select column '{0}' in '{1}'. {2}", Array(strCol, fullQtpName, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select column '{0}' in '{1}'", Array(strCol, childRepoName)), _
			CsString.Format("Failed to select column '{0}' in '{1}'. {2}", Array(strCol, fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiGrid", "SelectColumn", "OrCore_SapSelectColumn"

sub OrCore_SapSelectItem(objSender, strPath, strItem)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectItem  strPath, strItem
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	dictParams.Add "Item", strItem
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select item in '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Select item in '{0}' at path '{1}' item '{2}'. {2}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select item in '{0}' at path '{1}' item '{2}'", Array(childRepoName, strPath, strItem)), _
			CsString.Format("Failed to select item in '{0}' at path '{1}' item '{2}'. {2}", Array(fullQtpName, strPath, strItem, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "SelectItem", "OrCore_SapSelectItem"

sub OrCore_SapSelectMenuItem(objSender, strMenuPath)
   	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectMenuItem strMenuPath
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Menu Path", strMenuPath
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select menu item in '{0}' at menu path '{1}'", Array(childRepoName, strMenuPath)), _
			CsString.Format("Select menu item in '{0}' at menu path '{1}'. {2}", Array(fullQtpName, strMenuPath, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select menu item in '{0}' at menu path '{1}'", Array(childRepoName, strMenuPath)), _
			CsString.Format("Failed to select menu item in '{0}' at menu path '{1}'. {2}", Array(fullQtpName, strMenuPath, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiToolbar", "SelectMenuItem", "OrCore_SapSelectMenuItem"

sub OrCore_SapSelectMenuItemById(objSender, strMenuId)
   	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectMenuItemById strMenuId
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Menu ID", strMenuId
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select menu item in '{0}' for menu with ID '{1}'", Array(childRepoName, strMenuId)), _
			CsString.Format("Select menu item in '{0}' for menu with ID '{1}'. {2}", Array(fullQtpName, strMenuPath, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select menu item in '{0}' for menu with ID '{1}'", Array(childRepoName, strMenuId)), _
			CsString.Format("Failed to select menu item in '{0}' for menu with ID '{1}'. {2}", Array(fullQtpName, strMenuPath, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiToolbar", "SelectMenuItemById", "OrCore_SapSelectMenuItemById"
RegisterUserFunc "SAPGuiTree", "SelectMenuItemById", "OrCore_SapSelectMenuItemById"

sub OrCore_SapSelectNode(objSender, strPath)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectNode  strPath
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Path", strPath
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select node in '{0}' from path '{1}", Array(childRepoName, strPath)), _
			CsString.Format("Select node in '{0}' from path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select node in '{0}' from path '{1}", Array(childRepoName, strPath)), _
			CsString.Format("Failed to select node in '{0}' from path '{1}'. {2}", Array(fullQtpName, strPath, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTree", "SelectNode", "OrCore_SapSelectNode"
 
sub OrCore_SapSelectRowsRange(objSender, lngFrom, lngTo)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SelectRowsRange lngFrom, lngTo
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "From", lngFrom
	dictParams.Add "To", lngTo
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Select range of rows in '{0}' from '{1}' to '{2}'", Array(childRepoName, lngFrom, lngTo)), _
			CsString.Format("Select range of rows in '{0}' from '{1}' to '{2}'. {3}", Array(fullQtpName, lngFrom, lngTo, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Select range of rows in '{0}' from '{1}' to '{2}'", Array(childRepoName, lngFrom, lngTo)), _
			CsString.Format("Failed to select range of rows in '{0}' from '{1}' to '{2}'. {3}", Array(fullQtpName, lngFrom, lngTo, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiTable", "SelectRowsRange", "OrCore_SapSelectRowsRange"

sub OrCore_SapSetCaretPos(objSender, lngPos)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SetCaretPos lngPos
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Position", lngPos
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set caret in '{0}' to position '{1}'", Array(childRepoName, lngPos)), _
			CsString.Format("Set caret in '{0}' to position '{1}'. {2}", Array(fullQtpName, lngPos, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set caret in '{0}' to position '{1}'", Array(childRepoName, lngPos)), _
			CsString.Format("Failed set caret in '{0}' to position '{1}'. {2}", Array(fullQtpName, lngPos, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiLabel", "SetCaretPos", "OrCore_SapSetCaretPos"
RegisterUserFunc "SAPGuiEdit", "SetCaretPos", "OrCore_SapSetCaretPos"

sub OrCore_SapSetCellData(objSender, lngRow, strColumn, strData)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SetCellData lngRow, strColumn, strData
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	dim dictParams : set dictParams = NewVbsDictionary
	dictParams.Add "Row", lngRow
	dictParams.Add "Column", strColumn
	dictParams.Add "Data", strData
	
	if success then
		Logger.FrameworkReportEx micDone, _
			CsString.Format("Set cell data for '{0}' at row '{1}' column '{2}' : Data '{3}'", Array(childRepoName, lngRow, strColumn, strData)), _
			CsString.Format("Set cell data for '{0}' at row '{1}' column '{2}' to '{3}'. {4}", Array(fullQtpName, lngRow, strColumn, strData, GetReportBody(objSender, dictParams, null))), _
			objSender, null, null
	else
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Set cell data for '{0}' at row '{1}' column '{2}' : Data '{3}'", Array(childRepoName, lngRow, strColumn, strData)), _
			CsString.Format("Failed to set cell data for '{0}' at row '{1}' column '{2}' to '{3}'. {4}", Array(fullQtpName, lngRow, strColumn, strData, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end sub
RegisterUserFunc "SAPGuiGrid", "SetCellData", "OrCore_SapSetCellData"

function OrCore_SapValidRow(objSender, lngRow)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
	
	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_SapValidRow = objSender.ValidRow(lngRow)
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0
	
	if not success then
		dim dictParams : set dictParams = NewVbsDictionary
		dictParams.Add "Row", lngRow
	
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Check for valid row in '{0}' at row '{1}'", Array(childRepoName, lngRow)), _
			CsString.Format("Check for valid row in '{0}' at row '{1}'. {2}", Array(fullQtpName, lngRow, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if
end Function
RegisterUserFunc "SAPGuiTable", "ValidRow", "OrCore_SapValidRow"

function OrCore_Update(objSender, strPropertyName, strPropertyValue)
	'NOTE: for this to work correctly, the property to be updated must already have been added to the object's OR definition.
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		objSender.SetTOProperty strPropertyName, strPropertyValue
		Logger.SetReporterFilter oldFilter
		success = (Err.Number = 0)
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	if not success then
		dim dictParams : set dictParams = NewVbsDictionary
		dictParams.Add "Property Value", strPropertyName
		dictParams.Add "Property Name", strPropertyValue
	
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Update '{0}'", Array(childRepoName)), _
			CsString.Format("Failed to update property '{0}' to value '{1}' in '{2}'. {3}", Array(strPropertyName, strPropertyValue, fullQtpName, GetReportBody(objSender, dictParams, errorMsg))), _
			objSender, null, null
		OrCore.OnError
	end if

	set OrCore_Update = objSender
	on error goto 0
end function
RegisterUserFunc "Browser", "Update", "OrCore_Update"
RegisterUserFunc "Dialog", "Update", "OrCore_Update"
RegisterUserFunc "Link", "Update", "OrCore_Update"
RegisterUserFunc "Page", "Update", "OrCore_Update"
RegisterUserFunc "Static", "Update", "OrCore_Update"
RegisterUserFunc "WebArea", "Update", "OrCore_Update"
RegisterUserFunc "WebButton", "Update", "OrCore_Update"
RegisterUserFunc "WebCheckBox", "Update", "OrCore_Update"
RegisterUserFunc "WebEdit", "Update", "OrCore_Update"
RegisterUserFunc "WebElement", "Update", "OrCore_Update"
RegisterUserFunc "WebFile", "Update", "OrCore_Update"
RegisterUserFunc "WebList", "Update", "OrCore_Update"
RegisterUserFunc "WebNumber", "Update", "OrCore_Update"
RegisterUserFunc "WebRadioGroup", "Update", "OrCore_Update"
RegisterUserFunc "WebTable", "Update", "OrCore_Update"
RegisterUserFunc "WebXML", "Update", "OrCore_Update"
RegisterUserFunc "WinButton", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiButton", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiCheckBox", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiComboBox", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiEdit", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiLabel", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiMenubar", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiRadioButton", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiStatusBar", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiTable", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiToolbar", "Update", "OrCore_Update"
RegisterUserFunc "SAPGuiTree", "Update", "OrCore_Update"

'=========================================================================================
'=========================================================================================
' MANUALLY GENERATED PROPERTY AND UPDATE FUNCTIONS
'=========================================================================================
'=========================================================================================
function OrCore_GetAllItems(objSender)
	OrCore_GetAllItems = OrCore_GetRuntimePropertyOrOverride(objSender, "all items", "AllItems")
end function
RegisterUserFunc "WebList", "AllItems", "OrCore_GetAllItems"

function OrCore_GetChecked(objSender)
	dim checked : checked = OrCore_GetRoProperty(objSender, "checked")
	if checked = 0 then
		OrCore_GetChecked = false
	elseif checked = 1 then
		OrCore_GetChecked = true
	else
		dim childRepoName : childRepoName = GetRepoName(objSender)
		dim fullQtpName : fullQtpName = GetFullQtpName(objSender)
		Logger.FrameworkReportEx micFail, _
			CsString.Format("Get checked status from '{0}'", Array(childRepoName)), _
			CsString.Format("(IsChecked) Received an unknown value for property 'checked' from '{0}'. Value: '{1}'. {2}", Array(fullQtpName, checked, GetReportBody(objSender, null, null))), _
			objSender, null, null
		OrCore.OnError
	end if
end function
RegisterUserFunc "WebCheckBox", "IsChecked", "OrCore_GetChecked"
RegisterUserFunc "WebRadioGroup", "IsChecked", "OrCore_GetChecked"

function OrCore_UpdateChecked(objSender, newValue)
	set OrCore_UpdateChecked = OrCore_Update(objSender, "checked", newValue)
end function
RegisterUserFunc "WebCheckBox", "UpdateChecked", "OrCore_UpdateChecked"
RegisterUserFunc "WebRadioGroup", "UpdateChecked", "OrCore_UpdateChecked"

function OrCore_GetDisabled(objSender)
	if OrCore_GetRoProperty(objSender, "disabled") = 1 then
		OrCore_GetDisabled = false
	else
		OrCore_GetDisabled = true
	end if
end function
RegisterUserFunc "WebButton", "IsEnabled", "OrCore_GetDisabled"
RegisterUserFunc "WebCheckBox", "IsEnabled", "OrCore_GetDisabled"
RegisterUserFunc "WebEdit", "IsEnabled", "OrCore_GetDisabled"
RegisterUserFunc "WebFile", "IsEnabled", "OrCore_GetDisabled"
RegisterUserFunc "WebList", "IsEnabled", "OrCore_GetDisabled"
RegisterUserFunc "WebNumber", "IsEnabled", "OrCore_GetDisabled"
RegisterUserFunc "WebRadioGroup", "IsEnabled", "OrCore_GetDisabled"

function OrCore_UpdateDisabled(objSender, newValue)
	set OrCore_UpdateDisabled = OrCore_Update(objSender, "disabled", newValue)
end function
RegisterUserFunc "WebButton", "UpdateDisabled", "OrCore_UpdateDisabled"
RegisterUserFunc "WebCheckBox", "UpdateDisabled", "OrCore_UpdateDisabled"
RegisterUserFunc "WebEdit", "UpdateDisabled", "OrCore_UpdateDisabled"
RegisterUserFunc "WebFile", "UpdateDisabled", "OrCore_UpdateDisabled"
RegisterUserFunc "WebList", "UpdateDisabled", "OrCore_UpdateDisabled"
RegisterUserFunc "WebNumber", "UpdateDisabled", "OrCore_UpdateDisabled"
RegisterUserFunc "WebRadioGroup", "UpdateDisabled", "OrCore_UpdateDisabled"

function OrCore_GetEnabled(objSender)
	if OrCore_GetROProperty(objSender, "enabled") = 1 then
		OrCore_GetEnabled = true
	else
		OrCore_GetEnabled = false
	end if
end function
RegisterUserFunc "Dialog", "IsEnabled", "OrCore_GetEnabled"
RegisterUserFunc "Static", "IsEnabled", "OrCore_GetEnabled"
RegisterUserFunc "WinButton", "IsEnabled", "OrCore_GetEnabled"

function OrCore_UpdateEnabled(objSender, newValue)
	set OrCore_UpdateEnabled = OrCore_Update(objSender, "enabled", newValue)
end function
RegisterUserFunc "Dialog", "UpdateEnabled", "OrCore_UpdateEnabled"
RegisterUserFunc "Static", "UpdateEnabled", "OrCore_UpdateEnabled"
RegisterUserFunc "WinButton", "UpdateEnabled", "OrCore_UpdateEnabled"

function OrCore_HasItem(objSender, strItemName)
	dim allItems : allItems = OrCore_GetAllItems(objSender)
	OrCore_HasItem = CsString.Contains(";" & allItems & ";", ";" & strItemName & ";", true)
end function
RegisterUserFunc "WebList", "HasItem", "OrCore_HasItem"

function OrCore_GetReadOnly(objSender)
	if OrCore_GetRoProperty(objSender, "readonly") = 1 then
		OrCore_GetReadOnly = true
	else
		OrCore_GetReadOnly = false
	end if
end function
RegisterUserFunc "WebEdit", "IsReadOnly", "OrCore_GetReadOnly"
RegisterUserFunc "WebFile", "IsReadOnly", "OrCore_GetReadOnly"
RegisterUserFunc "WebNumber", "IsReadOnly", "OrCore_GetReadOnly"

function OrCore_UpdateReadOnly(objSender, newValue)
	set OrCore_UpdateReadOnly = OrCore_Update(objSender, "readonly", newValue)
end function
RegisterUserFunc "WebEdit", "UpdateReadOnly", "OrCore_UpdateReadOnly"
RegisterUserFunc "WebFile", "UpdateReadOnly", "OrCore_UpdateReadOnly"
RegisterUserFunc "WebNumber", "UpdateReadOnly", "OrCore_UpdateReadOnly"

function OrCore_GetWebListValue(objSender)
	dim childRepoName : childRepoName = GetRepoName(objSender)
	dim fullQtpName : fullQtpName = GetFullQtpName(objSender)

	dim success, errorMsg
	on error resume next : Err.Clear
		dim oldFilter : oldFilter = Logger.SetReporterFilter(rfDisableAll)
		OrCore_GetWebListValue = objSender.object.value
		Logger.SetReporterFilter oldFilter
		
		success = (Err.Number = 0) and (not IsEmpty(OrCore_GetWebListValue))
		if not success then
			errorMsg = Err.Description
		end if
		Err.Clear
	on error goto 0

	'NOTE: we don't report anything if it works.
	if not success then
		oldFilter = Logger.SetReporterFilter(rfDisableAll)
		dim objectExists : objectExists = objSender.Exist(1)
		Logger.SetReporterFilter oldFilter
		
		if (not objectExists) then
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Get real value from '{0}'", Array(childRepoName)), _
				CsString.Format("Failed to get real value from '{0}'. '{1}' does not exist. {2}", Array(fullQtpName, childRepoName, GetReportBody(objSender, null, errorMsg))), _
				objSender, null, null
		elseif (IsEmpty(OrCore_GetWebListValue)) then
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Get real value from '{0}'", Array(childRepoName)), _
				CsString.Format("Get real value from '{0}'. '{1}' exists, but selected value either does not exist or is 'Empty'. {2}", Array(fullQtpName, childRepoName, GetReportBody(objSender, null, errorMsg))), _
				objSender, null, null
		else
			Logger.FrameworkReportEx micFail, _
				CsString.Format("Get real value from '{0}'", Array(childRepoName)), _
				CsString.Format("Get real value from '{0}'. '{1}' exists, but UFT is unable to retrieve it. {2}", Array( fullQtpName, childRepoName, GetReportBody(objSender, null, errorMsg))), _
				objSender, null, null
		end if
		OrCore.OnError
	end if
end function
RegisterUserFunc "WebList", "RealValue", "OrCore_GetWebListValue"

'=========================================================================================
'=========================================================================================
' AUTO GENERATED PROPERTY AND UPDATE FUNCTIONS
'=========================================================================================
'=========================================================================================

function OrCore_GetAbsX(objSender)
	OrCore_GetAbsX = OrCore_GetRuntimePropertyOrOverride(objSender, "abs_x", "AbsX")
end function
RegisterUserFunc "Browser", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "Dialog", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "Frame", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "Image", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "Link", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "Page", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "Static", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebArea", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebButton", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebCheckBox", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebEdit", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebElement", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebFile", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebList", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebNumber", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebRadioGroup", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WebTable", "AbsX", "OrCore_GetAbsX"
RegisterUserFunc "WinButton", "AbsX", "OrCore_GetAbsX"

function OrCore_UpdateAbsX(objSender, newValue)
	set OrCore_UpdateAbsX = OrCore_Update(objSender, "abs_x", newValue)
end function
RegisterUserFunc "Browser", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "Dialog", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "Frame", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "Image", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "Link", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "Page", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "Static", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebArea", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebButton", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebCheckBox", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebEdit", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebElement", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebFile", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebList", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebNumber", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebRadioGroup", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WebTable", "UpdateAbsX", "OrCore_UpdateAbsX"
RegisterUserFunc "WinButton", "UpdateAbsX", "OrCore_UpdateAbsX"

function OrCore_GetAbsY(objSender)
	OrCore_GetAbsY = OrCore_GetRuntimePropertyOrOverride(objSender, "abs_y", "AbsY")
end function
RegisterUserFunc "Browser", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "Dialog", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "Frame", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "Image", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "Link", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "Page", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "Static", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebArea", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebButton", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebCheckBox", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebEdit", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebElement", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebFile", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebList", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebNumber", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebRadioGroup", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WebTable", "AbsY", "OrCore_GetAbsY"
RegisterUserFunc "WinButton", "AbsY", "OrCore_GetAbsY"

function OrCore_UpdateAbsY(objSender, newValue)
	set OrCore_UpdateAbsY = OrCore_Update(objSender, "abs_y", newValue)
end function
RegisterUserFunc "Browser", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "Dialog", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "Frame", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "Image", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "Link", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "Page", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "Static", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebArea", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebButton", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebCheckBox", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebEdit", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebElement", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebFile", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebList", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebNumber", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebRadioGroup", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WebTable", "UpdateAbsY", "OrCore_UpdateAbsY"
RegisterUserFunc "WinButton", "UpdateAbsY", "OrCore_UpdateAbsY"

function OrCore_GetAlt(objSender)
	OrCore_GetAlt = OrCore_GetRuntimePropertyOrOverride(objSender, "alt", "Alt")
end function
RegisterUserFunc "Image", "Alt", "OrCore_GetAlt"
RegisterUserFunc "WebArea", "Alt", "OrCore_GetAlt"

function OrCore_UpdateAlt(objSender, newValue)
	set OrCore_UpdateAlt = OrCore_Update(objSender, "alt", newValue)
end function
RegisterUserFunc "Image", "UpdateAlt", "OrCore_UpdateAlt"
RegisterUserFunc "WebArea", "UpdateAlt", "OrCore_UpdateAlt"

function OrCore_GetApplicationVersion(objSender)
	OrCore_GetApplicationVersion = OrCore_GetRuntimePropertyOrOverride(objSender, "application version", "ApplicationVersion")
end function
RegisterUserFunc "Browser", "ApplicationVersion", "OrCore_GetApplicationVersion"

function OrCore_UpdateApplicationVersion(objSender, newValue)
	set OrCore_UpdateApplicationVersion = OrCore_Update(objSender, "application version", newValue)
end function
RegisterUserFunc "Browser", "UpdateApplicationVersion", "OrCore_UpdateApplicationVersion"

function OrCore_GetAttachedText(objSender)
	OrCore_GetAttachedText = OrCore_GetRuntimePropertyOrOverride(objSender, "attached text", "AttachedText")
end function
RegisterUserFunc "Static", "AttachedText", "OrCore_GetAttachedText"
RegisterUserFunc "WinButton", "AttachedText", "OrCore_GetAttachedText"

function OrCore_UpdateAttachedText(objSender, newValue)
	set OrCore_UpdateAttachedText = OrCore_Update(objSender, "attached text", newValue)
end function
RegisterUserFunc "Static", "UpdateAttachedText", "OrCore_UpdateAttachedText"
RegisterUserFunc "WinButton", "UpdateAttachedText", "OrCore_UpdateAttachedText"

function OrCore_GetBackgroundColor(objSender)
	OrCore_GetBackgroundColor = OrCore_GetRuntimePropertyOrOverride(objSender, "background color", "BackgroundColor")
end function
RegisterUserFunc "Link", "BackgroundColor", "OrCore_GetBackgroundColor"

function OrCore_UpdateBackgroundColor(objSender, newValue)
	set OrCore_UpdateBackgroundColor = OrCore_Update(objSender, "background color", newValue)
end function
RegisterUserFunc "Link", "UpdateBackgroundColor", "OrCore_UpdateBackgroundColor"

function OrCore_GetBorder(objSender)
	OrCore_GetBorder = OrCore_GetRuntimePropertyOrOverride(objSender, "border", "BorderThickness")
end function
RegisterUserFunc "WebTable", "BorderThickness", "OrCore_GetBorder"

function OrCore_UpdateBorder(objSender, newValue)
	set OrCore_UpdateBorder = OrCore_Update(objSender, "border", newValue)
end function
RegisterUserFunc "WebTable", "UpdateBorder", "OrCore_UpdateBorder"

function OrCore_GetClass(objSender)
	OrCore_GetClass = OrCore_GetRuntimePropertyOrOverride(objSender, "class", "Class")
end function
RegisterUserFunc "Image", "Class", "OrCore_GetClass"
RegisterUserFunc "Link", "Class", "OrCore_GetClass"
RegisterUserFunc "WebArea", "Class", "OrCore_GetClass"
RegisterUserFunc "WebButton", "Class", "OrCore_GetClass"
RegisterUserFunc "WebCheckBox", "Class", "OrCore_GetClass"
RegisterUserFunc "WebEdit", "Class", "OrCore_GetClass"
RegisterUserFunc "WebElement", "Class", "OrCore_GetClass"
RegisterUserFunc "WebFile", "Class", "OrCore_GetClass"
RegisterUserFunc "WebList", "Class", "OrCore_GetClass"
RegisterUserFunc "WebNumber", "Class", "OrCore_GetClass"
RegisterUserFunc "WebRadioGroup", "Class", "OrCore_GetClass"
RegisterUserFunc "WebTable", "Class", "OrCore_GetClass"

function OrCore_UpdateClass(objSender, newValue)
	set OrCore_UpdateClass = OrCore_Update(objSender, "class", newValue)
end function
RegisterUserFunc "Image", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "Link", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebArea", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebButton", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebCheckBox", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebEdit", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebElement", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebFile", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebList", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebNumber", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebRadioGroup", "UpdateClass", "OrCore_UpdateClass"
RegisterUserFunc "WebTable", "UpdateClass", "OrCore_UpdateClass"

function OrCore_GetClassName(objSender)
	OrCore_GetClassName = OrCore_GetRuntimePropertyOrOverride(objSender, "Class Name", "ClassName")
end function
RegisterUserFunc "Browser", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "Dialog", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "Frame", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "Image", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "Link", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "Page", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "Static", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebArea", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebButton", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebCheckBox", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebEdit", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebElement", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebFile", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebList", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebNumber", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebRadioGroup", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WebTable", "ClassName", "OrCore_GetClassName"
RegisterUserFunc "WinButton", "ClassName", "OrCore_GetClassName"

function OrCore_GetColor(objSender)
	OrCore_GetColor = OrCore_GetRuntimePropertyOrOverride(objSender, "color", "Color")
end function
RegisterUserFunc "Link", "Color", "OrCore_GetColor"

function OrCore_UpdateColor(objSender, newValue)
	set OrCore_UpdateColor = OrCore_Update(objSender, "color", newValue)
end function
RegisterUserFunc "Link", "UpdateColor", "OrCore_UpdateColor"

function OrCore_UpdateCreationTime(objSender, newValue)
	set OrCore_UpdateCreationTime = OrCore_Update(objSender, "creationtime", newValue)
end function
RegisterUserFunc "Browser", "UpdateCreationTime", "OrCore_UpdateCreationTime"

function OrCore_UpdateCss(objSender, newValue)
	set OrCore_UpdateCss = OrCore_Update(objSender, "css", newValue)
end function
RegisterUserFunc "Browser", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "Frame", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "Image", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "Link", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "Page", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebArea", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebButton", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebCheckBox", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebEdit", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebElement", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebFile", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebList", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebNumber", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebRadioGroup", "UpdateCss", "OrCore_UpdateCss"
RegisterUserFunc "WebTable", "UpdateCss", "OrCore_UpdateCss"

function OrCore_GetDefaultValue(objSender)
	OrCore_GetDefaultValue = OrCore_GetRuntimePropertyOrOverride(objSender, "default value", "Default")
end function
RegisterUserFunc "WebEdit", "Default", "OrCore_GetDefaultValue"
RegisterUserFunc "WebFile", "Default", "OrCore_GetDefaultValue"
RegisterUserFunc "WebList", "Default", "OrCore_GetDefaultValue"
RegisterUserFunc "WebNumber", "Default", "OrCore_GetDefaultValue"

function OrCore_UpdateDefaultValue(objSender, newValue)
	set OrCore_UpdateDefaultValue = OrCore_Update(objSender, "default value", newValue)
end function
RegisterUserFunc "WebEdit", "UpdateDefaultValue", "OrCore_UpdateDefaultValue"
RegisterUserFunc "WebFile", "UpdateDefaultValue", "OrCore_UpdateDefaultValue"
RegisterUserFunc "WebList", "UpdateDefaultValue", "OrCore_UpdateDefaultValue"
RegisterUserFunc "WebNumber", "UpdateDefaultValue", "OrCore_UpdateDefaultValue"

function OrCore_GetFileName(objSender)
	OrCore_GetFileName = OrCore_GetRuntimePropertyOrOverride(objSender, "file name", "FileName")
end function
RegisterUserFunc "Image", "FileName", "OrCore_GetFileName"

function OrCore_UpdateFileName(objSender, newValue)
	set OrCore_UpdateFileName = OrCore_Update(objSender, "file name", newValue)
end function
RegisterUserFunc "Image", "UpdateFileName", "OrCore_UpdateFileName"

function OrCore_GetFocused(objSender)
	OrCore_GetFocused = OrCore_GetRuntimePropertyOrOverride(objSender, "focused", "HasFocus")
end function
RegisterUserFunc "Dialog", "HasFocus", "OrCore_GetFocused"
RegisterUserFunc "Static", "HasFocus", "OrCore_GetFocused"
RegisterUserFunc "WinButton", "HasFocus", "OrCore_GetFocused"

function OrCore_UpdateFocused(objSender, newValue)
	set OrCore_UpdateFocused = OrCore_Update(objSender, "focused", newValue)
end function
RegisterUserFunc "Dialog", "UpdateFocused", "OrCore_UpdateFocused"
RegisterUserFunc "Static", "UpdateFocused", "OrCore_UpdateFocused"
RegisterUserFunc "WinButton", "UpdateFocused", "OrCore_UpdateFocused"

function OrCore_GetFont(objSender)
	OrCore_GetFont = OrCore_GetRuntimePropertyOrOverride(objSender, "font", "Font")
end function
RegisterUserFunc "Link", "Font", "OrCore_GetFont"

function OrCore_UpdateFont(objSender, newValue)
	set OrCore_UpdateFont = OrCore_Update(objSender, "font", newValue)
end function
RegisterUserFunc "Link", "UpdateFont", "OrCore_UpdateFont"

function OrCore_GetForeground(objSender)
	OrCore_GetForeground = OrCore_GetRuntimePropertyOrOverride(objSender, "foreground", "Foreground")
end function
RegisterUserFunc "Dialog", "Foreground", "OrCore_GetForeground"

function OrCore_UpdateForeground(objSender, newValue)
	set OrCore_UpdateForeground = OrCore_Update(objSender, "foreground", newValue)
end function
RegisterUserFunc "Dialog", "UpdateForeground", "OrCore_UpdateForeground"

function OrCore_GetHasBorder(objSender)
	OrCore_GetHasBorder = OrCore_GetRuntimePropertyOrOverride(objSender, "hasborder", "HasBorder")
end function
RegisterUserFunc "Dialog", "HasBorder", "OrCore_GetHasBorder"

function OrCore_UpdateHasBorder(objSender, newValue)
	set OrCore_UpdateHasBorder = OrCore_Update(objSender, "hasborder", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHasBorder", "OrCore_UpdateHasBorder"

function OrCore_GetHasCaption(objSender)
	OrCore_GetHasCaption = OrCore_GetRuntimePropertyOrOverride(objSender, "hascaption", "HasCaption")
end function
RegisterUserFunc "Dialog", "HasCaption", "OrCore_GetHasCaption"

function OrCore_UpdateHasCaption(objSender, newValue)
	set OrCore_UpdateHasCaption = OrCore_Update(objSender, "hascaption", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHasCaption", "OrCore_UpdateHasCaption"

function OrCore_GetHasHScroll(objSender)
	OrCore_GetHasHScroll = OrCore_GetRuntimePropertyOrOverride(objSender, "hashscroll", "HasHScroll")
end function
RegisterUserFunc "Dialog", "HasHScroll", "OrCore_GetHasHScroll"

function OrCore_UpdateHasHScroll(objSender, newValue)
	set OrCore_UpdateHasHScroll = OrCore_Update(objSender, "hashscroll", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHasHScroll", "OrCore_UpdateHasHScroll"

function OrCore_GetHasSizeBox(objSender)
	OrCore_GetHasSizeBox = OrCore_GetRuntimePropertyOrOverride(objSender, "hassizebox", "HasSizeBox")
end function
RegisterUserFunc "Dialog", "HasSizeBox", "OrCore_GetHasSizeBox"

function OrCore_UpdateHasSizeBox(objSender, newValue)
	set OrCore_UpdateHasSizeBox = OrCore_Update(objSender, "hassizebox", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHasSizeBox", "OrCore_UpdateHasSizeBox"

function OrCore_GetHasSystemMenu(objSender)
	OrCore_GetHasSystemMenu = OrCore_GetRuntimePropertyOrOverride(objSender, "hassystemmenu", "HasSystemMenu")
end function
RegisterUserFunc "Dialog", "HasSystemMenu", "OrCore_GetHasSystemMenu"

function OrCore_UpdateHasSystemMenu(objSender, newValue)
	set OrCore_UpdateHasSystemMenu = OrCore_Update(objSender, "hassystemmenu", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHasSystemMenu", "OrCore_UpdateHasSystemMenu"

function OrCore_GetHasVScroll(objSender)
	OrCore_GetHasVScroll = OrCore_GetRuntimePropertyOrOverride(objSender, "hasvscroll", "HasVScroll")
end function
RegisterUserFunc "Dialog", "HasVScroll", "OrCore_GetHasVScroll"

function OrCore_UpdateHasVScroll(objSender, newValue)
	set OrCore_UpdateHasVScroll = OrCore_Update(objSender, "hasvscroll", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHasVScroll", "OrCore_UpdateHasVScroll"

function OrCore_GetHeight(objSender)
	OrCore_GetHeight = OrCore_GetRuntimePropertyOrOverride(objSender, "height", "Height")
end function
RegisterUserFunc "Browser", "Height", "OrCore_GetHeight"
RegisterUserFunc "Dialog", "Height", "OrCore_GetHeight"
RegisterUserFunc "Frame", "Height", "OrCore_GetHeight"
RegisterUserFunc "Image", "Height", "OrCore_GetHeight"
RegisterUserFunc "Link", "Height", "OrCore_GetHeight"
RegisterUserFunc "Page", "Height", "OrCore_GetHeight"
RegisterUserFunc "Static", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebArea", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebButton", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebCheckBox", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebEdit", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebElement", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebFile", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebList", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebNumber", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebRadioGroup", "Height", "OrCore_GetHeight"
RegisterUserFunc "WebTable", "Height", "OrCore_GetHeight"
RegisterUserFunc "WinButton", "Height", "OrCore_GetHeight"

function OrCore_UpdateHeight(objSender, newValue)
	set OrCore_UpdateHeight = OrCore_Update(objSender, "height", newValue)
end function
RegisterUserFunc "Browser", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "Dialog", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "Frame", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "Image", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "Link", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "Page", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "Static", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebArea", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebButton", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebCheckBox", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebEdit", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebElement", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebFile", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebList", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebNumber", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebRadioGroup", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WebTable", "UpdateHeight", "OrCore_UpdateHeight"
RegisterUserFunc "WinButton", "UpdateHeight", "OrCore_UpdateHeight"

function OrCore_GetHref(objSender)
	OrCore_GetHref = OrCore_GetRuntimePropertyOrOverride(objSender, "href", "Href")
end function
RegisterUserFunc "Image", "Href", "OrCore_GetHref"
RegisterUserFunc "Link", "Href", "OrCore_GetHref"
RegisterUserFunc "WebArea", "Href", "OrCore_GetHref"

function OrCore_UpdateHref(objSender, newValue)
	set OrCore_UpdateHref = OrCore_Update(objSender, "href", newValue)
end function
RegisterUserFunc "Image", "UpdateHref", "OrCore_UpdateHref"
RegisterUserFunc "Link", "UpdateHref", "OrCore_UpdateHref"
RegisterUserFunc "WebArea", "UpdateHref", "OrCore_UpdateHref"

function OrCore_GetHScrollPageSize(objSender)
	OrCore_GetHScrollPageSize = OrCore_GetRuntimePropertyOrOverride(objSender, "hscrollpagesize", "HScrollPageSize")
end function
RegisterUserFunc "Dialog", "HScrollPageSize", "OrCore_GetHScrollPageSize"

function OrCore_UpdateHScrollPageSize(objSender, newValue)
	set OrCore_UpdateHScrollPageSize = OrCore_Update(objSender, "hscrollpagesize", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHScrollPageSize", "OrCore_UpdateHScrollPageSize"

function OrCore_GetHScrollPos(objSender)
	OrCore_GetHScrollPos = OrCore_GetRuntimePropertyOrOverride(objSender, "minhscrollpos", "MinHScrollPos")
end function
RegisterUserFunc "Dialog", "MinHScrollPos", "OrCore_GetHScrollPos"

function OrCore_UpdateHScrollPos(objSender, newValue)
	set OrCore_UpdateHScrollPos = OrCore_Update(objSender, "minhscrollpos", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHScrollPos", "OrCore_UpdateHScrollPos"

function OrCore_GetHScrollPosition(objSender)
	OrCore_GetHScrollPosition = OrCore_GetRuntimePropertyOrOverride(objSender, "hscrollposition", "HScrollPosition")
end function
RegisterUserFunc "Dialog", "HScrollPosition", "OrCore_GetHScrollPosition"

function OrCore_UpdateHScrollPosition(objSender, newValue)
	set OrCore_UpdateHScrollPosition = OrCore_Update(objSender, "hscrollposition", newValue)
end function
RegisterUserFunc "Dialog", "UpdateHScrollPosition", "OrCore_UpdateHScrollPosition"

function OrCore_GetHtmlId(objSender)
	OrCore_GetHtmlId = OrCore_GetRuntimePropertyOrOverride(objSender, "html id", "HtmlId")
end function
RegisterUserFunc "Frame", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "Image", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "Link", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebArea", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebButton", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebCheckBox", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebEdit", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebElement", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebFile", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebList", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebNumber", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebRadioGroup", "HtmlId", "OrCore_GetHtmlId"
RegisterUserFunc "WebTable", "HtmlId", "OrCore_GetHtmlId"

function OrCore_UpdateHtmlId(objSender, newValue)
	set OrCore_UpdateHtmlId = OrCore_Update(objSender, "html id", newValue)
end function
RegisterUserFunc "Frame", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "Image", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "Link", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebArea", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebButton", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebCheckBox", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebEdit", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebElement", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebFile", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebList", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebNumber", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebRadioGroup", "UpdateHtmlId", "OrCore_UpdateHtmlId"
RegisterUserFunc "WebTable", "UpdateHtmlId", "OrCore_UpdateHtmlId"

function OrCore_GetHtmlTag(objSender)
	OrCore_GetHtmlTag = OrCore_GetRuntimePropertyOrOverride(objSender, "html tag", "HtmlTag")
end function
RegisterUserFunc "Frame", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "Image", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "Link", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebArea", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebButton", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebCheckBox", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebEdit", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebElement", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebFile", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebList", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebNumber", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebRadioGroup", "HtmlTag", "OrCore_GetHtmlTag"
RegisterUserFunc "WebTable", "HtmlTag", "OrCore_GetHtmlTag"

function OrCore_UpdateHtmlTag(objSender, newValue)
	set OrCore_UpdateHtmlTag = OrCore_Update(objSender, "html tag", newValue)
end function
RegisterUserFunc "Frame", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "Image", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "Link", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebArea", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebButton", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebCheckBox", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebEdit", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebElement", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebFile", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebList", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebNumber", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebRadioGroup", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"
RegisterUserFunc "WebTable", "UpdateHtmlTag", "OrCore_UpdateHtmlTag"

function OrCore_GetHWnd(objSender)
	OrCore_GetHWnd = OrCore_GetRuntimePropertyOrOverride(objSender, "hwnd", "Hwnd")
end function
RegisterUserFunc "Browser", "Hwnd", "OrCore_GetHWnd"
RegisterUserFunc "Dialog", "Hwnd", "OrCore_GetHWnd"
RegisterUserFunc "Page", "Hwnd", "OrCore_GetHWnd"
RegisterUserFunc "Static", "Hwnd", "OrCore_GetHWnd"
RegisterUserFunc "WinButton", "Hwnd", "OrCore_GetHWnd"
RegisterUserFunc "Window", "Hwnd", "OrCore_GetHWnd"

function OrCore_UpdateHWnd(objSender, newValue)
	set OrCore_UpdateHWnd = OrCore_Update(objSender, "hwnd", newValue)
end function
RegisterUserFunc "Browser", "UpdateHWnd", "OrCore_UpdateHWnd"
RegisterUserFunc "Dialog", "UpdateHWnd", "OrCore_UpdateHWnd"
RegisterUserFunc "Page", "UpdateHWnd", "OrCore_UpdateHWnd"
RegisterUserFunc "Static", "UpdateHWnd", "OrCore_UpdateHWnd"
RegisterUserFunc "WinButton", "UpdateHWnd", "OrCore_UpdateHWnd"
RegisterUserFunc "Window", "UpdateHWnd", "OrCore_UpdateHWnd"

function OrCore_UpdateIndex(objSender, newValue)
	set OrCore_UpdateIndex = OrCore_Update(objSender, "index", newValue)
end function
RegisterUserFunc "Browser", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "Dialog", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "Frame", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "Image", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "Link", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "Page", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "Static", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebArea", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebButton", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebCheckBox", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebEdit", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebElement", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebFile", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebList", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebNumber", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebRadioGroup", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WebTable", "UpdateIndex", "OrCore_UpdateIndex"
RegisterUserFunc "WinButton", "UpdateIndex", "OrCore_UpdateIndex"

function OrCore_GetImageType(objSender)
	OrCore_GetImageType = OrCore_GetRuntimePropertyOrOverride(objSender, "image type", "ImageType")
end function
RegisterUserFunc "Image", "ImageType", "OrCore_GetImageType"
RegisterUserFunc "WebArea", "ImageType", "OrCore_GetImageType"

function OrCore_UpdateImageType(objSender, newValue)
	set OrCore_UpdateImageType = OrCore_Update(objSender, "image type", newValue)
end function
RegisterUserFunc "Image", "UpdateImageType", "OrCore_UpdateImageType"
RegisterUserFunc "WebArea", "UpdateImageType", "OrCore_UpdateImageType"

function OrCore_GetInnerHtml(objSender)
	OrCore_GetInnerHtml = OrCore_GetRuntimePropertyOrOverride(objSender, "innerhtml", "InnerHtml")
end function
RegisterUserFunc "Image", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "Link", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebArea", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebButton", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebCheckBox", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebEdit", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebElement", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebFile", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebList", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebNumber", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebRadioGroup", "InnerHtml", "OrCore_GetInnerHtml"
RegisterUserFunc "WebTable", "InnerHtml", "OrCore_GetInnerHtml"

function OrCore_UpdateInnerHtml(objSender, newValue)
	set OrCore_UpdateInnerHtml = OrCore_Update(objSender, "innerhtml", newValue)
end function
RegisterUserFunc "Image", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "Link", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebArea", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebButton", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebCheckBox", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebEdit", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebElement", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebFile", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebList", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebNumber", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebRadioGroup", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"
RegisterUserFunc "WebTable", "UpdateInnerHtml", "OrCore_UpdateInnerHtml"

function OrCore_GetInnerText(objSender)
	OrCore_GetInnerText = OrCore_GetRuntimePropertyOrOverride(objSender, "innertext", "InnerText")
end function
RegisterUserFunc "Image", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "Link", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebArea", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebButton", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebCheckBox", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebEdit", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebElement", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebFile", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebList", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebNumber", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebRadioGroup", "InnerText", "OrCore_GetInnerText"
RegisterUserFunc "WebTable", "InnerText", "OrCore_GetInnerText"

function OrCore_UpdateInnerText(objSender, newValue)
	set OrCore_UpdateInnerText = OrCore_Update(objSender, "innertext", newValue)
end function
RegisterUserFunc "Image", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "Link", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebArea", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebButton", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebCheckBox", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebEdit", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebElement", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebFile", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebList", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebNumber", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebRadioGroup", "UpdateInnerText", "OrCore_UpdateInnerText"
RegisterUserFunc "WebTable", "UpdateInnerText", "OrCore_UpdateInnerText"

function OrCore_GetIsChildWindow(objSender)
	OrCore_GetIsChildWindow = OrCore_GetRuntimePropertyOrOverride(objSender, "is child window", "IsChildWindow")
end function
RegisterUserFunc "Dialog", "IsChildWindow", "OrCore_GetIsChildWindow"

function OrCore_UpdateIsChildWindow(objSender, newValue)
	set OrCore_UpdateIsChildWindow = OrCore_Update(objSender, "is child window", newValue)
end function
RegisterUserFunc "Dialog", "UpdateIsChildWindow", "OrCore_UpdateIsChildWindow"

function OrCore_GetIsMdiChildWindow(objSender)
	OrCore_GetIsMdiChildWindow = OrCore_GetRuntimePropertyOrOverride(objSender, "ismdichildwindow", "IsMdiChildWindow")
end function
RegisterUserFunc "Dialog", "IsMdiChildWindow", "OrCore_GetIsMdiChildWindow"

function OrCore_UpdateIsMdiChildWindow(objSender, newValue)
	set OrCore_UpdateIsMdiChildWindow = OrCore_Update(objSender, "ismdichildwindow", newValue)
end function
RegisterUserFunc "Dialog", "UpdateIsMdiChildWindow", "OrCore_UpdateIsMdiChildWindow"

function OrCore_GetIsOwnedWindow(objSender)
	OrCore_GetIsOwnedWindow = OrCore_GetRuntimePropertyOrOverride(objSender, "is owned window", "IsOwnedWindow")
end function
RegisterUserFunc "Dialog", "IsOwnedWindow", "OrCore_GetIsOwnedWindow"

function OrCore_UpdateIsOwnedWindow(objSender, newValue)
	set OrCore_UpdateIsOwnedWindow = OrCore_Update(objSender, "is owned window", newValue)
end function
RegisterUserFunc "Dialog", "UpdateIsOwnedWindow", "OrCore_UpdateIsOwnedWindow"

function OrCore_GetIsPopupWindow(objSender)
	OrCore_GetIsPopupWindow = OrCore_GetRuntimePropertyOrOverride(objSender, "ispopupwindow", "IsPopupWindow")
end function
RegisterUserFunc "Dialog", "IsPopupWindow", "OrCore_GetIsPopupWindow"

function OrCore_UpdateIsPopupWindow(objSender, newValue)
	set OrCore_UpdateIsPopupWindow = OrCore_Update(objSender, "ispopupwindow", newValue)
end function
RegisterUserFunc "Dialog", "UpdateIsPopupWindow", "OrCore_UpdateIsPopupWindow"

function OrCore_GetIsToolWindow(objSender)
	OrCore_GetIsToolWindow = OrCore_GetRuntimePropertyOrOverride(objSender, "istoolwindow", "IsToolWindow")
end function
RegisterUserFunc "Dialog", "IsToolWindow", "OrCore_GetIsToolWindow"

function OrCore_UpdateIsToolWindow(objSender, newValue)
	set OrCore_UpdateIsToolWindow = OrCore_Update(objSender, "istoolwindow", newValue)
end function
RegisterUserFunc "Dialog", "UpdateIsToolWindow", "OrCore_UpdateIsToolWindow"

function OrCore_GetItemsCount(objSender)
	OrCore_GetItemsCount = OrCore_GetRuntimePropertyOrOverride(objSender, "items count", "ItemsCount")
end function
RegisterUserFunc "WebList", "ItemsCount", "OrCore_GetItemsCount"
RegisterUserFunc "WebRadioGroup", "ItemsCount", "OrCore_GetItemsCount"

function OrCore_UpdateItemsCount(objSender, newValue)
	set OrCore_UpdateItemsCount = OrCore_Update(objSender, "items count", newValue)
end function
RegisterUserFunc "WebList", "UpdateItemsCount", "OrCore_UpdateItemsCount"
RegisterUserFunc "WebRadioGroup", "UpdateItemsCount", "OrCore_UpdateItemsCount"

function OrCore_GetKind(objSender)
	OrCore_GetKind = OrCore_GetRuntimePropertyOrOverride(objSender, "kind", "Kind")
end function
RegisterUserFunc "WebEdit", "Kind", "OrCore_GetKind"
RegisterUserFunc "WebNumber", "Kind", "OrCore_GetKind"

function OrCore_UpdateKind(objSender, newValue)
	set OrCore_UpdateKind = OrCore_Update(objSender, "kind", newValue)
end function
RegisterUserFunc "WebEdit", "UpdateKind", "OrCore_UpdateKind"
RegisterUserFunc "WebNumber", "UpdateKind", "OrCore_UpdateKind"

function OrCore_GetLeftScrollBar(objSender)
	OrCore_GetLeftScrollBar = OrCore_GetRuntimePropertyOrOverride(objSender, "leftscrollbar", "VScrollBarOnLeft")
end function
RegisterUserFunc "Dialog", "VScrollBarOnLeft", "OrCore_GetLeftScrollBar"

function OrCore_UpdateLeftScrollBar(objSender, newValue)
	set OrCore_UpdateLeftScrollBar = OrCore_Update(objSender, "leftscrollbar", newValue)
end function
RegisterUserFunc "Dialog", "UpdateLeftScrollBar", "OrCore_UpdateLeftScrollBar"

function OrCore_UpdateLocation(objSender, newValue)
	set OrCore_UpdateLocation = OrCore_Update(objSender, "location", newValue)
end function
RegisterUserFunc "Browser", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "Dialog", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "Frame", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "Image", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "Link", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "Page", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "Static", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebArea", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebButton", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebCheckBox", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebEdit", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebElement", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebFile", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebList", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebNumber", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebRadioGroup", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WebTable", "UpdateLocation", "OrCore_UpdateLocation"
RegisterUserFunc "WinButton", "UpdateLocation", "OrCore_UpdateLocation"

function OrCore_GetMapName(objSender)
	OrCore_GetMapName = OrCore_GetRuntimePropertyOrOverride(objSender, "map name", "MapName")
end function
RegisterUserFunc "WebArea", "MapName", "OrCore_GetMapName"

function OrCore_UpdateMapName(objSender, newValue)
	set OrCore_UpdateMapName = OrCore_Update(objSender, "map name", newValue)
end function
RegisterUserFunc "WebArea", "UpdateMapName", "OrCore_UpdateMapName"

function OrCore_GetMaxHScrollPos(objSender)
	OrCore_GetMaxHScrollPos = OrCore_GetRuntimePropertyOrOverride(objSender, "maxhscrollpos", "MaxHScrollPos")
end function
RegisterUserFunc "Dialog", "MaxHScrollPos", "OrCore_GetMaxHScrollPos"

function OrCore_UpdateMaxHScrollPos(objSender, newValue)
	set OrCore_UpdateMaxHScrollPos = OrCore_Update(objSender, "maxhscrollpos", newValue)
end function
RegisterUserFunc "Dialog", "UpdateMaxHScrollPos", "OrCore_UpdateMaxHScrollPos"

function OrCore_GetMaximizable(objSender)
	OrCore_GetMaximizable = OrCore_GetRuntimePropertyOrOverride(objSender, "maximizable", "IsMaximizable")
end function
RegisterUserFunc "Dialog", "IsMaximizable", "OrCore_GetMaximizable"

function OrCore_UpdateMaximizable(objSender, newValue)
	set OrCore_UpdateMaximizable = OrCore_Update(objSender, "maximizable", newValue)
end function
RegisterUserFunc "Dialog", "UpdateMaximizable", "OrCore_UpdateMaximizable"

function OrCore_GetMaximized(objSender)
	OrCore_GetMaximized = OrCore_GetRuntimePropertyOrOverride(objSender, "maximized", "IsMaximized")
end function
RegisterUserFunc "Dialog", "IsMaximized", "OrCore_GetMaximized"

function OrCore_UpdateMaximized(objSender, newValue)
	set OrCore_UpdateMaximized = OrCore_Update(objSender, "maximized", newValue)
end function
RegisterUserFunc "Dialog", "UpdateMaximized", "OrCore_UpdateMaximized"

function OrCore_GetMaxLength(objSender)
	OrCore_GetMaxLength = OrCore_GetRuntimePropertyOrOverride(objSender, "max length", "MaxLength")
end function
RegisterUserFunc "WebEdit", "MaxLength", "OrCore_GetMaxLength"
RegisterUserFunc "WebNumber", "MaxLength", "OrCore_GetMaxLength"

function OrCore_UpdateMaxLength(objSender, newValue)
	set OrCore_UpdateMaxLength = OrCore_Update(objSender, "max length", newValue)
end function
RegisterUserFunc "WebEdit", "UpdateMaxLength", "OrCore_UpdateMaxLength"
RegisterUserFunc "WebNumber", "UpdateMaxLength", "OrCore_UpdateMaxLength"

function OrCore_GetMaxVScrollPos(objSender)
	OrCore_GetMaxVScrollPos = OrCore_GetRuntimePropertyOrOverride(objSender, "maxvscrollpos", "MaxVScrollPos")
end function
RegisterUserFunc "Dialog", "MaxVScrollPos", "OrCore_GetMaxVScrollPos"

function OrCore_UpdateMaxVScrollPos(objSender, newValue)
	set OrCore_UpdateMaxVScrollPos = OrCore_Update(objSender, "maxvscrollpos", newValue)
end function
RegisterUserFunc "Dialog", "UpdateMaxVScrollPos", "OrCore_UpdateMaxVScrollPos"

function OrCore_UpdateMicclass(objSender, newValue)
	set OrCore_UpdateMicclass = OrCore_Update(objSender, "micclass", newValue)
end function
RegisterUserFunc "Browser", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "Dialog", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "Frame", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "Image", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "Link", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "Page", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "Static", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebArea", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebButton", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebCheckBox", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebEdit", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebElement", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebFile", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebList", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebNumber", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebRadioGroup", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WebTable", "UpdateMicclass", "OrCore_UpdateMicclass"
RegisterUserFunc "WinButton", "UpdateMicclass", "OrCore_UpdateMicclass"

function OrCore_GetMinimizable(objSender)
	OrCore_GetMinimizable = OrCore_GetRuntimePropertyOrOverride(objSender, "minimizable", "IsMinimizable")
end function
RegisterUserFunc "Dialog", "IsMinimizable", "OrCore_GetMinimizable"

function OrCore_UpdateMinimizable(objSender, newValue)
	set OrCore_UpdateMinimizable = OrCore_Update(objSender, "minimizable", newValue)
end function
RegisterUserFunc "Dialog", "UpdateMinimizable", "OrCore_UpdateMinimizable"

function OrCore_GetMinimized(objSender)
	OrCore_GetMinimized = OrCore_GetRuntimePropertyOrOverride(objSender, "minimized", "IsMinimized")
end function
RegisterUserFunc "Dialog", "IsMinimized", "OrCore_GetMinimized"

function OrCore_UpdateMinimized(objSender, newValue)
	set OrCore_UpdateMinimized = OrCore_Update(objSender, "minimized", newValue)
end function
RegisterUserFunc "Dialog", "UpdateMinimized", "OrCore_UpdateMinimized"

function OrCore_GetMinVScrollPos(objSender)
	OrCore_GetMinVScrollPos = OrCore_GetRuntimePropertyOrOverride(objSender, "minvscrollpos", "MinVScrollPos")
end function
RegisterUserFunc "Dialog", "MinVScrollPos", "OrCore_GetMinVScrollPos"

function OrCore_UpdateMinVScrollPos(objSender, newValue)
	set OrCore_UpdateMinVScrollPos = OrCore_Update(objSender, "minvscrollpos", newValue)
end function
RegisterUserFunc "Dialog", "UpdateMinVScrollPos", "OrCore_UpdateMinVScrollPos"

function OrCore_GetName(objSender)
	OrCore_GetName = OrCore_GetRuntimePropertyOrOverride(objSender, "name", "Name")
end function
RegisterUserFunc "Browser", "Name", "OrCore_GetName"
RegisterUserFunc "Frame", "Name", "OrCore_GetName"
RegisterUserFunc "Image", "Name", "OrCore_GetName"
RegisterUserFunc "Link", "Name", "OrCore_GetName"
RegisterUserFunc "Page", "Name", "OrCore_GetName"
RegisterUserFunc "WebButton", "Name", "OrCore_GetName"
RegisterUserFunc "WebCheckBox", "Name", "OrCore_GetName"
RegisterUserFunc "WebEdit", "Name", "OrCore_GetName"
RegisterUserFunc "WebFile", "Name", "OrCore_GetName"
RegisterUserFunc "WebList", "Name", "OrCore_GetName"
RegisterUserFunc "WebNumber", "Name", "OrCore_GetName"
RegisterUserFunc "WebRadioGroup", "Name", "OrCore_GetName"
RegisterUserFunc "WebTable", "Name", "OrCore_GetName"

function OrCore_UpdateName(objSender, newValue)
	set OrCore_UpdateName = OrCore_Update(objSender, "name", newValue)
end function
RegisterUserFunc "Browser", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "Frame", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "Image", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "Link", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "Page", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "WebButton", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "WebCheckBox", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "WebEdit", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "WebFile", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "WebList", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "WebNumber", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "WebRadioGroup", "UpdateName", "OrCore_UpdateName"
RegisterUserFunc "WebTable", "UpdateName", "OrCore_UpdateName"

function OrCore_GetNativeClass(objSender)
	OrCore_GetNativeClass = OrCore_GetRuntimePropertyOrOverride(objSender, "nativeclass", "NativeClass")
end function
RegisterUserFunc "Dialog", "NativeClass", "OrCore_GetNativeClass"
RegisterUserFunc "Static", "NativeClass", "OrCore_GetNativeClass"
RegisterUserFunc "WinButton", "NativeClass", "OrCore_GetNativeClass"

function OrCore_UpdateNativeClass(objSender, newValue)
	set OrCore_UpdateNativeClass = OrCore_Update(objSender, "nativeclass", newValue)
end function
RegisterUserFunc "Dialog", "UpdateNativeClass", "OrCore_UpdateNativeClass"
RegisterUserFunc "Static", "UpdateNativeClass", "OrCore_UpdateNativeClass"
RegisterUserFunc "WinButton", "UpdateNativeClass", "OrCore_UpdateNativeClass"

function OrCore_GetNumberOfTabs(objSender)
	OrCore_GetNumberOfTabs = OrCore_GetRuntimePropertyOrOverride(objSender, "number of tabs", "NumberOfTabs")
end function
RegisterUserFunc "Browser", "NumberOfTabs", "OrCore_GetNumberOfTabs"

function OrCore_UpdateNumberOfTabs(objSender, newValue)
	set OrCore_UpdateNumberOfTabs = OrCore_Update(objSender, "number of tabs", newValue)
end function
RegisterUserFunc "Browser", "UpdateNumberOfTabs", "OrCore_UpdateNumberOfTabs"

function OrCore_GetObjectClass(objSender)
	OrCore_GetObjectClass = OrCore_GetRuntimePropertyOrOverride(objSender, "object class", "ObjectClass")
end function
RegisterUserFunc "Dialog", "ObjectClass", "OrCore_GetObjectClass"
RegisterUserFunc "Static", "ObjectClass", "OrCore_GetObjectClass"
RegisterUserFunc "WinButton", "ObjectClass", "OrCore_GetObjectClass"

function OrCore_UpdateObjectClass(objSender, newValue)
	set OrCore_UpdateObjectClass = OrCore_Update(objSender, "object class", newValue)
end function
RegisterUserFunc "Dialog", "UpdateObjectClass", "OrCore_UpdateObjectClass"
RegisterUserFunc "Static", "UpdateObjectClass", "OrCore_UpdateObjectClass"
RegisterUserFunc "WinButton", "UpdateObjectClass", "OrCore_UpdateObjectClass"

function OrCore_GetOpenedByTestingTool(objSender)
	OrCore_GetOpenedByTestingTool = OrCore_GetRuntimePropertyOrOverride(objSender, "openedbytestingtool", "IsOpenedByTestingTool")
end function
RegisterUserFunc "Browser", "IsOpenedByTestingTool", "OrCore_GetOpenedByTestingTool"

function OrCore_UpdateOpenedByTestingTool(objSender, newValue)
	set OrCore_UpdateOpenedByTestingTool = OrCore_Update(objSender, "openedbytestingtool", newValue)
end function
RegisterUserFunc "Browser", "UpdateOpenedByTestingTool", "OrCore_UpdateOpenedByTestingTool"

function OrCore_GetOpenTitle(objSender)
	OrCore_GetOpenTitle = OrCore_GetRuntimePropertyOrOverride(objSender, "opentitle", "OpenTitle")
end function
RegisterUserFunc "Browser", "OpenTitle", "OrCore_GetOpenTitle"

function OrCore_UpdateOpenTitle(objSender, newValue)
	set OrCore_UpdateOpenTitle = OrCore_Update(objSender, "opentitle", newValue)
end function
RegisterUserFunc "Browser", "UpdateOpenTitle", "OrCore_UpdateOpenTitle"

function OrCore_GetOpenUrl(objSender)
	OrCore_GetOpenUrl = OrCore_GetRuntimePropertyOrOverride(objSender, "openurl", "OpenUrl")
end function
RegisterUserFunc "Browser", "OpenUrl", "OrCore_GetOpenUrl"

function OrCore_UpdateOpenUrl(objSender, newValue)
	set OrCore_UpdateOpenUrl = OrCore_Update(objSender, "openurl", newValue)
end function
RegisterUserFunc "Browser", "UpdateOpenUrl", "OrCore_UpdateOpenUrl"

function OrCore_GetOuterHtml(objSender)
	OrCore_GetOuterHtml = OrCore_GetRuntimePropertyOrOverride(objSender, "outerhtml", "OuterHtml")
end function
RegisterUserFunc "Image", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "Link", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebArea", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebButton", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebCheckBox", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebEdit", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebElement", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebFile", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebList", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebNumber", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebRadioGroup", "OuterHtml", "OrCore_GetOuterHtml"
RegisterUserFunc "WebTable", "OuterHtml", "OrCore_GetOuterHtml"

function OrCore_UpdateOuterHtml(objSender, newValue)
	set OrCore_UpdateOuterHtml = OrCore_Update(objSender, "outerhtml", newValue)
end function
RegisterUserFunc "Image", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "Link", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebArea", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebButton", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebCheckBox", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebEdit", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebElement", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebFile", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebList", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebNumber", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebRadioGroup", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"
RegisterUserFunc "WebTable", "UpdateOuterHtml", "OrCore_UpdateOuterHtml"

function OrCore_GetRegExpWndClass(objSender)
	OrCore_GetRegExpWndClass = OrCore_GetRuntimePropertyOrOverride(objSender, "regexpwndclass", "RegExpWndClass")
end function
RegisterUserFunc "Dialog", "RegExpWndClass", "OrCore_GetRegExpWndClass"
RegisterUserFunc "Static", "RegExpWndClass", "OrCore_GetRegExpWndClass"
RegisterUserFunc "WinButton", "RegExpWndClass", "OrCore_GetRegExpWndClass"

function OrCore_UpdateRegExpWndClass(objSender, newValue)
	set OrCore_UpdateRegExpWndClass = OrCore_Update(objSender, "regexpwndclass", newValue)
end function
RegisterUserFunc "Dialog", "UpdateRegExpWndClass", "OrCore_UpdateRegExpWndClass"
RegisterUserFunc "Static", "UpdateRegExpWndClass", "OrCore_UpdateRegExpWndClass"
RegisterUserFunc "WinButton", "UpdateRegExpWndClass", "OrCore_UpdateRegExpWndClass"

function OrCore_GetRegExpWndTitle(objSender)
	OrCore_GetRegExpWndTitle = OrCore_GetRuntimePropertyOrOverride(objSender, "regexpwndtitle", "RegExpWndTitle")
end function
RegisterUserFunc "Dialog", "RegExpWndTitle", "OrCore_GetRegExpWndTitle"
RegisterUserFunc "Static", "RegExpWndTitle", "OrCore_GetRegExpWndTitle"
RegisterUserFunc "WinButton", "RegExpWndTitle", "OrCore_GetRegExpWndTitle"

function OrCore_UpdateRegExpWndTitle(objSender, newValue)
	set OrCore_UpdateRegExpWndTitle = OrCore_Update(objSender, "regexpwndtitle", newValue)
end function
RegisterUserFunc "Dialog", "UpdateRegExpWndTitle", "OrCore_UpdateRegExpWndTitle"
RegisterUserFunc "Static", "UpdateRegExpWndTitle", "OrCore_UpdateRegExpWndTitle"
RegisterUserFunc "WinButton", "UpdateRegExpWndTitle", "OrCore_UpdateRegExpWndTitle"

function OrCore_GetRightAligned(objSender)
	OrCore_GetRightAligned = OrCore_GetRuntimePropertyOrOverride(objSender, "rightaligned", "IsRightAligned")
end function
RegisterUserFunc "Dialog", "IsRightAligned", "OrCore_GetRightAligned"

function OrCore_UpdateRightAligned(objSender, newValue)
	set OrCore_UpdateRightAligned = OrCore_Update(objSender, "rightaligned", newValue)
end function
RegisterUserFunc "Dialog", "UpdateRightAligned", "OrCore_UpdateRightAligned"

function OrCore_GetRightToLeftLayout(objSender)
	OrCore_GetRightToLeftLayout = OrCore_GetRuntimePropertyOrOverride(objSender, "righttoleftlayout", "RightToLeftLayout")
end function
RegisterUserFunc "Dialog", "RightToLeftLayout", "OrCore_GetRightToLeftLayout"

function OrCore_UpdateRightToLeftLayout(objSender, newValue)
	set OrCore_UpdateRightToLeftLayout = OrCore_Update(objSender, "righttoleftlayout", newValue)
end function
RegisterUserFunc "Dialog", "UpdateRightToLeftLayout", "OrCore_UpdateRightToLeftLayout"

function OrCore_GetRightToLeftReading(objSender)
	OrCore_GetRightToLeftReading = OrCore_GetRuntimePropertyOrOverride(objSender, "righttoleftreading", "RightToLeftReading")
end function
RegisterUserFunc "Dialog", "RightToLeftReading", "OrCore_GetRightToLeftReading"

function OrCore_UpdateRightToLeftReading(objSender, newValue)
	set OrCore_UpdateRightToLeftReading = OrCore_Update(objSender, "righttoleftreading", newValue)
end function
RegisterUserFunc "Dialog", "UpdateRightToLeftReading", "OrCore_UpdateRightToLeftReading"

function OrCore_GetRows(objSender)
	OrCore_GetRows = OrCore_GetRuntimePropertyOrOverride(objSender, "rows", "Rows")
end function
RegisterUserFunc "WebEdit", "Rows", "OrCore_GetRows"

function OrCore_UpdateRows(objSender, newValue)
	set OrCore_UpdateRows = OrCore_Update(objSender, "rows", newValue)
end function
RegisterUserFunc "WebEdit", "UpdateRows", "OrCore_UpdateRows"

function OrCore_GetSelectedItemIndex(objSender)
	OrCore_GetSelectedItemIndex = OrCore_GetRuntimePropertyOrOverride(objSender, "selected item index", "SelectedItemIndex")
end function
RegisterUserFunc "WebList", "SelectedItemIndex", "OrCore_GetSelectedItemIndex"

function OrCore_UpdateSelectedItemIndex(objSender, newValue)
	set OrCore_UpdateSelectedItemIndex = OrCore_Update(objSender, "selected item index", newValue)
end function
RegisterUserFunc "WebList", "UpdateSelectedItemIndex", "OrCore_UpdateSelectedItemIndex"

function OrCore_GetSelectedItemsCount(objSender)
	OrCore_GetSelectedItemsCount = OrCore_GetRuntimePropertyOrOverride(objSender, "selected items count", "SelectedItemsCount")
end function
RegisterUserFunc "WebList", "SelectedItemsCount", "OrCore_GetSelectedItemsCount"

function OrCore_UpdateSelectedItemsCount(objSender, newValue)
	set OrCore_UpdateSelectedItemsCount = OrCore_Update(objSender, "selected items count", newValue)
end function
RegisterUserFunc "WebList", "UpdateSelectedItemsCount", "OrCore_UpdateSelectedItemsCount"

function OrCore_GetSelection(objSender)
	OrCore_GetSelection = OrCore_GetRuntimePropertyOrOverride(objSender, "selection", "Selection")
end function
RegisterUserFunc "WebList", "Selection", "OrCore_GetSelection"

function OrCore_UpdateSelection(objSender, newValue)
	set OrCore_UpdateSelection = OrCore_Update(objSender, "selection", newValue)
end function
RegisterUserFunc "WebList", "UpdateSelection", "OrCore_UpdateSelection"

function OrCore_GetSelectType(objSender)
	OrCore_GetSelectType = OrCore_GetRuntimePropertyOrOverride(objSender, "select type", "SelectType")
end function
RegisterUserFunc "WebList", "SelectType", "OrCore_GetSelectType"

function OrCore_UpdateSelectType(objSender, newValue)
	set OrCore_UpdateSelectType = OrCore_Update(objSender, "select type", newValue)
end function
RegisterUserFunc "WebList", "UpdateSelectType", "OrCore_UpdateSelectType"

function OrCore_GetSrc(objSender)
	OrCore_GetSrc = OrCore_GetRuntimePropertyOrOverride(objSender, "src", "Src")
end function
RegisterUserFunc "Image", "Src", "OrCore_GetSrc"
RegisterUserFunc "WebArea", "Src", "OrCore_GetSrc"

function OrCore_UpdateSrc(objSender, newValue)
	set OrCore_UpdateSrc = OrCore_Update(objSender, "src", newValue)
end function
RegisterUserFunc "Image", "UpdateSrc", "OrCore_UpdateSrc"
RegisterUserFunc "WebArea", "UpdateSrc", "OrCore_UpdateSrc"

function OrCore_GetTarget(objSender)
	OrCore_GetTarget = OrCore_GetRuntimePropertyOrOverride(objSender, "target", "Target")
end function
RegisterUserFunc "Image", "Target", "OrCore_GetTarget"
RegisterUserFunc "Link", "Target", "OrCore_GetTarget"
RegisterUserFunc "WebArea", "Target", "OrCore_GetTarget"

function OrCore_UpdateTarget(objSender, newValue)
	set OrCore_UpdateTarget = OrCore_Update(objSender, "target", newValue)
end function
RegisterUserFunc "Image", "UpdateTarget", "OrCore_UpdateTarget"
RegisterUserFunc "Link", "UpdateTarget", "OrCore_UpdateTarget"
RegisterUserFunc "WebArea", "UpdateTarget", "OrCore_UpdateTarget"

function OrCore_GetText(objSender)
	OrCore_GetText = OrCore_GetRuntimePropertyOrOverride(objSender, "text", "Text")
end function
RegisterUserFunc "Dialog", "Text", "OrCore_GetText"
RegisterUserFunc "Frame", "Text", "OrCore_GetText"
RegisterUserFunc "Link", "Text", "OrCore_GetText"
RegisterUserFunc "Page", "Text", "OrCore_GetText"
RegisterUserFunc "Static", "Text", "OrCore_GetText"
RegisterUserFunc "WebTable", "Text", "OrCore_GetText"
RegisterUserFunc "WinButton", "Text", "OrCore_GetText"

function OrCore_UpdateText(objSender, newValue)
	set OrCore_UpdateText = OrCore_Update(objSender, "text", newValue)
end function
RegisterUserFunc "Dialog", "UpdateText", "OrCore_UpdateText"
RegisterUserFunc "Frame", "UpdateText", "OrCore_UpdateText"
RegisterUserFunc "Link", "UpdateText", "OrCore_UpdateText"
RegisterUserFunc "Page", "UpdateText", "OrCore_UpdateText"
RegisterUserFunc "Static", "UpdateText", "OrCore_UpdateText"
RegisterUserFunc "WebTable", "UpdateText", "OrCore_UpdateText"
RegisterUserFunc "WinButton", "UpdateText", "OrCore_UpdateText"

function OrCore_GetTitle(objSender)
	OrCore_GetTitle = OrCore_GetRuntimePropertyOrOverride(objSender, "title", "Title")
end function
RegisterUserFunc "Browser", "Title", "OrCore_GetTitle"
RegisterUserFunc "Frame", "Title", "OrCore_GetTitle"
RegisterUserFunc "Page", "Title", "OrCore_GetTitle"

function OrCore_UpdateTitle(objSender, newValue)
	set OrCore_UpdateTitle = OrCore_Update(objSender, "title", newValue)
end function
RegisterUserFunc "Browser", "UpdateTitle", "OrCore_UpdateTitle"
RegisterUserFunc "Frame", "UpdateTitle", "OrCore_UpdateTitle"
RegisterUserFunc "Page", "UpdateTitle", "OrCore_UpdateTitle"

function OrCore_GetTopmost(objSender)
	OrCore_GetTopmost = OrCore_GetRuntimePropertyOrOverride(objSender, "topmost", "IsTopmost")
end function
RegisterUserFunc "Dialog", "IsTopmost", "OrCore_GetTopmost"

function OrCore_UpdateTopmost(objSender, newValue)
	set OrCore_UpdateTopmost = OrCore_Update(objSender, "topmost", newValue)
end function
RegisterUserFunc "Dialog", "UpdateTopmost", "OrCore_UpdateTopmost"

function OrCore_GetTotalColumnsCount(objSender)
	OrCore_GetTotalColumnsCount = OrCore_GetRuntimePropertyOrOverride(objSender, "cols", "TotalColumnsCount")
end function
RegisterUserFunc "WebTable", "TotalColumnsCount", "OrCore_GetTotalColumnsCount"

function OrCore_UpdateTotalColumnsCount(objSender, newValue)
	set OrCore_UpdateTotalColumnsCount = OrCore_Update(objSender, "cols", newValue)
end function
RegisterUserFunc "WebTable", "UpdateTotalColumnsCount", "OrCore_UpdateTotalColumnsCount"

function OrCore_GetTotalRowsCount(objSender)
	OrCore_GetTotalRowsCount = OrCore_GetRuntimePropertyOrOverride(objSender, "rows", "TotalRowsCount")
end function
RegisterUserFunc "WebTable", "TotalRowsCount", "OrCore_GetTotalRowsCount"

function OrCore_UpdateTotalRowsCount(objSender, newValue)
	set OrCore_UpdateTotalRowsCount = OrCore_Update(objSender, "rows", newValue)
end function
RegisterUserFunc "WebTable", "UpdateTotalRowsCount", "OrCore_UpdateTotalRowsCount"

function OrCore_GetType(objSender)
	OrCore_GetType = OrCore_GetRuntimePropertyOrOverride(objSender, "type", "Type")
end function
RegisterUserFunc "WebButton", "Type", "OrCore_GetType"
RegisterUserFunc "WebCheckBox", "Type", "OrCore_GetType"
RegisterUserFunc "WebEdit", "Type", "OrCore_GetType"
RegisterUserFunc "WebElement", "Type", "OrCore_GetType"
RegisterUserFunc "WebFile", "Type", "OrCore_GetType"
RegisterUserFunc "WebNumber", "Type", "OrCore_GetType"
RegisterUserFunc "WebRadioGroup", "Type", "OrCore_GetType"

function OrCore_UpdateType(objSender, newValue)
	set OrCore_UpdateType = OrCore_Update(objSender, "type", newValue)
end function
RegisterUserFunc "WebButton", "UpdateType", "OrCore_UpdateType"
RegisterUserFunc "WebCheckBox", "UpdateType", "OrCore_UpdateType"
RegisterUserFunc "WebEdit", "UpdateType", "OrCore_UpdateType"
RegisterUserFunc "WebElement", "UpdateType", "OrCore_UpdateType"
RegisterUserFunc "WebFile", "UpdateType", "OrCore_UpdateType"
RegisterUserFunc "WebNumber", "UpdateType", "OrCore_UpdateType"
RegisterUserFunc "WebRadioGroup", "UpdateType", "OrCore_UpdateType"

function OrCore_GetUrl(objSender)
	OrCore_GetUrl = OrCore_GetRuntimePropertyOrOverride(objSender, "url", "Url")
end function
RegisterUserFunc "Frame", "Url", "OrCore_GetUrl"
RegisterUserFunc "Image", "Url", "OrCore_GetUrl"
RegisterUserFunc "Link", "Url", "OrCore_GetUrl"
RegisterUserFunc "Page", "Url", "OrCore_GetUrl"
RegisterUserFunc "WebArea", "Url", "OrCore_GetUrl"

function OrCore_UpdateUrl(objSender, newValue)
	set OrCore_UpdateUrl = OrCore_Update(objSender, "url", newValue)
end function
RegisterUserFunc "Frame", "UpdateUrl", "OrCore_UpdateUrl"
RegisterUserFunc "Image", "UpdateUrl", "OrCore_UpdateUrl"
RegisterUserFunc "Link", "UpdateUrl", "OrCore_UpdateUrl"
RegisterUserFunc "Page", "UpdateUrl", "OrCore_UpdateUrl"
RegisterUserFunc "WebArea", "UpdateUrl", "OrCore_UpdateUrl"

function OrCore_GetValue(objSender)
	OrCore_GetValue = OrCore_GetRuntimePropertyOrOverride(objSender, "value", "Value")
end function
RegisterUserFunc "WebButton", "Value", "OrCore_GetValue"
RegisterUserFunc "WebCheckBox", "Value", "OrCore_GetValue"
RegisterUserFunc "WebEdit", "Value", "OrCore_GetValue"
RegisterUserFunc "WebFile", "Value", "OrCore_GetValue"
RegisterUserFunc "WebList", "Value", "OrCore_GetValue"
RegisterUserFunc "WebNumber", "Value", "OrCore_GetValue"
RegisterUserFunc "WebRadioGroup", "Value", "OrCore_GetValue"

function OrCore_UpdateValue(objSender, newValue)
	set OrCore_UpdateValue = OrCore_Update(objSender, "value", newValue)
end function
RegisterUserFunc "WebButton", "UpdateValue", "OrCore_UpdateValue"
RegisterUserFunc "WebCheckBox", "UpdateValue", "OrCore_UpdateValue"
RegisterUserFunc "WebEdit", "UpdateValue", "OrCore_UpdateValue"
RegisterUserFunc "WebFile", "UpdateValue", "OrCore_UpdateValue"
RegisterUserFunc "WebList", "UpdateValue", "OrCore_UpdateValue"
RegisterUserFunc "WebNumber", "UpdateValue", "OrCore_UpdateValue"
RegisterUserFunc "WebRadioGroup", "UpdateValue", "OrCore_UpdateValue"

function OrCore_GetVersion(objSender)
	OrCore_GetVersion = OrCore_GetRuntimePropertyOrOverride(objSender, "version", "Version")
end function
RegisterUserFunc "Browser", "Version", "OrCore_GetVersion"

function OrCore_UpdateVersion(objSender, newValue)
	set OrCore_UpdateVersion = OrCore_Update(objSender, "version", newValue)
end function
RegisterUserFunc "Browser", "UpdateVersion", "OrCore_UpdateVersion"

function OrCore_GetVisible(objSender)
	OrCore_GetVisible = OrCore_GetRuntimePropertyOrOverride(objSender, "visible", "IsVisible")
end function
RegisterUserFunc "Dialog", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "Image", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "Link", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "Static", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebArea", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebButton", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebCheckBox", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebEdit", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebElement", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebFile", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebList", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebNumber", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebRadioGroup", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WebTable", "IsVisible", "OrCore_GetVisible"
RegisterUserFunc "WinButton", "IsVisible", "OrCore_GetVisible"

function OrCore_UpdateVisible(objSender, newValue)
	set OrCore_UpdateVisible = OrCore_Update(objSender, "visible", newValue)
end function
RegisterUserFunc "Dialog", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "Image", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "Link", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "Static", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebArea", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebButton", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebCheckBox", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebEdit", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebElement", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebFile", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebList", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebNumber", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebRadioGroup", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WebTable", "UpdateVisible", "OrCore_UpdateVisible"
RegisterUserFunc "WinButton", "UpdateVisible", "OrCore_UpdateVisible"

function OrCore_GetVisibleItems(objSender)
	OrCore_GetVisibleItems = OrCore_GetRuntimePropertyOrOverride(objSender, "visible items", "VisibleItems")
end function
RegisterUserFunc "WebList", "VisibleItems", "OrCore_GetVisibleItems"

function OrCore_UpdateVisibleItems(objSender, newValue)
	set OrCore_UpdateVisibleItems = OrCore_Update(objSender, "visible items", newValue)
end function
RegisterUserFunc "WebList", "UpdateVisibleItems", "OrCore_UpdateVisibleItems"

function OrCore_GetVScrollPageSize(objSender)
	OrCore_GetVScrollPageSize = OrCore_GetRuntimePropertyOrOverride(objSender, "vscrollpagesize", "VScrollPageSize")
end function
RegisterUserFunc "Dialog", "VScrollPageSize", "OrCore_GetVScrollPageSize"

function OrCore_UpdateVScrollPageSize(objSender, newValue)
	set OrCore_UpdateVScrollPageSize = OrCore_Update(objSender, "vscrollpagesize", newValue)
end function
RegisterUserFunc "Dialog", "UpdateVScrollPageSize", "OrCore_UpdateVScrollPageSize"

function OrCore_GetVScrollPosition(objSender)
	OrCore_GetVScrollPosition = OrCore_GetRuntimePropertyOrOverride(objSender, "vscrollposition", "VScrollPosition")
end function
RegisterUserFunc "Dialog", "VScrollPosition", "OrCore_GetVScrollPosition"

function OrCore_UpdateVScrollPosition(objSender, newValue)
	set OrCore_UpdateVScrollPosition = OrCore_Update(objSender, "vscrollposition", newValue)
end function
RegisterUserFunc "Dialog", "UpdateVScrollPosition", "OrCore_UpdateVScrollPosition"

function OrCore_GetWidth(objSender)
	OrCore_GetWidth = OrCore_GetRuntimePropertyOrOverride(objSender, "width", "Width")
end function
RegisterUserFunc "Browser", "Width", "OrCore_GetWidth"
RegisterUserFunc "Dialog", "Width", "OrCore_GetWidth"
RegisterUserFunc "Frame", "Width", "OrCore_GetWidth"
RegisterUserFunc "Image", "Width", "OrCore_GetWidth"
RegisterUserFunc "Link", "Width", "OrCore_GetWidth"
RegisterUserFunc "Page", "Width", "OrCore_GetWidth"
RegisterUserFunc "Static", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebArea", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebButton", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebCheckBox", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebEdit", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebElement", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebFile", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebList", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebNumber", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebRadioGroup", "Width", "OrCore_GetWidth"
RegisterUserFunc "WebTable", "Width", "OrCore_GetWidth"
RegisterUserFunc "WinButton", "Width", "OrCore_GetWidth"

function OrCore_UpdateWidth(objSender, newValue)
	set OrCore_UpdateWidth = OrCore_Update(objSender, "width", newValue)
end function
RegisterUserFunc "Browser", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "Dialog", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "Frame", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "Image", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "Link", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "Page", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "Static", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebArea", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebButton", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebCheckBox", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebEdit", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebElement", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebFile", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebList", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebNumber", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebRadioGroup", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WebTable", "UpdateWidth", "OrCore_UpdateWidth"
RegisterUserFunc "WinButton", "UpdateWidth", "OrCore_UpdateWidth"

function OrCore_GetWidthInCharacters(objSender)
	OrCore_GetWidthInCharacters = OrCore_GetRuntimePropertyOrOverride(objSender, "width in characters", "WidthInCharacters")
end function
RegisterUserFunc "WebEdit", "WidthInCharacters", "OrCore_GetWidthInCharacters"
RegisterUserFunc "WebFile", "WidthInCharacters", "OrCore_GetWidthInCharacters"
RegisterUserFunc "WebNumber", "WidthInCharacters", "OrCore_GetWidthInCharacters"

function OrCore_UpdateWidthInCharacters(objSender, newValue)
	set OrCore_UpdateWidthInCharacters = OrCore_Update(objSender, "width in characters", newValue)
end function
RegisterUserFunc "WebEdit", "UpdateWidthInCharacters", "OrCore_UpdateWidthInCharacters"
RegisterUserFunc "WebFile", "UpdateWidthInCharacters", "OrCore_UpdateWidthInCharacters"
RegisterUserFunc "WebNumber", "UpdateWidthInCharacters", "OrCore_UpdateWidthInCharacters"

function OrCore_GetWindowExtendedStyle(objSender)
	OrCore_GetWindowExtendedStyle = OrCore_GetRuntimePropertyOrOverride(objSender, "windowextendedstyle", "WindowExtendedStyle")
end function
RegisterUserFunc "Dialog", "WindowExtendedStyle", "OrCore_GetWindowExtendedStyle"
RegisterUserFunc "Static", "WindowExtendedStyle", "OrCore_GetWindowExtendedStyle"
RegisterUserFunc "WinButton", "WindowExtendedStyle", "OrCore_GetWindowExtendedStyle"

function OrCore_UpdateWindowExtendedStyle(objSender, newValue)
	set OrCore_UpdateWindowExtendedStyle = OrCore_Update(objSender, "windowextendedstyle", newValue)
end function
RegisterUserFunc "Dialog", "UpdateWindowExtendedStyle", "OrCore_UpdateWindowExtendedStyle"
RegisterUserFunc "Static", "UpdateWindowExtendedStyle", "OrCore_UpdateWindowExtendedStyle"
RegisterUserFunc "WinButton", "UpdateWindowExtendedStyle", "OrCore_UpdateWindowExtendedStyle"

function OrCore_GetWindowId(objSender)
	OrCore_GetWindowId = OrCore_GetRuntimePropertyOrOverride(objSender, "window id", "WindowId")
end function
RegisterUserFunc "Dialog", "WindowId", "OrCore_GetWindowId"
RegisterUserFunc "Static", "WindowId", "OrCore_GetWindowId"
RegisterUserFunc "WinButton", "WindowId", "OrCore_GetWindowId"

function OrCore_UpdateWindowId(objSender, newValue)
	set OrCore_UpdateWindowId = OrCore_Update(objSender, "window id", newValue)
end function
RegisterUserFunc "Dialog", "UpdateWindowId", "OrCore_UpdateWindowId"
RegisterUserFunc "Static", "UpdateWindowId", "OrCore_UpdateWindowId"
RegisterUserFunc "WinButton", "UpdateWindowId", "OrCore_UpdateWindowId"

function OrCore_GetWindowStyle(objSender)
	OrCore_GetWindowStyle = OrCore_GetRuntimePropertyOrOverride(objSender, "windowstyle", "WindowStyle")
end function
RegisterUserFunc "Dialog", "WindowStyle", "OrCore_GetWindowStyle"
RegisterUserFunc "Static", "WindowStyle", "OrCore_GetWindowStyle"
RegisterUserFunc "WinButton", "WindowStyle", "OrCore_GetWindowStyle"

function OrCore_UpdateWindowStyle(objSender, newValue)
	set OrCore_UpdateWindowStyle = OrCore_Update(objSender, "windowstyle", newValue)
end function
RegisterUserFunc "Dialog", "UpdateWindowStyle", "OrCore_UpdateWindowStyle"
RegisterUserFunc "Static", "UpdateWindowStyle", "OrCore_UpdateWindowStyle"
RegisterUserFunc "WinButton", "UpdateWindowStyle", "OrCore_UpdateWindowStyle"

function OrCore_GetX(objSender)
	OrCore_GetX = OrCore_GetRuntimePropertyOrOverride(objSender, "x", "X")
end function
RegisterUserFunc "Dialog", "X", "OrCore_GetX"
RegisterUserFunc "Image", "X", "OrCore_GetX"
RegisterUserFunc "Link", "X", "OrCore_GetX"
RegisterUserFunc "Static", "X", "OrCore_GetX"
RegisterUserFunc "WebArea", "X", "OrCore_GetX"
RegisterUserFunc "WebButton", "X", "OrCore_GetX"
RegisterUserFunc "WebCheckBox", "X", "OrCore_GetX"
RegisterUserFunc "WebEdit", "X", "OrCore_GetX"
RegisterUserFunc "WebElement", "X", "OrCore_GetX"
RegisterUserFunc "WebFile", "X", "OrCore_GetX"
RegisterUserFunc "WebList", "X", "OrCore_GetX"
RegisterUserFunc "WebNumber", "X", "OrCore_GetX"
RegisterUserFunc "WebRadioGroup", "X", "OrCore_GetX"
RegisterUserFunc "WebTable", "X", "OrCore_GetX"
RegisterUserFunc "WinButton", "X", "OrCore_GetX"

function OrCore_UpdateX(objSender, newValue)
	set OrCore_UpdateX = OrCore_Update(objSender, "x", newValue)
end function
RegisterUserFunc "Dialog", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "Image", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "Link", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "Static", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebArea", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebButton", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebCheckBox", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebEdit", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebElement", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebFile", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebList", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebNumber", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebRadioGroup", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WebTable", "UpdateX", "OrCore_UpdateX"
RegisterUserFunc "WinButton", "UpdateX", "OrCore_UpdateX"

function OrCore_UpdateXpath(objSender, newValue)
	set OrCore_UpdateXpath = OrCore_Update(objSender, "xpath", newValue)
end function
RegisterUserFunc "Browser", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "Frame", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "Image", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "Link", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "Page", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebArea", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebButton", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebCheckBox", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebEdit", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebElement", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebFile", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebList", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebNumber", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebRadioGroup", "UpdateXpath", "OrCore_UpdateXpath"
RegisterUserFunc "WebTable", "UpdateXpath", "OrCore_UpdateXpath"

function OrCore_GetY(objSender)
	OrCore_GetY = OrCore_GetRuntimePropertyOrOverride(objSender, "y", "Y")
end function
RegisterUserFunc "Dialog", "Y", "OrCore_GetY"
RegisterUserFunc "Image", "Y", "OrCore_GetY"
RegisterUserFunc "Link", "Y", "OrCore_GetY"
RegisterUserFunc "Static", "Y", "OrCore_GetY"
RegisterUserFunc "WebArea", "Y", "OrCore_GetY"
RegisterUserFunc "WebButton", "Y", "OrCore_GetY"
RegisterUserFunc "WebCheckBox", "Y", "OrCore_GetY"
RegisterUserFunc "WebEdit", "Y", "OrCore_GetY"
RegisterUserFunc "WebElement", "Y", "OrCore_GetY"
RegisterUserFunc "WebFile", "Y", "OrCore_GetY"
RegisterUserFunc "WebList", "Y", "OrCore_GetY"
RegisterUserFunc "WebNumber", "Y", "OrCore_GetY"
RegisterUserFunc "WebRadioGroup", "Y", "OrCore_GetY"
RegisterUserFunc "WebTable", "Y", "OrCore_GetY"
RegisterUserFunc "WinButton", "Y", "OrCore_GetY"

function OrCore_UpdateY(objSender, newValue)
	set OrCore_UpdateY = OrCore_Update(objSender, "y", newValue)
end function
RegisterUserFunc "Dialog", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "Image", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "Link", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "Static", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebArea", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebButton", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebCheckBox", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebEdit", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebElement", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebFile", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebList", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebNumber", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebRadioGroup", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WebTable", "UpdateY", "OrCore_UpdateY"
RegisterUserFunc "WinButton", "UpdateY", "OrCore_UpdateY"
